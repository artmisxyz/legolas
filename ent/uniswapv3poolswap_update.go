// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/artmisxyz/legolas/ent/event"
	"github.com/artmisxyz/legolas/ent/predicate"
	"github.com/artmisxyz/legolas/ent/uniswapv3poolswap"
)

// UniswapV3PoolSwapUpdate is the builder for updating UniswapV3PoolSwap entities.
type UniswapV3PoolSwapUpdate struct {
	config
	hooks    []Hook
	mutation *UniswapV3PoolSwapMutation
}

// Where appends a list predicates to the UniswapV3PoolSwapUpdate builder.
func (uvsu *UniswapV3PoolSwapUpdate) Where(ps ...predicate.UniswapV3PoolSwap) *UniswapV3PoolSwapUpdate {
	uvsu.mutation.Where(ps...)
	return uvsu
}

// SetSender sets the "sender" field.
func (uvsu *UniswapV3PoolSwapUpdate) SetSender(s string) *UniswapV3PoolSwapUpdate {
	uvsu.mutation.SetSender(s)
	return uvsu
}

// SetRecipient sets the "recipient" field.
func (uvsu *UniswapV3PoolSwapUpdate) SetRecipient(s string) *UniswapV3PoolSwapUpdate {
	uvsu.mutation.SetRecipient(s)
	return uvsu
}

// SetAmount0 sets the "amount0" field.
func (uvsu *UniswapV3PoolSwapUpdate) SetAmount0(s string) *UniswapV3PoolSwapUpdate {
	uvsu.mutation.SetAmount0(s)
	return uvsu
}

// SetAmount1 sets the "amount1" field.
func (uvsu *UniswapV3PoolSwapUpdate) SetAmount1(s string) *UniswapV3PoolSwapUpdate {
	uvsu.mutation.SetAmount1(s)
	return uvsu
}

// SetSqrtPriceX96 sets the "sqrt_price_x96" field.
func (uvsu *UniswapV3PoolSwapUpdate) SetSqrtPriceX96(s string) *UniswapV3PoolSwapUpdate {
	uvsu.mutation.SetSqrtPriceX96(s)
	return uvsu
}

// SetLiquidity sets the "liquidity" field.
func (uvsu *UniswapV3PoolSwapUpdate) SetLiquidity(s string) *UniswapV3PoolSwapUpdate {
	uvsu.mutation.SetLiquidity(s)
	return uvsu
}

// SetTick sets the "tick" field.
func (uvsu *UniswapV3PoolSwapUpdate) SetTick(s string) *UniswapV3PoolSwapUpdate {
	uvsu.mutation.SetTick(s)
	return uvsu
}

// SetEventID sets the "event" edge to the Event entity by ID.
func (uvsu *UniswapV3PoolSwapUpdate) SetEventID(id int) *UniswapV3PoolSwapUpdate {
	uvsu.mutation.SetEventID(id)
	return uvsu
}

// SetEvent sets the "event" edge to the Event entity.
func (uvsu *UniswapV3PoolSwapUpdate) SetEvent(e *Event) *UniswapV3PoolSwapUpdate {
	return uvsu.SetEventID(e.ID)
}

// Mutation returns the UniswapV3PoolSwapMutation object of the builder.
func (uvsu *UniswapV3PoolSwapUpdate) Mutation() *UniswapV3PoolSwapMutation {
	return uvsu.mutation
}

// ClearEvent clears the "event" edge to the Event entity.
func (uvsu *UniswapV3PoolSwapUpdate) ClearEvent() *UniswapV3PoolSwapUpdate {
	uvsu.mutation.ClearEvent()
	return uvsu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uvsu *UniswapV3PoolSwapUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(uvsu.hooks) == 0 {
		if err = uvsu.check(); err != nil {
			return 0, err
		}
		affected, err = uvsu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UniswapV3PoolSwapMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uvsu.check(); err != nil {
				return 0, err
			}
			uvsu.mutation = mutation
			affected, err = uvsu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(uvsu.hooks) - 1; i >= 0; i-- {
			if uvsu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uvsu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uvsu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (uvsu *UniswapV3PoolSwapUpdate) SaveX(ctx context.Context) int {
	affected, err := uvsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uvsu *UniswapV3PoolSwapUpdate) Exec(ctx context.Context) error {
	_, err := uvsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uvsu *UniswapV3PoolSwapUpdate) ExecX(ctx context.Context) {
	if err := uvsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uvsu *UniswapV3PoolSwapUpdate) check() error {
	if _, ok := uvsu.mutation.EventID(); uvsu.mutation.EventCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"event\"")
	}
	return nil
}

func (uvsu *UniswapV3PoolSwapUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   uniswapv3poolswap.Table,
			Columns: uniswapv3poolswap.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: uniswapv3poolswap.FieldID,
			},
		},
	}
	if ps := uvsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uvsu.mutation.Sender(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: uniswapv3poolswap.FieldSender,
		})
	}
	if value, ok := uvsu.mutation.Recipient(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: uniswapv3poolswap.FieldRecipient,
		})
	}
	if value, ok := uvsu.mutation.Amount0(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: uniswapv3poolswap.FieldAmount0,
		})
	}
	if value, ok := uvsu.mutation.Amount1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: uniswapv3poolswap.FieldAmount1,
		})
	}
	if value, ok := uvsu.mutation.SqrtPriceX96(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: uniswapv3poolswap.FieldSqrtPriceX96,
		})
	}
	if value, ok := uvsu.mutation.Liquidity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: uniswapv3poolswap.FieldLiquidity,
		})
	}
	if value, ok := uvsu.mutation.Tick(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: uniswapv3poolswap.FieldTick,
		})
	}
	if uvsu.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   uniswapv3poolswap.EventTable,
			Columns: []string{uniswapv3poolswap.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: event.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uvsu.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   uniswapv3poolswap.EventTable,
			Columns: []string{uniswapv3poolswap.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uvsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{uniswapv3poolswap.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// UniswapV3PoolSwapUpdateOne is the builder for updating a single UniswapV3PoolSwap entity.
type UniswapV3PoolSwapUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UniswapV3PoolSwapMutation
}

// SetSender sets the "sender" field.
func (uvsuo *UniswapV3PoolSwapUpdateOne) SetSender(s string) *UniswapV3PoolSwapUpdateOne {
	uvsuo.mutation.SetSender(s)
	return uvsuo
}

// SetRecipient sets the "recipient" field.
func (uvsuo *UniswapV3PoolSwapUpdateOne) SetRecipient(s string) *UniswapV3PoolSwapUpdateOne {
	uvsuo.mutation.SetRecipient(s)
	return uvsuo
}

// SetAmount0 sets the "amount0" field.
func (uvsuo *UniswapV3PoolSwapUpdateOne) SetAmount0(s string) *UniswapV3PoolSwapUpdateOne {
	uvsuo.mutation.SetAmount0(s)
	return uvsuo
}

// SetAmount1 sets the "amount1" field.
func (uvsuo *UniswapV3PoolSwapUpdateOne) SetAmount1(s string) *UniswapV3PoolSwapUpdateOne {
	uvsuo.mutation.SetAmount1(s)
	return uvsuo
}

// SetSqrtPriceX96 sets the "sqrt_price_x96" field.
func (uvsuo *UniswapV3PoolSwapUpdateOne) SetSqrtPriceX96(s string) *UniswapV3PoolSwapUpdateOne {
	uvsuo.mutation.SetSqrtPriceX96(s)
	return uvsuo
}

// SetLiquidity sets the "liquidity" field.
func (uvsuo *UniswapV3PoolSwapUpdateOne) SetLiquidity(s string) *UniswapV3PoolSwapUpdateOne {
	uvsuo.mutation.SetLiquidity(s)
	return uvsuo
}

// SetTick sets the "tick" field.
func (uvsuo *UniswapV3PoolSwapUpdateOne) SetTick(s string) *UniswapV3PoolSwapUpdateOne {
	uvsuo.mutation.SetTick(s)
	return uvsuo
}

// SetEventID sets the "event" edge to the Event entity by ID.
func (uvsuo *UniswapV3PoolSwapUpdateOne) SetEventID(id int) *UniswapV3PoolSwapUpdateOne {
	uvsuo.mutation.SetEventID(id)
	return uvsuo
}

// SetEvent sets the "event" edge to the Event entity.
func (uvsuo *UniswapV3PoolSwapUpdateOne) SetEvent(e *Event) *UniswapV3PoolSwapUpdateOne {
	return uvsuo.SetEventID(e.ID)
}

// Mutation returns the UniswapV3PoolSwapMutation object of the builder.
func (uvsuo *UniswapV3PoolSwapUpdateOne) Mutation() *UniswapV3PoolSwapMutation {
	return uvsuo.mutation
}

// ClearEvent clears the "event" edge to the Event entity.
func (uvsuo *UniswapV3PoolSwapUpdateOne) ClearEvent() *UniswapV3PoolSwapUpdateOne {
	uvsuo.mutation.ClearEvent()
	return uvsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uvsuo *UniswapV3PoolSwapUpdateOne) Select(field string, fields ...string) *UniswapV3PoolSwapUpdateOne {
	uvsuo.fields = append([]string{field}, fields...)
	return uvsuo
}

// Save executes the query and returns the updated UniswapV3PoolSwap entity.
func (uvsuo *UniswapV3PoolSwapUpdateOne) Save(ctx context.Context) (*UniswapV3PoolSwap, error) {
	var (
		err  error
		node *UniswapV3PoolSwap
	)
	if len(uvsuo.hooks) == 0 {
		if err = uvsuo.check(); err != nil {
			return nil, err
		}
		node, err = uvsuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UniswapV3PoolSwapMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uvsuo.check(); err != nil {
				return nil, err
			}
			uvsuo.mutation = mutation
			node, err = uvsuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uvsuo.hooks) - 1; i >= 0; i-- {
			if uvsuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uvsuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uvsuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uvsuo *UniswapV3PoolSwapUpdateOne) SaveX(ctx context.Context) *UniswapV3PoolSwap {
	node, err := uvsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uvsuo *UniswapV3PoolSwapUpdateOne) Exec(ctx context.Context) error {
	_, err := uvsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uvsuo *UniswapV3PoolSwapUpdateOne) ExecX(ctx context.Context) {
	if err := uvsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uvsuo *UniswapV3PoolSwapUpdateOne) check() error {
	if _, ok := uvsuo.mutation.EventID(); uvsuo.mutation.EventCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"event\"")
	}
	return nil
}

func (uvsuo *UniswapV3PoolSwapUpdateOne) sqlSave(ctx context.Context) (_node *UniswapV3PoolSwap, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   uniswapv3poolswap.Table,
			Columns: uniswapv3poolswap.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: uniswapv3poolswap.FieldID,
			},
		},
	}
	id, ok := uvsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing UniswapV3PoolSwap.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := uvsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, uniswapv3poolswap.FieldID)
		for _, f := range fields {
			if !uniswapv3poolswap.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != uniswapv3poolswap.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uvsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uvsuo.mutation.Sender(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: uniswapv3poolswap.FieldSender,
		})
	}
	if value, ok := uvsuo.mutation.Recipient(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: uniswapv3poolswap.FieldRecipient,
		})
	}
	if value, ok := uvsuo.mutation.Amount0(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: uniswapv3poolswap.FieldAmount0,
		})
	}
	if value, ok := uvsuo.mutation.Amount1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: uniswapv3poolswap.FieldAmount1,
		})
	}
	if value, ok := uvsuo.mutation.SqrtPriceX96(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: uniswapv3poolswap.FieldSqrtPriceX96,
		})
	}
	if value, ok := uvsuo.mutation.Liquidity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: uniswapv3poolswap.FieldLiquidity,
		})
	}
	if value, ok := uvsuo.mutation.Tick(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: uniswapv3poolswap.FieldTick,
		})
	}
	if uvsuo.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   uniswapv3poolswap.EventTable,
			Columns: []string{uniswapv3poolswap.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: event.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uvsuo.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   uniswapv3poolswap.EventTable,
			Columns: []string{uniswapv3poolswap.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UniswapV3PoolSwap{config: uvsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uvsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{uniswapv3poolswap.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
