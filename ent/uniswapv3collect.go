// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/artmisxyz/blockinspector/ent/event"
	"github.com/artmisxyz/blockinspector/ent/schema"
	"github.com/artmisxyz/blockinspector/ent/uniswapv3collect"
)

// UniswapV3Collect is the model entity for the UniswapV3Collect schema.
type UniswapV3Collect struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TokenID holds the value of the "token_id" field.
	TokenID *schema.BigInt `json:"token_id,omitempty"`
	// Recipient holds the value of the "recipient" field.
	Recipient string `json:"recipient,omitempty"`
	// Amount0 holds the value of the "amount0" field.
	Amount0 *schema.BigInt `json:"amount0,omitempty"`
	// Amount1 holds the value of the "amount1" field.
	Amount1 *schema.BigInt `json:"amount1,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UniswapV3CollectQuery when eager-loading is set.
	Edges    UniswapV3CollectEdges `json:"edges"`
	event_id *int
}

// UniswapV3CollectEdges holds the relations/edges for other nodes in the graph.
type UniswapV3CollectEdges struct {
	// Event holds the value of the event edge.
	Event *Event `json:"event,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EventOrErr returns the Event value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UniswapV3CollectEdges) EventOrErr() (*Event, error) {
	if e.loadedTypes[0] {
		if e.Event == nil {
			// The edge event was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: event.Label}
		}
		return e.Event, nil
	}
	return nil, &NotLoadedError{edge: "event"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UniswapV3Collect) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case uniswapv3collect.FieldTokenID, uniswapv3collect.FieldAmount0, uniswapv3collect.FieldAmount1:
			values[i] = new(schema.BigInt)
		case uniswapv3collect.FieldID:
			values[i] = new(sql.NullInt64)
		case uniswapv3collect.FieldRecipient:
			values[i] = new(sql.NullString)
		case uniswapv3collect.ForeignKeys[0]: // event_id
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UniswapV3Collect", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UniswapV3Collect fields.
func (uv *UniswapV3Collect) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case uniswapv3collect.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			uv.ID = int(value.Int64)
		case uniswapv3collect.FieldTokenID:
			if value, ok := values[i].(*schema.BigInt); !ok {
				return fmt.Errorf("unexpected type %T for field token_id", values[i])
			} else if value != nil {
				uv.TokenID = value
			}
		case uniswapv3collect.FieldRecipient:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field recipient", values[i])
			} else if value.Valid {
				uv.Recipient = value.String
			}
		case uniswapv3collect.FieldAmount0:
			if value, ok := values[i].(*schema.BigInt); !ok {
				return fmt.Errorf("unexpected type %T for field amount0", values[i])
			} else if value != nil {
				uv.Amount0 = value
			}
		case uniswapv3collect.FieldAmount1:
			if value, ok := values[i].(*schema.BigInt); !ok {
				return fmt.Errorf("unexpected type %T for field amount1", values[i])
			} else if value != nil {
				uv.Amount1 = value
			}
		case uniswapv3collect.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field event_id", value)
			} else if value.Valid {
				uv.event_id = new(int)
				*uv.event_id = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryEvent queries the "event" edge of the UniswapV3Collect entity.
func (uv *UniswapV3Collect) QueryEvent() *EventQuery {
	return (&UniswapV3CollectClient{config: uv.config}).QueryEvent(uv)
}

// Update returns a builder for updating this UniswapV3Collect.
// Note that you need to call UniswapV3Collect.Unwrap() before calling this method if this UniswapV3Collect
// was returned from a transaction, and the transaction was committed or rolled back.
func (uv *UniswapV3Collect) Update() *UniswapV3CollectUpdateOne {
	return (&UniswapV3CollectClient{config: uv.config}).UpdateOne(uv)
}

// Unwrap unwraps the UniswapV3Collect entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (uv *UniswapV3Collect) Unwrap() *UniswapV3Collect {
	tx, ok := uv.config.driver.(*txDriver)
	if !ok {
		panic("ent: UniswapV3Collect is not a transactional entity")
	}
	uv.config.driver = tx.drv
	return uv
}

// String implements the fmt.Stringer.
func (uv *UniswapV3Collect) String() string {
	var builder strings.Builder
	builder.WriteString("UniswapV3Collect(")
	builder.WriteString(fmt.Sprintf("id=%v", uv.ID))
	builder.WriteString(", token_id=")
	builder.WriteString(fmt.Sprintf("%v", uv.TokenID))
	builder.WriteString(", recipient=")
	builder.WriteString(uv.Recipient)
	builder.WriteString(", amount0=")
	builder.WriteString(fmt.Sprintf("%v", uv.Amount0))
	builder.WriteString(", amount1=")
	builder.WriteString(fmt.Sprintf("%v", uv.Amount1))
	builder.WriteByte(')')
	return builder.String()
}

// UniswapV3Collects is a parsable slice of UniswapV3Collect.
type UniswapV3Collects []*UniswapV3Collect

func (uv UniswapV3Collects) config(cfg config) {
	for _i := range uv {
		uv[_i].config = cfg
	}
}
