// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/artmisxyz/blockinspector/ent/event"
	"github.com/artmisxyz/blockinspector/ent/predicate"
	"github.com/artmisxyz/blockinspector/ent/uniswapv3collect"
	"github.com/artmisxyz/blockinspector/ent/uniswapv3decreaseliqudity"
	"github.com/artmisxyz/blockinspector/ent/uniswapv3increaseliqudity"
	"github.com/artmisxyz/blockinspector/ent/uniswapv3transfer"
)

// EventUpdate is the builder for updating Event entities.
type EventUpdate struct {
	config
	hooks    []Hook
	mutation *EventMutation
}

// Where appends a list predicates to the EventUpdate builder.
func (eu *EventUpdate) Where(ps ...predicate.Event) *EventUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetName sets the "name" field.
func (eu *EventUpdate) SetName(s string) *EventUpdate {
	eu.mutation.SetName(s)
	return eu
}

// SetSignature sets the "signature" field.
func (eu *EventUpdate) SetSignature(s string) *EventUpdate {
	eu.mutation.SetSignature(s)
	return eu
}

// SetAddress sets the "address" field.
func (eu *EventUpdate) SetAddress(s string) *EventUpdate {
	eu.mutation.SetAddress(s)
	return eu
}

// SetBlockNumber sets the "block_number" field.
func (eu *EventUpdate) SetBlockNumber(u uint64) *EventUpdate {
	eu.mutation.ResetBlockNumber()
	eu.mutation.SetBlockNumber(u)
	return eu
}

// AddBlockNumber adds u to the "block_number" field.
func (eu *EventUpdate) AddBlockNumber(u uint64) *EventUpdate {
	eu.mutation.AddBlockNumber(u)
	return eu
}

// SetTxHash sets the "tx_hash" field.
func (eu *EventUpdate) SetTxHash(s string) *EventUpdate {
	eu.mutation.SetTxHash(s)
	return eu
}

// SetTxIndex sets the "tx_index" field.
func (eu *EventUpdate) SetTxIndex(u uint) *EventUpdate {
	eu.mutation.ResetTxIndex()
	eu.mutation.SetTxIndex(u)
	return eu
}

// AddTxIndex adds u to the "tx_index" field.
func (eu *EventUpdate) AddTxIndex(u uint) *EventUpdate {
	eu.mutation.AddTxIndex(u)
	return eu
}

// SetBlockHash sets the "block_hash" field.
func (eu *EventUpdate) SetBlockHash(s string) *EventUpdate {
	eu.mutation.SetBlockHash(s)
	return eu
}

// SetIndex sets the "index" field.
func (eu *EventUpdate) SetIndex(u uint) *EventUpdate {
	eu.mutation.ResetIndex()
	eu.mutation.SetIndex(u)
	return eu
}

// AddIndex adds u to the "index" field.
func (eu *EventUpdate) AddIndex(u uint) *EventUpdate {
	eu.mutation.AddIndex(u)
	return eu
}

// SetHash sets the "hash" field.
func (eu *EventUpdate) SetHash(s string) *EventUpdate {
	eu.mutation.SetHash(s)
	return eu
}

// AddIncreaseLiquidityIDs adds the "increase_liquidity" edge to the UniswapV3IncreaseLiqudity entity by IDs.
func (eu *EventUpdate) AddIncreaseLiquidityIDs(ids ...int) *EventUpdate {
	eu.mutation.AddIncreaseLiquidityIDs(ids...)
	return eu
}

// AddIncreaseLiquidity adds the "increase_liquidity" edges to the UniswapV3IncreaseLiqudity entity.
func (eu *EventUpdate) AddIncreaseLiquidity(u ...*UniswapV3IncreaseLiqudity) *EventUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eu.AddIncreaseLiquidityIDs(ids...)
}

// AddDecreaseLiquidityIDs adds the "decrease_liquidity" edge to the UniswapV3DecreaseLiqudity entity by IDs.
func (eu *EventUpdate) AddDecreaseLiquidityIDs(ids ...int) *EventUpdate {
	eu.mutation.AddDecreaseLiquidityIDs(ids...)
	return eu
}

// AddDecreaseLiquidity adds the "decrease_liquidity" edges to the UniswapV3DecreaseLiqudity entity.
func (eu *EventUpdate) AddDecreaseLiquidity(u ...*UniswapV3DecreaseLiqudity) *EventUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eu.AddDecreaseLiquidityIDs(ids...)
}

// AddCollectIDs adds the "collect" edge to the UniswapV3Collect entity by IDs.
func (eu *EventUpdate) AddCollectIDs(ids ...int) *EventUpdate {
	eu.mutation.AddCollectIDs(ids...)
	return eu
}

// AddCollect adds the "collect" edges to the UniswapV3Collect entity.
func (eu *EventUpdate) AddCollect(u ...*UniswapV3Collect) *EventUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eu.AddCollectIDs(ids...)
}

// AddTransferIDs adds the "transfer" edge to the UniswapV3Transfer entity by IDs.
func (eu *EventUpdate) AddTransferIDs(ids ...int) *EventUpdate {
	eu.mutation.AddTransferIDs(ids...)
	return eu
}

// AddTransfer adds the "transfer" edges to the UniswapV3Transfer entity.
func (eu *EventUpdate) AddTransfer(u ...*UniswapV3Transfer) *EventUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eu.AddTransferIDs(ids...)
}

// Mutation returns the EventMutation object of the builder.
func (eu *EventUpdate) Mutation() *EventMutation {
	return eu.mutation
}

// ClearIncreaseLiquidity clears all "increase_liquidity" edges to the UniswapV3IncreaseLiqudity entity.
func (eu *EventUpdate) ClearIncreaseLiquidity() *EventUpdate {
	eu.mutation.ClearIncreaseLiquidity()
	return eu
}

// RemoveIncreaseLiquidityIDs removes the "increase_liquidity" edge to UniswapV3IncreaseLiqudity entities by IDs.
func (eu *EventUpdate) RemoveIncreaseLiquidityIDs(ids ...int) *EventUpdate {
	eu.mutation.RemoveIncreaseLiquidityIDs(ids...)
	return eu
}

// RemoveIncreaseLiquidity removes "increase_liquidity" edges to UniswapV3IncreaseLiqudity entities.
func (eu *EventUpdate) RemoveIncreaseLiquidity(u ...*UniswapV3IncreaseLiqudity) *EventUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eu.RemoveIncreaseLiquidityIDs(ids...)
}

// ClearDecreaseLiquidity clears all "decrease_liquidity" edges to the UniswapV3DecreaseLiqudity entity.
func (eu *EventUpdate) ClearDecreaseLiquidity() *EventUpdate {
	eu.mutation.ClearDecreaseLiquidity()
	return eu
}

// RemoveDecreaseLiquidityIDs removes the "decrease_liquidity" edge to UniswapV3DecreaseLiqudity entities by IDs.
func (eu *EventUpdate) RemoveDecreaseLiquidityIDs(ids ...int) *EventUpdate {
	eu.mutation.RemoveDecreaseLiquidityIDs(ids...)
	return eu
}

// RemoveDecreaseLiquidity removes "decrease_liquidity" edges to UniswapV3DecreaseLiqudity entities.
func (eu *EventUpdate) RemoveDecreaseLiquidity(u ...*UniswapV3DecreaseLiqudity) *EventUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eu.RemoveDecreaseLiquidityIDs(ids...)
}

// ClearCollect clears all "collect" edges to the UniswapV3Collect entity.
func (eu *EventUpdate) ClearCollect() *EventUpdate {
	eu.mutation.ClearCollect()
	return eu
}

// RemoveCollectIDs removes the "collect" edge to UniswapV3Collect entities by IDs.
func (eu *EventUpdate) RemoveCollectIDs(ids ...int) *EventUpdate {
	eu.mutation.RemoveCollectIDs(ids...)
	return eu
}

// RemoveCollect removes "collect" edges to UniswapV3Collect entities.
func (eu *EventUpdate) RemoveCollect(u ...*UniswapV3Collect) *EventUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eu.RemoveCollectIDs(ids...)
}

// ClearTransfer clears all "transfer" edges to the UniswapV3Transfer entity.
func (eu *EventUpdate) ClearTransfer() *EventUpdate {
	eu.mutation.ClearTransfer()
	return eu
}

// RemoveTransferIDs removes the "transfer" edge to UniswapV3Transfer entities by IDs.
func (eu *EventUpdate) RemoveTransferIDs(ids ...int) *EventUpdate {
	eu.mutation.RemoveTransferIDs(ids...)
	return eu
}

// RemoveTransfer removes "transfer" edges to UniswapV3Transfer entities.
func (eu *EventUpdate) RemoveTransfer(u ...*UniswapV3Transfer) *EventUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eu.RemoveTransferIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EventUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(eu.hooks) == 0 {
		if err = eu.check(); err != nil {
			return 0, err
		}
		affected, err = eu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EventMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = eu.check(); err != nil {
				return 0, err
			}
			eu.mutation = mutation
			affected, err = eu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(eu.hooks) - 1; i >= 0; i-- {
			if eu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = eu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EventUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EventUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EventUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eu *EventUpdate) check() error {
	if v, ok := eu.mutation.Name(); ok {
		if err := event.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := eu.mutation.Signature(); ok {
		if err := event.SignatureValidator(v); err != nil {
			return &ValidationError{Name: "signature", err: fmt.Errorf("ent: validator failed for field \"signature\": %w", err)}
		}
	}
	if v, ok := eu.mutation.Address(); ok {
		if err := event.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf("ent: validator failed for field \"address\": %w", err)}
		}
	}
	if v, ok := eu.mutation.TxHash(); ok {
		if err := event.TxHashValidator(v); err != nil {
			return &ValidationError{Name: "tx_hash", err: fmt.Errorf("ent: validator failed for field \"tx_hash\": %w", err)}
		}
	}
	if v, ok := eu.mutation.BlockHash(); ok {
		if err := event.BlockHashValidator(v); err != nil {
			return &ValidationError{Name: "block_hash", err: fmt.Errorf("ent: validator failed for field \"block_hash\": %w", err)}
		}
	}
	if v, ok := eu.mutation.Hash(); ok {
		if err := event.HashValidator(v); err != nil {
			return &ValidationError{Name: "hash", err: fmt.Errorf("ent: validator failed for field \"hash\": %w", err)}
		}
	}
	return nil
}

func (eu *EventUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   event.Table,
			Columns: event.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: event.FieldID,
			},
		},
	}
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: event.FieldName,
		})
	}
	if value, ok := eu.mutation.Signature(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: event.FieldSignature,
		})
	}
	if value, ok := eu.mutation.Address(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: event.FieldAddress,
		})
	}
	if value, ok := eu.mutation.BlockNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: event.FieldBlockNumber,
		})
	}
	if value, ok := eu.mutation.AddedBlockNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: event.FieldBlockNumber,
		})
	}
	if value, ok := eu.mutation.TxHash(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: event.FieldTxHash,
		})
	}
	if value, ok := eu.mutation.TxIndex(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: event.FieldTxIndex,
		})
	}
	if value, ok := eu.mutation.AddedTxIndex(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: event.FieldTxIndex,
		})
	}
	if value, ok := eu.mutation.BlockHash(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: event.FieldBlockHash,
		})
	}
	if value, ok := eu.mutation.Index(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: event.FieldIndex,
		})
	}
	if value, ok := eu.mutation.AddedIndex(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: event.FieldIndex,
		})
	}
	if value, ok := eu.mutation.Hash(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: event.FieldHash,
		})
	}
	if eu.mutation.IncreaseLiquidityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.IncreaseLiquidityTable,
			Columns: []string{event.IncreaseLiquidityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: uniswapv3increaseliqudity.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedIncreaseLiquidityIDs(); len(nodes) > 0 && !eu.mutation.IncreaseLiquidityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.IncreaseLiquidityTable,
			Columns: []string{event.IncreaseLiquidityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: uniswapv3increaseliqudity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.IncreaseLiquidityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.IncreaseLiquidityTable,
			Columns: []string{event.IncreaseLiquidityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: uniswapv3increaseliqudity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.DecreaseLiquidityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.DecreaseLiquidityTable,
			Columns: []string{event.DecreaseLiquidityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: uniswapv3decreaseliqudity.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedDecreaseLiquidityIDs(); len(nodes) > 0 && !eu.mutation.DecreaseLiquidityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.DecreaseLiquidityTable,
			Columns: []string{event.DecreaseLiquidityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: uniswapv3decreaseliqudity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.DecreaseLiquidityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.DecreaseLiquidityTable,
			Columns: []string{event.DecreaseLiquidityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: uniswapv3decreaseliqudity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.CollectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.CollectTable,
			Columns: []string{event.CollectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: uniswapv3collect.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedCollectIDs(); len(nodes) > 0 && !eu.mutation.CollectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.CollectTable,
			Columns: []string{event.CollectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: uniswapv3collect.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.CollectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.CollectTable,
			Columns: []string{event.CollectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: uniswapv3collect.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.TransferCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.TransferTable,
			Columns: []string{event.TransferColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: uniswapv3transfer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedTransferIDs(); len(nodes) > 0 && !eu.mutation.TransferCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.TransferTable,
			Columns: []string{event.TransferColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: uniswapv3transfer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.TransferIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.TransferTable,
			Columns: []string{event.TransferColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: uniswapv3transfer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{event.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// EventUpdateOne is the builder for updating a single Event entity.
type EventUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EventMutation
}

// SetName sets the "name" field.
func (euo *EventUpdateOne) SetName(s string) *EventUpdateOne {
	euo.mutation.SetName(s)
	return euo
}

// SetSignature sets the "signature" field.
func (euo *EventUpdateOne) SetSignature(s string) *EventUpdateOne {
	euo.mutation.SetSignature(s)
	return euo
}

// SetAddress sets the "address" field.
func (euo *EventUpdateOne) SetAddress(s string) *EventUpdateOne {
	euo.mutation.SetAddress(s)
	return euo
}

// SetBlockNumber sets the "block_number" field.
func (euo *EventUpdateOne) SetBlockNumber(u uint64) *EventUpdateOne {
	euo.mutation.ResetBlockNumber()
	euo.mutation.SetBlockNumber(u)
	return euo
}

// AddBlockNumber adds u to the "block_number" field.
func (euo *EventUpdateOne) AddBlockNumber(u uint64) *EventUpdateOne {
	euo.mutation.AddBlockNumber(u)
	return euo
}

// SetTxHash sets the "tx_hash" field.
func (euo *EventUpdateOne) SetTxHash(s string) *EventUpdateOne {
	euo.mutation.SetTxHash(s)
	return euo
}

// SetTxIndex sets the "tx_index" field.
func (euo *EventUpdateOne) SetTxIndex(u uint) *EventUpdateOne {
	euo.mutation.ResetTxIndex()
	euo.mutation.SetTxIndex(u)
	return euo
}

// AddTxIndex adds u to the "tx_index" field.
func (euo *EventUpdateOne) AddTxIndex(u uint) *EventUpdateOne {
	euo.mutation.AddTxIndex(u)
	return euo
}

// SetBlockHash sets the "block_hash" field.
func (euo *EventUpdateOne) SetBlockHash(s string) *EventUpdateOne {
	euo.mutation.SetBlockHash(s)
	return euo
}

// SetIndex sets the "index" field.
func (euo *EventUpdateOne) SetIndex(u uint) *EventUpdateOne {
	euo.mutation.ResetIndex()
	euo.mutation.SetIndex(u)
	return euo
}

// AddIndex adds u to the "index" field.
func (euo *EventUpdateOne) AddIndex(u uint) *EventUpdateOne {
	euo.mutation.AddIndex(u)
	return euo
}

// SetHash sets the "hash" field.
func (euo *EventUpdateOne) SetHash(s string) *EventUpdateOne {
	euo.mutation.SetHash(s)
	return euo
}

// AddIncreaseLiquidityIDs adds the "increase_liquidity" edge to the UniswapV3IncreaseLiqudity entity by IDs.
func (euo *EventUpdateOne) AddIncreaseLiquidityIDs(ids ...int) *EventUpdateOne {
	euo.mutation.AddIncreaseLiquidityIDs(ids...)
	return euo
}

// AddIncreaseLiquidity adds the "increase_liquidity" edges to the UniswapV3IncreaseLiqudity entity.
func (euo *EventUpdateOne) AddIncreaseLiquidity(u ...*UniswapV3IncreaseLiqudity) *EventUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return euo.AddIncreaseLiquidityIDs(ids...)
}

// AddDecreaseLiquidityIDs adds the "decrease_liquidity" edge to the UniswapV3DecreaseLiqudity entity by IDs.
func (euo *EventUpdateOne) AddDecreaseLiquidityIDs(ids ...int) *EventUpdateOne {
	euo.mutation.AddDecreaseLiquidityIDs(ids...)
	return euo
}

// AddDecreaseLiquidity adds the "decrease_liquidity" edges to the UniswapV3DecreaseLiqudity entity.
func (euo *EventUpdateOne) AddDecreaseLiquidity(u ...*UniswapV3DecreaseLiqudity) *EventUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return euo.AddDecreaseLiquidityIDs(ids...)
}

// AddCollectIDs adds the "collect" edge to the UniswapV3Collect entity by IDs.
func (euo *EventUpdateOne) AddCollectIDs(ids ...int) *EventUpdateOne {
	euo.mutation.AddCollectIDs(ids...)
	return euo
}

// AddCollect adds the "collect" edges to the UniswapV3Collect entity.
func (euo *EventUpdateOne) AddCollect(u ...*UniswapV3Collect) *EventUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return euo.AddCollectIDs(ids...)
}

// AddTransferIDs adds the "transfer" edge to the UniswapV3Transfer entity by IDs.
func (euo *EventUpdateOne) AddTransferIDs(ids ...int) *EventUpdateOne {
	euo.mutation.AddTransferIDs(ids...)
	return euo
}

// AddTransfer adds the "transfer" edges to the UniswapV3Transfer entity.
func (euo *EventUpdateOne) AddTransfer(u ...*UniswapV3Transfer) *EventUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return euo.AddTransferIDs(ids...)
}

// Mutation returns the EventMutation object of the builder.
func (euo *EventUpdateOne) Mutation() *EventMutation {
	return euo.mutation
}

// ClearIncreaseLiquidity clears all "increase_liquidity" edges to the UniswapV3IncreaseLiqudity entity.
func (euo *EventUpdateOne) ClearIncreaseLiquidity() *EventUpdateOne {
	euo.mutation.ClearIncreaseLiquidity()
	return euo
}

// RemoveIncreaseLiquidityIDs removes the "increase_liquidity" edge to UniswapV3IncreaseLiqudity entities by IDs.
func (euo *EventUpdateOne) RemoveIncreaseLiquidityIDs(ids ...int) *EventUpdateOne {
	euo.mutation.RemoveIncreaseLiquidityIDs(ids...)
	return euo
}

// RemoveIncreaseLiquidity removes "increase_liquidity" edges to UniswapV3IncreaseLiqudity entities.
func (euo *EventUpdateOne) RemoveIncreaseLiquidity(u ...*UniswapV3IncreaseLiqudity) *EventUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return euo.RemoveIncreaseLiquidityIDs(ids...)
}

// ClearDecreaseLiquidity clears all "decrease_liquidity" edges to the UniswapV3DecreaseLiqudity entity.
func (euo *EventUpdateOne) ClearDecreaseLiquidity() *EventUpdateOne {
	euo.mutation.ClearDecreaseLiquidity()
	return euo
}

// RemoveDecreaseLiquidityIDs removes the "decrease_liquidity" edge to UniswapV3DecreaseLiqudity entities by IDs.
func (euo *EventUpdateOne) RemoveDecreaseLiquidityIDs(ids ...int) *EventUpdateOne {
	euo.mutation.RemoveDecreaseLiquidityIDs(ids...)
	return euo
}

// RemoveDecreaseLiquidity removes "decrease_liquidity" edges to UniswapV3DecreaseLiqudity entities.
func (euo *EventUpdateOne) RemoveDecreaseLiquidity(u ...*UniswapV3DecreaseLiqudity) *EventUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return euo.RemoveDecreaseLiquidityIDs(ids...)
}

// ClearCollect clears all "collect" edges to the UniswapV3Collect entity.
func (euo *EventUpdateOne) ClearCollect() *EventUpdateOne {
	euo.mutation.ClearCollect()
	return euo
}

// RemoveCollectIDs removes the "collect" edge to UniswapV3Collect entities by IDs.
func (euo *EventUpdateOne) RemoveCollectIDs(ids ...int) *EventUpdateOne {
	euo.mutation.RemoveCollectIDs(ids...)
	return euo
}

// RemoveCollect removes "collect" edges to UniswapV3Collect entities.
func (euo *EventUpdateOne) RemoveCollect(u ...*UniswapV3Collect) *EventUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return euo.RemoveCollectIDs(ids...)
}

// ClearTransfer clears all "transfer" edges to the UniswapV3Transfer entity.
func (euo *EventUpdateOne) ClearTransfer() *EventUpdateOne {
	euo.mutation.ClearTransfer()
	return euo
}

// RemoveTransferIDs removes the "transfer" edge to UniswapV3Transfer entities by IDs.
func (euo *EventUpdateOne) RemoveTransferIDs(ids ...int) *EventUpdateOne {
	euo.mutation.RemoveTransferIDs(ids...)
	return euo
}

// RemoveTransfer removes "transfer" edges to UniswapV3Transfer entities.
func (euo *EventUpdateOne) RemoveTransfer(u ...*UniswapV3Transfer) *EventUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return euo.RemoveTransferIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EventUpdateOne) Select(field string, fields ...string) *EventUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Event entity.
func (euo *EventUpdateOne) Save(ctx context.Context) (*Event, error) {
	var (
		err  error
		node *Event
	)
	if len(euo.hooks) == 0 {
		if err = euo.check(); err != nil {
			return nil, err
		}
		node, err = euo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EventMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = euo.check(); err != nil {
				return nil, err
			}
			euo.mutation = mutation
			node, err = euo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(euo.hooks) - 1; i >= 0; i-- {
			if euo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = euo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, euo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EventUpdateOne) SaveX(ctx context.Context) *Event {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EventUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EventUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euo *EventUpdateOne) check() error {
	if v, ok := euo.mutation.Name(); ok {
		if err := event.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := euo.mutation.Signature(); ok {
		if err := event.SignatureValidator(v); err != nil {
			return &ValidationError{Name: "signature", err: fmt.Errorf("ent: validator failed for field \"signature\": %w", err)}
		}
	}
	if v, ok := euo.mutation.Address(); ok {
		if err := event.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf("ent: validator failed for field \"address\": %w", err)}
		}
	}
	if v, ok := euo.mutation.TxHash(); ok {
		if err := event.TxHashValidator(v); err != nil {
			return &ValidationError{Name: "tx_hash", err: fmt.Errorf("ent: validator failed for field \"tx_hash\": %w", err)}
		}
	}
	if v, ok := euo.mutation.BlockHash(); ok {
		if err := event.BlockHashValidator(v); err != nil {
			return &ValidationError{Name: "block_hash", err: fmt.Errorf("ent: validator failed for field \"block_hash\": %w", err)}
		}
	}
	if v, ok := euo.mutation.Hash(); ok {
		if err := event.HashValidator(v); err != nil {
			return &ValidationError{Name: "hash", err: fmt.Errorf("ent: validator failed for field \"hash\": %w", err)}
		}
	}
	return nil
}

func (euo *EventUpdateOne) sqlSave(ctx context.Context) (_node *Event, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   event.Table,
			Columns: event.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: event.FieldID,
			},
		},
	}
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Event.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, event.FieldID)
		for _, f := range fields {
			if !event.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != event.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: event.FieldName,
		})
	}
	if value, ok := euo.mutation.Signature(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: event.FieldSignature,
		})
	}
	if value, ok := euo.mutation.Address(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: event.FieldAddress,
		})
	}
	if value, ok := euo.mutation.BlockNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: event.FieldBlockNumber,
		})
	}
	if value, ok := euo.mutation.AddedBlockNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: event.FieldBlockNumber,
		})
	}
	if value, ok := euo.mutation.TxHash(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: event.FieldTxHash,
		})
	}
	if value, ok := euo.mutation.TxIndex(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: event.FieldTxIndex,
		})
	}
	if value, ok := euo.mutation.AddedTxIndex(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: event.FieldTxIndex,
		})
	}
	if value, ok := euo.mutation.BlockHash(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: event.FieldBlockHash,
		})
	}
	if value, ok := euo.mutation.Index(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: event.FieldIndex,
		})
	}
	if value, ok := euo.mutation.AddedIndex(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: event.FieldIndex,
		})
	}
	if value, ok := euo.mutation.Hash(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: event.FieldHash,
		})
	}
	if euo.mutation.IncreaseLiquidityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.IncreaseLiquidityTable,
			Columns: []string{event.IncreaseLiquidityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: uniswapv3increaseliqudity.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedIncreaseLiquidityIDs(); len(nodes) > 0 && !euo.mutation.IncreaseLiquidityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.IncreaseLiquidityTable,
			Columns: []string{event.IncreaseLiquidityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: uniswapv3increaseliqudity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.IncreaseLiquidityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.IncreaseLiquidityTable,
			Columns: []string{event.IncreaseLiquidityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: uniswapv3increaseliqudity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.DecreaseLiquidityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.DecreaseLiquidityTable,
			Columns: []string{event.DecreaseLiquidityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: uniswapv3decreaseliqudity.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedDecreaseLiquidityIDs(); len(nodes) > 0 && !euo.mutation.DecreaseLiquidityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.DecreaseLiquidityTable,
			Columns: []string{event.DecreaseLiquidityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: uniswapv3decreaseliqudity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.DecreaseLiquidityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.DecreaseLiquidityTable,
			Columns: []string{event.DecreaseLiquidityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: uniswapv3decreaseliqudity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.CollectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.CollectTable,
			Columns: []string{event.CollectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: uniswapv3collect.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedCollectIDs(); len(nodes) > 0 && !euo.mutation.CollectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.CollectTable,
			Columns: []string{event.CollectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: uniswapv3collect.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.CollectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.CollectTable,
			Columns: []string{event.CollectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: uniswapv3collect.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.TransferCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.TransferTable,
			Columns: []string{event.TransferColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: uniswapv3transfer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedTransferIDs(); len(nodes) > 0 && !euo.mutation.TransferCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.TransferTable,
			Columns: []string{event.TransferColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: uniswapv3transfer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.TransferIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.TransferTable,
			Columns: []string{event.TransferColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: uniswapv3transfer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Event{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{event.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
