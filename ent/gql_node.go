// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/json"
	"fmt"
	"sync"
	"sync/atomic"

	"entgo.io/contrib/entgql"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/schema"
	"github.com/99designs/gqlgen/graphql"
	"github.com/artmisxyz/legolas/ent/event"
	"github.com/artmisxyz/legolas/ent/uniswapv3collect"
	"github.com/artmisxyz/legolas/ent/uniswapv3decreaseliqudity"
	"github.com/artmisxyz/legolas/ent/uniswapv3increaseliqudity"
	"github.com/artmisxyz/legolas/ent/uniswapv3poolburn"
	"github.com/artmisxyz/legolas/ent/uniswapv3poolcreated"
	"github.com/artmisxyz/legolas/ent/uniswapv3poolflash"
	"github.com/artmisxyz/legolas/ent/uniswapv3poolinitialize"
	"github.com/artmisxyz/legolas/ent/uniswapv3poolmint"
	"github.com/artmisxyz/legolas/ent/uniswapv3poolswap"
	"github.com/artmisxyz/legolas/ent/uniswapv3transfer"
	"github.com/hashicorp/go-multierror"
	"golang.org/x/sync/semaphore"
)

// Noder wraps the basic Node method.
type Noder interface {
	Node(context.Context) (*Node, error)
}

// Node in the graph.
type Node struct {
	ID     int      `json:"id,omitempty"`     // node id.
	Type   string   `json:"type,omitempty"`   // node type.
	Fields []*Field `json:"fields,omitempty"` // node fields.
	Edges  []*Edge  `json:"edges,omitempty"`  // node edges.
}

// Field of a node.
type Field struct {
	Type  string `json:"type,omitempty"`  // field type.
	Name  string `json:"name,omitempty"`  // field name (as in struct).
	Value string `json:"value,omitempty"` // stringified value.
}

// Edges between two nodes.
type Edge struct {
	Type string `json:"type,omitempty"` // edge type.
	Name string `json:"name,omitempty"` // edge name.
	IDs  []int  `json:"ids,omitempty"`  // node ids (where this edge point to).
}

func (e *Event) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     e.ID,
		Type:   "Event",
		Fields: make([]*Field, 8),
		Edges:  make([]*Edge, 10),
	}
	var buf []byte
	if buf, err = json.Marshal(e.Name); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(e.Signature); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "signature",
		Value: string(buf),
	}
	if buf, err = json.Marshal(e.Address); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "address",
		Value: string(buf),
	}
	if buf, err = json.Marshal(e.BlockNumber); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "uint64",
		Name:  "block_number",
		Value: string(buf),
	}
	if buf, err = json.Marshal(e.TxHash); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "string",
		Name:  "tx_hash",
		Value: string(buf),
	}
	if buf, err = json.Marshal(e.TxIndex); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "uint",
		Name:  "tx_index",
		Value: string(buf),
	}
	if buf, err = json.Marshal(e.BlockHash); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "string",
		Name:  "block_hash",
		Value: string(buf),
	}
	if buf, err = json.Marshal(e.Index); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "uint",
		Name:  "index",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "UniswapV3IncreaseLiqudity",
		Name: "increase_liquidity",
	}
	err = e.QueryIncreaseLiquidity().
		Select(uniswapv3increaseliqudity.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "UniswapV3DecreaseLiqudity",
		Name: "decrease_liquidity",
	}
	err = e.QueryDecreaseLiquidity().
		Select(uniswapv3decreaseliqudity.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "UniswapV3Collect",
		Name: "collect",
	}
	err = e.QueryCollect().
		Select(uniswapv3collect.FieldID).
		Scan(ctx, &node.Edges[2].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "UniswapV3Transfer",
		Name: "transfer",
	}
	err = e.QueryTransfer().
		Select(uniswapv3transfer.FieldID).
		Scan(ctx, &node.Edges[3].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[4] = &Edge{
		Type: "UniswapV3PoolCreated",
		Name: "pool_created",
	}
	err = e.QueryPoolCreated().
		Select(uniswapv3poolcreated.FieldID).
		Scan(ctx, &node.Edges[4].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[5] = &Edge{
		Type: "UniswapV3PoolInitialize",
		Name: "pool_initialize",
	}
	err = e.QueryPoolInitialize().
		Select(uniswapv3poolinitialize.FieldID).
		Scan(ctx, &node.Edges[5].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[6] = &Edge{
		Type: "UniswapV3PoolSwap",
		Name: "pool_swap",
	}
	err = e.QueryPoolSwap().
		Select(uniswapv3poolswap.FieldID).
		Scan(ctx, &node.Edges[6].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[7] = &Edge{
		Type: "UniswapV3PoolMint",
		Name: "pool_mint",
	}
	err = e.QueryPoolMint().
		Select(uniswapv3poolmint.FieldID).
		Scan(ctx, &node.Edges[7].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[8] = &Edge{
		Type: "UniswapV3PoolBurn",
		Name: "pool_burn",
	}
	err = e.QueryPoolBurn().
		Select(uniswapv3poolburn.FieldID).
		Scan(ctx, &node.Edges[8].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[9] = &Edge{
		Type: "UniswapV3PoolFlash",
		Name: "pool_flash",
	}
	err = e.QueryPoolFlash().
		Select(uniswapv3poolflash.FieldID).
		Scan(ctx, &node.Edges[9].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (uv *UniswapV3Collect) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     uv.ID,
		Type:   "UniswapV3Collect",
		Fields: make([]*Field, 4),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(uv.TokenID); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "token_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(uv.Recipient); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "recipient",
		Value: string(buf),
	}
	if buf, err = json.Marshal(uv.Amount0); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "amount0",
		Value: string(buf),
	}
	if buf, err = json.Marshal(uv.Amount1); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "amount1",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Event",
		Name: "event",
	}
	err = uv.QueryEvent().
		Select(event.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (uvl *UniswapV3DecreaseLiqudity) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     uvl.ID,
		Type:   "UniswapV3DecreaseLiqudity",
		Fields: make([]*Field, 4),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(uvl.TokenID); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "token_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(uvl.Liquidity); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "liquidity",
		Value: string(buf),
	}
	if buf, err = json.Marshal(uvl.Amount0); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "amount0",
		Value: string(buf),
	}
	if buf, err = json.Marshal(uvl.Amount1); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "amount1",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Event",
		Name: "event",
	}
	err = uvl.QueryEvent().
		Select(event.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (uvl *UniswapV3IncreaseLiqudity) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     uvl.ID,
		Type:   "UniswapV3IncreaseLiqudity",
		Fields: make([]*Field, 4),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(uvl.TokenID); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "token_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(uvl.Liquidity); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "liquidity",
		Value: string(buf),
	}
	if buf, err = json.Marshal(uvl.Amount0); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "amount0",
		Value: string(buf),
	}
	if buf, err = json.Marshal(uvl.Amount1); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "amount1",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Event",
		Name: "event",
	}
	err = uvl.QueryEvent().
		Select(event.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (uvb *UniswapV3PoolBurn) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     uvb.ID,
		Type:   "UniswapV3PoolBurn",
		Fields: make([]*Field, 6),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(uvb.Owner); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "owner",
		Value: string(buf),
	}
	if buf, err = json.Marshal(uvb.TickLower); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "tick_lower",
		Value: string(buf),
	}
	if buf, err = json.Marshal(uvb.TickUpper); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "tick_upper",
		Value: string(buf),
	}
	if buf, err = json.Marshal(uvb.Amount); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "amount",
		Value: string(buf),
	}
	if buf, err = json.Marshal(uvb.Amount0); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "string",
		Name:  "amount0",
		Value: string(buf),
	}
	if buf, err = json.Marshal(uvb.Amount1); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "amount1",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Event",
		Name: "event",
	}
	err = uvb.QueryEvent().
		Select(event.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (uvc *UniswapV3PoolCreated) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     uvc.ID,
		Type:   "UniswapV3PoolCreated",
		Fields: make([]*Field, 5),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(uvc.Token0); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "token0",
		Value: string(buf),
	}
	if buf, err = json.Marshal(uvc.Token1); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "token1",
		Value: string(buf),
	}
	if buf, err = json.Marshal(uvc.Fee); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "fee",
		Value: string(buf),
	}
	if buf, err = json.Marshal(uvc.TickSpacing); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "tick_spacing",
		Value: string(buf),
	}
	if buf, err = json.Marshal(uvc.Pool); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "string",
		Name:  "pool",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Event",
		Name: "event",
	}
	err = uvc.QueryEvent().
		Select(event.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (uvf *UniswapV3PoolFlash) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     uvf.ID,
		Type:   "UniswapV3PoolFlash",
		Fields: make([]*Field, 6),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(uvf.Sender); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "sender",
		Value: string(buf),
	}
	if buf, err = json.Marshal(uvf.Recipient); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "recipient",
		Value: string(buf),
	}
	if buf, err = json.Marshal(uvf.Amount0); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "amount0",
		Value: string(buf),
	}
	if buf, err = json.Marshal(uvf.Amount1); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "amount1",
		Value: string(buf),
	}
	if buf, err = json.Marshal(uvf.Paid0); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "string",
		Name:  "paid0",
		Value: string(buf),
	}
	if buf, err = json.Marshal(uvf.Paid1); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "paid1",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Event",
		Name: "event",
	}
	err = uvf.QueryEvent().
		Select(event.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (uvi *UniswapV3PoolInitialize) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     uvi.ID,
		Type:   "UniswapV3PoolInitialize",
		Fields: make([]*Field, 2),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(uvi.SqrtPriceX96); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "sqrt_price_x96",
		Value: string(buf),
	}
	if buf, err = json.Marshal(uvi.Tick); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "tick",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Event",
		Name: "event",
	}
	err = uvi.QueryEvent().
		Select(event.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (uvm *UniswapV3PoolMint) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     uvm.ID,
		Type:   "UniswapV3PoolMint",
		Fields: make([]*Field, 6),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(uvm.Owner); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "owner",
		Value: string(buf),
	}
	if buf, err = json.Marshal(uvm.TickLower); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "tick_lower",
		Value: string(buf),
	}
	if buf, err = json.Marshal(uvm.TickUpper); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "tick_upper",
		Value: string(buf),
	}
	if buf, err = json.Marshal(uvm.Amount); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "amount",
		Value: string(buf),
	}
	if buf, err = json.Marshal(uvm.Amount0); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "string",
		Name:  "amount0",
		Value: string(buf),
	}
	if buf, err = json.Marshal(uvm.Amount1); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "amount1",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Event",
		Name: "event",
	}
	err = uvm.QueryEvent().
		Select(event.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (uvs *UniswapV3PoolSwap) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     uvs.ID,
		Type:   "UniswapV3PoolSwap",
		Fields: make([]*Field, 7),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(uvs.Sender); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "sender",
		Value: string(buf),
	}
	if buf, err = json.Marshal(uvs.Recipient); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "recipient",
		Value: string(buf),
	}
	if buf, err = json.Marshal(uvs.Amount0); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "amount0",
		Value: string(buf),
	}
	if buf, err = json.Marshal(uvs.Amount1); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "amount1",
		Value: string(buf),
	}
	if buf, err = json.Marshal(uvs.SqrtPriceX96); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "string",
		Name:  "sqrt_price_x96",
		Value: string(buf),
	}
	if buf, err = json.Marshal(uvs.Liquidity); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "liquidity",
		Value: string(buf),
	}
	if buf, err = json.Marshal(uvs.Tick); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "string",
		Name:  "tick",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Event",
		Name: "event",
	}
	err = uvs.QueryEvent().
		Select(event.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (uv *UniswapV3Transfer) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     uv.ID,
		Type:   "UniswapV3Transfer",
		Fields: make([]*Field, 3),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(uv.TokenID); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "token_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(uv.From); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "from",
		Value: string(buf),
	}
	if buf, err = json.Marshal(uv.To); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "to",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Event",
		Name: "event",
	}
	err = uv.QueryEvent().
		Select(event.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (c *Client) Node(ctx context.Context, id int) (*Node, error) {
	n, err := c.Noder(ctx, id)
	if err != nil {
		return nil, err
	}
	return n.Node(ctx)
}

var errNodeInvalidID = &NotFoundError{"node"}

// NodeOption allows configuring the Noder execution using functional options.
type NodeOption func(*nodeOptions)

// WithNodeType sets the node Type resolver function (i.e. the table to query).
// If was not provided, the table will be derived from the universal-id
// configuration as described in: https://entgo.io/docs/migrate/#universal-ids.
func WithNodeType(f func(context.Context, int) (string, error)) NodeOption {
	return func(o *nodeOptions) {
		o.nodeType = f
	}
}

// WithFixedNodeType sets the Type of the node to a fixed value.
func WithFixedNodeType(t string) NodeOption {
	return WithNodeType(func(context.Context, int) (string, error) {
		return t, nil
	})
}

type nodeOptions struct {
	nodeType func(context.Context, int) (string, error)
}

func (c *Client) newNodeOpts(opts []NodeOption) *nodeOptions {
	nopts := &nodeOptions{}
	for _, opt := range opts {
		opt(nopts)
	}
	if nopts.nodeType == nil {
		nopts.nodeType = func(ctx context.Context, id int) (string, error) {
			return c.tables.nodeType(ctx, c.driver, id)
		}
	}
	return nopts
}

// Noder returns a Node by its id. If the NodeType was not provided, it will
// be derived from the id value according to the universal-id configuration.
//
//		c.Noder(ctx, id)
//		c.Noder(ctx, id, ent.WithNodeType(pet.Table))
//
func (c *Client) Noder(ctx context.Context, id int, opts ...NodeOption) (_ Noder, err error) {
	defer func() {
		if IsNotFound(err) {
			err = multierror.Append(err, entgql.ErrNodeNotFound(id))
		}
	}()
	table, err := c.newNodeOpts(opts).nodeType(ctx, id)
	if err != nil {
		return nil, err
	}
	return c.noder(ctx, table, id)
}

func (c *Client) noder(ctx context.Context, table string, id int) (Noder, error) {
	switch table {
	case event.Table:
		n, err := c.Event.Query().
			Where(event.ID(id)).
			CollectFields(ctx, "Event").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case uniswapv3collect.Table:
		n, err := c.UniswapV3Collect.Query().
			Where(uniswapv3collect.ID(id)).
			CollectFields(ctx, "UniswapV3Collect").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case uniswapv3decreaseliqudity.Table:
		n, err := c.UniswapV3DecreaseLiqudity.Query().
			Where(uniswapv3decreaseliqudity.ID(id)).
			CollectFields(ctx, "UniswapV3DecreaseLiqudity").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case uniswapv3increaseliqudity.Table:
		n, err := c.UniswapV3IncreaseLiqudity.Query().
			Where(uniswapv3increaseliqudity.ID(id)).
			CollectFields(ctx, "UniswapV3IncreaseLiqudity").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case uniswapv3poolburn.Table:
		n, err := c.UniswapV3PoolBurn.Query().
			Where(uniswapv3poolburn.ID(id)).
			CollectFields(ctx, "UniswapV3PoolBurn").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case uniswapv3poolcreated.Table:
		n, err := c.UniswapV3PoolCreated.Query().
			Where(uniswapv3poolcreated.ID(id)).
			CollectFields(ctx, "UniswapV3PoolCreated").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case uniswapv3poolflash.Table:
		n, err := c.UniswapV3PoolFlash.Query().
			Where(uniswapv3poolflash.ID(id)).
			CollectFields(ctx, "UniswapV3PoolFlash").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case uniswapv3poolinitialize.Table:
		n, err := c.UniswapV3PoolInitialize.Query().
			Where(uniswapv3poolinitialize.ID(id)).
			CollectFields(ctx, "UniswapV3PoolInitialize").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case uniswapv3poolmint.Table:
		n, err := c.UniswapV3PoolMint.Query().
			Where(uniswapv3poolmint.ID(id)).
			CollectFields(ctx, "UniswapV3PoolMint").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case uniswapv3poolswap.Table:
		n, err := c.UniswapV3PoolSwap.Query().
			Where(uniswapv3poolswap.ID(id)).
			CollectFields(ctx, "UniswapV3PoolSwap").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case uniswapv3transfer.Table:
		n, err := c.UniswapV3Transfer.Query().
			Where(uniswapv3transfer.ID(id)).
			CollectFields(ctx, "UniswapV3Transfer").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	default:
		return nil, fmt.Errorf("cannot resolve noder from table %q: %w", table, errNodeInvalidID)
	}
}

func (c *Client) Noders(ctx context.Context, ids []int, opts ...NodeOption) ([]Noder, error) {
	switch len(ids) {
	case 1:
		noder, err := c.Noder(ctx, ids[0], opts...)
		if err != nil {
			return nil, err
		}
		return []Noder{noder}, nil
	case 0:
		return []Noder{}, nil
	}

	noders := make([]Noder, len(ids))
	errors := make([]error, len(ids))
	tables := make(map[string][]int)
	id2idx := make(map[int][]int, len(ids))
	nopts := c.newNodeOpts(opts)
	for i, id := range ids {
		table, err := nopts.nodeType(ctx, id)
		if err != nil {
			errors[i] = err
			continue
		}
		tables[table] = append(tables[table], id)
		id2idx[id] = append(id2idx[id], i)
	}

	for table, ids := range tables {
		nodes, err := c.noders(ctx, table, ids)
		if err != nil {
			for _, id := range ids {
				for _, idx := range id2idx[id] {
					errors[idx] = err
				}
			}
		} else {
			for i, id := range ids {
				for _, idx := range id2idx[id] {
					noders[idx] = nodes[i]
				}
			}
		}
	}

	for i, id := range ids {
		if errors[i] == nil {
			if noders[i] != nil {
				continue
			}
			errors[i] = entgql.ErrNodeNotFound(id)
		} else if IsNotFound(errors[i]) {
			errors[i] = multierror.Append(errors[i], entgql.ErrNodeNotFound(id))
		}
		ctx := graphql.WithPathContext(ctx,
			graphql.NewPathWithIndex(i),
		)
		graphql.AddError(ctx, errors[i])
	}
	return noders, nil
}

func (c *Client) noders(ctx context.Context, table string, ids []int) ([]Noder, error) {
	noders := make([]Noder, len(ids))
	idmap := make(map[int][]*Noder, len(ids))
	for i, id := range ids {
		idmap[id] = append(idmap[id], &noders[i])
	}
	switch table {
	case event.Table:
		nodes, err := c.Event.Query().
			Where(event.IDIn(ids...)).
			CollectFields(ctx, "Event").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case uniswapv3collect.Table:
		nodes, err := c.UniswapV3Collect.Query().
			Where(uniswapv3collect.IDIn(ids...)).
			CollectFields(ctx, "UniswapV3Collect").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case uniswapv3decreaseliqudity.Table:
		nodes, err := c.UniswapV3DecreaseLiqudity.Query().
			Where(uniswapv3decreaseliqudity.IDIn(ids...)).
			CollectFields(ctx, "UniswapV3DecreaseLiqudity").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case uniswapv3increaseliqudity.Table:
		nodes, err := c.UniswapV3IncreaseLiqudity.Query().
			Where(uniswapv3increaseliqudity.IDIn(ids...)).
			CollectFields(ctx, "UniswapV3IncreaseLiqudity").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case uniswapv3poolburn.Table:
		nodes, err := c.UniswapV3PoolBurn.Query().
			Where(uniswapv3poolburn.IDIn(ids...)).
			CollectFields(ctx, "UniswapV3PoolBurn").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case uniswapv3poolcreated.Table:
		nodes, err := c.UniswapV3PoolCreated.Query().
			Where(uniswapv3poolcreated.IDIn(ids...)).
			CollectFields(ctx, "UniswapV3PoolCreated").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case uniswapv3poolflash.Table:
		nodes, err := c.UniswapV3PoolFlash.Query().
			Where(uniswapv3poolflash.IDIn(ids...)).
			CollectFields(ctx, "UniswapV3PoolFlash").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case uniswapv3poolinitialize.Table:
		nodes, err := c.UniswapV3PoolInitialize.Query().
			Where(uniswapv3poolinitialize.IDIn(ids...)).
			CollectFields(ctx, "UniswapV3PoolInitialize").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case uniswapv3poolmint.Table:
		nodes, err := c.UniswapV3PoolMint.Query().
			Where(uniswapv3poolmint.IDIn(ids...)).
			CollectFields(ctx, "UniswapV3PoolMint").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case uniswapv3poolswap.Table:
		nodes, err := c.UniswapV3PoolSwap.Query().
			Where(uniswapv3poolswap.IDIn(ids...)).
			CollectFields(ctx, "UniswapV3PoolSwap").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case uniswapv3transfer.Table:
		nodes, err := c.UniswapV3Transfer.Query().
			Where(uniswapv3transfer.IDIn(ids...)).
			CollectFields(ctx, "UniswapV3Transfer").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	default:
		return nil, fmt.Errorf("cannot resolve noders from table %q: %w", table, errNodeInvalidID)
	}
	return noders, nil
}

type tables struct {
	once  sync.Once
	sem   *semaphore.Weighted
	value atomic.Value
}

func (t *tables) nodeType(ctx context.Context, drv dialect.Driver, id int) (string, error) {
	tables, err := t.Load(ctx, drv)
	if err != nil {
		return "", err
	}
	idx := int(id / (1<<32 - 1))
	if idx < 0 || idx >= len(tables) {
		return "", fmt.Errorf("cannot resolve table from id %v: %w", id, errNodeInvalidID)
	}
	return tables[idx], nil
}

func (t *tables) Load(ctx context.Context, drv dialect.Driver) ([]string, error) {
	if tables := t.value.Load(); tables != nil {
		return tables.([]string), nil
	}
	t.once.Do(func() { t.sem = semaphore.NewWeighted(1) })
	if err := t.sem.Acquire(ctx, 1); err != nil {
		return nil, err
	}
	defer t.sem.Release(1)
	if tables := t.value.Load(); tables != nil {
		return tables.([]string), nil
	}
	tables, err := t.load(ctx, drv)
	if err == nil {
		t.value.Store(tables)
	}
	return tables, err
}

func (*tables) load(ctx context.Context, drv dialect.Driver) ([]string, error) {
	rows := &sql.Rows{}
	query, args := sql.Dialect(drv.Dialect()).
		Select("type").
		From(sql.Table(schema.TypeTable)).
		OrderBy(sql.Asc("id")).
		Query()
	if err := drv.Query(ctx, query, args, rows); err != nil {
		return nil, err
	}
	defer rows.Close()
	var tables []string
	return tables, sql.ScanSlice(rows, &tables)
}
