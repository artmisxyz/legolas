// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/artmisxyz/blockinspector/ent/migrate"

	"github.com/artmisxyz/blockinspector/ent/event"
	"github.com/artmisxyz/blockinspector/ent/position"
	"github.com/artmisxyz/blockinspector/ent/uniswapv3collect"
	"github.com/artmisxyz/blockinspector/ent/uniswapv3decreaseliqudity"
	"github.com/artmisxyz/blockinspector/ent/uniswapv3increaseliqudity"
	"github.com/artmisxyz/blockinspector/ent/uniswapv3poolburn"
	"github.com/artmisxyz/blockinspector/ent/uniswapv3poolcreated"
	"github.com/artmisxyz/blockinspector/ent/uniswapv3poolflash"
	"github.com/artmisxyz/blockinspector/ent/uniswapv3poolinitialize"
	"github.com/artmisxyz/blockinspector/ent/uniswapv3poolmint"
	"github.com/artmisxyz/blockinspector/ent/uniswapv3poolswap"
	"github.com/artmisxyz/blockinspector/ent/uniswapv3transfer"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Event is the client for interacting with the Event builders.
	Event *EventClient
	// Position is the client for interacting with the Position builders.
	Position *PositionClient
	// UniswapV3Collect is the client for interacting with the UniswapV3Collect builders.
	UniswapV3Collect *UniswapV3CollectClient
	// UniswapV3DecreaseLiqudity is the client for interacting with the UniswapV3DecreaseLiqudity builders.
	UniswapV3DecreaseLiqudity *UniswapV3DecreaseLiqudityClient
	// UniswapV3IncreaseLiqudity is the client for interacting with the UniswapV3IncreaseLiqudity builders.
	UniswapV3IncreaseLiqudity *UniswapV3IncreaseLiqudityClient
	// UniswapV3PoolBurn is the client for interacting with the UniswapV3PoolBurn builders.
	UniswapV3PoolBurn *UniswapV3PoolBurnClient
	// UniswapV3PoolCreated is the client for interacting with the UniswapV3PoolCreated builders.
	UniswapV3PoolCreated *UniswapV3PoolCreatedClient
	// UniswapV3PoolFlash is the client for interacting with the UniswapV3PoolFlash builders.
	UniswapV3PoolFlash *UniswapV3PoolFlashClient
	// UniswapV3PoolInitialize is the client for interacting with the UniswapV3PoolInitialize builders.
	UniswapV3PoolInitialize *UniswapV3PoolInitializeClient
	// UniswapV3PoolMint is the client for interacting with the UniswapV3PoolMint builders.
	UniswapV3PoolMint *UniswapV3PoolMintClient
	// UniswapV3PoolSwap is the client for interacting with the UniswapV3PoolSwap builders.
	UniswapV3PoolSwap *UniswapV3PoolSwapClient
	// UniswapV3Transfer is the client for interacting with the UniswapV3Transfer builders.
	UniswapV3Transfer *UniswapV3TransferClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Event = NewEventClient(c.config)
	c.Position = NewPositionClient(c.config)
	c.UniswapV3Collect = NewUniswapV3CollectClient(c.config)
	c.UniswapV3DecreaseLiqudity = NewUniswapV3DecreaseLiqudityClient(c.config)
	c.UniswapV3IncreaseLiqudity = NewUniswapV3IncreaseLiqudityClient(c.config)
	c.UniswapV3PoolBurn = NewUniswapV3PoolBurnClient(c.config)
	c.UniswapV3PoolCreated = NewUniswapV3PoolCreatedClient(c.config)
	c.UniswapV3PoolFlash = NewUniswapV3PoolFlashClient(c.config)
	c.UniswapV3PoolInitialize = NewUniswapV3PoolInitializeClient(c.config)
	c.UniswapV3PoolMint = NewUniswapV3PoolMintClient(c.config)
	c.UniswapV3PoolSwap = NewUniswapV3PoolSwapClient(c.config)
	c.UniswapV3Transfer = NewUniswapV3TransferClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                       ctx,
		config:                    cfg,
		Event:                     NewEventClient(cfg),
		Position:                  NewPositionClient(cfg),
		UniswapV3Collect:          NewUniswapV3CollectClient(cfg),
		UniswapV3DecreaseLiqudity: NewUniswapV3DecreaseLiqudityClient(cfg),
		UniswapV3IncreaseLiqudity: NewUniswapV3IncreaseLiqudityClient(cfg),
		UniswapV3PoolBurn:         NewUniswapV3PoolBurnClient(cfg),
		UniswapV3PoolCreated:      NewUniswapV3PoolCreatedClient(cfg),
		UniswapV3PoolFlash:        NewUniswapV3PoolFlashClient(cfg),
		UniswapV3PoolInitialize:   NewUniswapV3PoolInitializeClient(cfg),
		UniswapV3PoolMint:         NewUniswapV3PoolMintClient(cfg),
		UniswapV3PoolSwap:         NewUniswapV3PoolSwapClient(cfg),
		UniswapV3Transfer:         NewUniswapV3TransferClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:                    cfg,
		Event:                     NewEventClient(cfg),
		Position:                  NewPositionClient(cfg),
		UniswapV3Collect:          NewUniswapV3CollectClient(cfg),
		UniswapV3DecreaseLiqudity: NewUniswapV3DecreaseLiqudityClient(cfg),
		UniswapV3IncreaseLiqudity: NewUniswapV3IncreaseLiqudityClient(cfg),
		UniswapV3PoolBurn:         NewUniswapV3PoolBurnClient(cfg),
		UniswapV3PoolCreated:      NewUniswapV3PoolCreatedClient(cfg),
		UniswapV3PoolFlash:        NewUniswapV3PoolFlashClient(cfg),
		UniswapV3PoolInitialize:   NewUniswapV3PoolInitializeClient(cfg),
		UniswapV3PoolMint:         NewUniswapV3PoolMintClient(cfg),
		UniswapV3PoolSwap:         NewUniswapV3PoolSwapClient(cfg),
		UniswapV3Transfer:         NewUniswapV3TransferClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Event.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Event.Use(hooks...)
	c.Position.Use(hooks...)
	c.UniswapV3Collect.Use(hooks...)
	c.UniswapV3DecreaseLiqudity.Use(hooks...)
	c.UniswapV3IncreaseLiqudity.Use(hooks...)
	c.UniswapV3PoolBurn.Use(hooks...)
	c.UniswapV3PoolCreated.Use(hooks...)
	c.UniswapV3PoolFlash.Use(hooks...)
	c.UniswapV3PoolInitialize.Use(hooks...)
	c.UniswapV3PoolMint.Use(hooks...)
	c.UniswapV3PoolSwap.Use(hooks...)
	c.UniswapV3Transfer.Use(hooks...)
}

// EventClient is a client for the Event schema.
type EventClient struct {
	config
}

// NewEventClient returns a client for the Event from the given config.
func NewEventClient(c config) *EventClient {
	return &EventClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `event.Hooks(f(g(h())))`.
func (c *EventClient) Use(hooks ...Hook) {
	c.hooks.Event = append(c.hooks.Event, hooks...)
}

// Create returns a create builder for Event.
func (c *EventClient) Create() *EventCreate {
	mutation := newEventMutation(c.config, OpCreate)
	return &EventCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Event entities.
func (c *EventClient) CreateBulk(builders ...*EventCreate) *EventCreateBulk {
	return &EventCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Event.
func (c *EventClient) Update() *EventUpdate {
	mutation := newEventMutation(c.config, OpUpdate)
	return &EventUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EventClient) UpdateOne(e *Event) *EventUpdateOne {
	mutation := newEventMutation(c.config, OpUpdateOne, withEvent(e))
	return &EventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EventClient) UpdateOneID(id int) *EventUpdateOne {
	mutation := newEventMutation(c.config, OpUpdateOne, withEventID(id))
	return &EventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Event.
func (c *EventClient) Delete() *EventDelete {
	mutation := newEventMutation(c.config, OpDelete)
	return &EventDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *EventClient) DeleteOne(e *Event) *EventDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *EventClient) DeleteOneID(id int) *EventDeleteOne {
	builder := c.Delete().Where(event.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EventDeleteOne{builder}
}

// Query returns a query builder for Event.
func (c *EventClient) Query() *EventQuery {
	return &EventQuery{
		config: c.config,
	}
}

// Get returns a Event entity by its id.
func (c *EventClient) Get(ctx context.Context, id int) (*Event, error) {
	return c.Query().Where(event.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EventClient) GetX(ctx context.Context, id int) *Event {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryIncreaseLiquidity queries the increase_liquidity edge of a Event.
func (c *EventClient) QueryIncreaseLiquidity(e *Event) *UniswapV3IncreaseLiqudityQuery {
	query := &UniswapV3IncreaseLiqudityQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, id),
			sqlgraph.To(uniswapv3increaseliqudity.Table, uniswapv3increaseliqudity.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, event.IncreaseLiquidityTable, event.IncreaseLiquidityColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDecreaseLiquidity queries the decrease_liquidity edge of a Event.
func (c *EventClient) QueryDecreaseLiquidity(e *Event) *UniswapV3DecreaseLiqudityQuery {
	query := &UniswapV3DecreaseLiqudityQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, id),
			sqlgraph.To(uniswapv3decreaseliqudity.Table, uniswapv3decreaseliqudity.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, event.DecreaseLiquidityTable, event.DecreaseLiquidityColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCollect queries the collect edge of a Event.
func (c *EventClient) QueryCollect(e *Event) *UniswapV3CollectQuery {
	query := &UniswapV3CollectQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, id),
			sqlgraph.To(uniswapv3collect.Table, uniswapv3collect.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, event.CollectTable, event.CollectColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTransfer queries the transfer edge of a Event.
func (c *EventClient) QueryTransfer(e *Event) *UniswapV3TransferQuery {
	query := &UniswapV3TransferQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, id),
			sqlgraph.To(uniswapv3transfer.Table, uniswapv3transfer.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, event.TransferTable, event.TransferColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPoolCreated queries the pool_created edge of a Event.
func (c *EventClient) QueryPoolCreated(e *Event) *UniswapV3PoolCreatedQuery {
	query := &UniswapV3PoolCreatedQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, id),
			sqlgraph.To(uniswapv3poolcreated.Table, uniswapv3poolcreated.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, event.PoolCreatedTable, event.PoolCreatedColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPoolInitialize queries the pool_initialize edge of a Event.
func (c *EventClient) QueryPoolInitialize(e *Event) *UniswapV3PoolInitializeQuery {
	query := &UniswapV3PoolInitializeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, id),
			sqlgraph.To(uniswapv3poolinitialize.Table, uniswapv3poolinitialize.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, event.PoolInitializeTable, event.PoolInitializeColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPoolSwap queries the pool_swap edge of a Event.
func (c *EventClient) QueryPoolSwap(e *Event) *UniswapV3PoolSwapQuery {
	query := &UniswapV3PoolSwapQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, id),
			sqlgraph.To(uniswapv3poolswap.Table, uniswapv3poolswap.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, event.PoolSwapTable, event.PoolSwapColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPoolMint queries the pool_mint edge of a Event.
func (c *EventClient) QueryPoolMint(e *Event) *UniswapV3PoolMintQuery {
	query := &UniswapV3PoolMintQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, id),
			sqlgraph.To(uniswapv3poolmint.Table, uniswapv3poolmint.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, event.PoolMintTable, event.PoolMintColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPoolBurn queries the pool_burn edge of a Event.
func (c *EventClient) QueryPoolBurn(e *Event) *UniswapV3PoolBurnQuery {
	query := &UniswapV3PoolBurnQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, id),
			sqlgraph.To(uniswapv3poolburn.Table, uniswapv3poolburn.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, event.PoolBurnTable, event.PoolBurnColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPoolFlash queries the pool_flash edge of a Event.
func (c *EventClient) QueryPoolFlash(e *Event) *UniswapV3PoolFlashQuery {
	query := &UniswapV3PoolFlashQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, id),
			sqlgraph.To(uniswapv3poolflash.Table, uniswapv3poolflash.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, event.PoolFlashTable, event.PoolFlashColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EventClient) Hooks() []Hook {
	return c.hooks.Event
}

// PositionClient is a client for the Position schema.
type PositionClient struct {
	config
}

// NewPositionClient returns a client for the Position from the given config.
func NewPositionClient(c config) *PositionClient {
	return &PositionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `position.Hooks(f(g(h())))`.
func (c *PositionClient) Use(hooks ...Hook) {
	c.hooks.Position = append(c.hooks.Position, hooks...)
}

// Create returns a create builder for Position.
func (c *PositionClient) Create() *PositionCreate {
	mutation := newPositionMutation(c.config, OpCreate)
	return &PositionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Position entities.
func (c *PositionClient) CreateBulk(builders ...*PositionCreate) *PositionCreateBulk {
	return &PositionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Position.
func (c *PositionClient) Update() *PositionUpdate {
	mutation := newPositionMutation(c.config, OpUpdate)
	return &PositionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PositionClient) UpdateOne(po *Position) *PositionUpdateOne {
	mutation := newPositionMutation(c.config, OpUpdateOne, withPosition(po))
	return &PositionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PositionClient) UpdateOneID(id int) *PositionUpdateOne {
	mutation := newPositionMutation(c.config, OpUpdateOne, withPositionID(id))
	return &PositionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Position.
func (c *PositionClient) Delete() *PositionDelete {
	mutation := newPositionMutation(c.config, OpDelete)
	return &PositionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PositionClient) DeleteOne(po *Position) *PositionDeleteOne {
	return c.DeleteOneID(po.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PositionClient) DeleteOneID(id int) *PositionDeleteOne {
	builder := c.Delete().Where(position.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PositionDeleteOne{builder}
}

// Query returns a query builder for Position.
func (c *PositionClient) Query() *PositionQuery {
	return &PositionQuery{
		config: c.config,
	}
}

// Get returns a Position entity by its id.
func (c *PositionClient) Get(ctx context.Context, id int) (*Position, error) {
	return c.Query().Where(position.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PositionClient) GetX(ctx context.Context, id int) *Position {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PositionClient) Hooks() []Hook {
	return c.hooks.Position
}

// UniswapV3CollectClient is a client for the UniswapV3Collect schema.
type UniswapV3CollectClient struct {
	config
}

// NewUniswapV3CollectClient returns a client for the UniswapV3Collect from the given config.
func NewUniswapV3CollectClient(c config) *UniswapV3CollectClient {
	return &UniswapV3CollectClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `uniswapv3collect.Hooks(f(g(h())))`.
func (c *UniswapV3CollectClient) Use(hooks ...Hook) {
	c.hooks.UniswapV3Collect = append(c.hooks.UniswapV3Collect, hooks...)
}

// Create returns a create builder for UniswapV3Collect.
func (c *UniswapV3CollectClient) Create() *UniswapV3CollectCreate {
	mutation := newUniswapV3CollectMutation(c.config, OpCreate)
	return &UniswapV3CollectCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UniswapV3Collect entities.
func (c *UniswapV3CollectClient) CreateBulk(builders ...*UniswapV3CollectCreate) *UniswapV3CollectCreateBulk {
	return &UniswapV3CollectCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UniswapV3Collect.
func (c *UniswapV3CollectClient) Update() *UniswapV3CollectUpdate {
	mutation := newUniswapV3CollectMutation(c.config, OpUpdate)
	return &UniswapV3CollectUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UniswapV3CollectClient) UpdateOne(uv *UniswapV3Collect) *UniswapV3CollectUpdateOne {
	mutation := newUniswapV3CollectMutation(c.config, OpUpdateOne, withUniswapV3Collect(uv))
	return &UniswapV3CollectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UniswapV3CollectClient) UpdateOneID(id int) *UniswapV3CollectUpdateOne {
	mutation := newUniswapV3CollectMutation(c.config, OpUpdateOne, withUniswapV3CollectID(id))
	return &UniswapV3CollectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UniswapV3Collect.
func (c *UniswapV3CollectClient) Delete() *UniswapV3CollectDelete {
	mutation := newUniswapV3CollectMutation(c.config, OpDelete)
	return &UniswapV3CollectDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UniswapV3CollectClient) DeleteOne(uv *UniswapV3Collect) *UniswapV3CollectDeleteOne {
	return c.DeleteOneID(uv.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UniswapV3CollectClient) DeleteOneID(id int) *UniswapV3CollectDeleteOne {
	builder := c.Delete().Where(uniswapv3collect.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UniswapV3CollectDeleteOne{builder}
}

// Query returns a query builder for UniswapV3Collect.
func (c *UniswapV3CollectClient) Query() *UniswapV3CollectQuery {
	return &UniswapV3CollectQuery{
		config: c.config,
	}
}

// Get returns a UniswapV3Collect entity by its id.
func (c *UniswapV3CollectClient) Get(ctx context.Context, id int) (*UniswapV3Collect, error) {
	return c.Query().Where(uniswapv3collect.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UniswapV3CollectClient) GetX(ctx context.Context, id int) *UniswapV3Collect {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEvent queries the event edge of a UniswapV3Collect.
func (c *UniswapV3CollectClient) QueryEvent(uv *UniswapV3Collect) *EventQuery {
	query := &EventQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := uv.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(uniswapv3collect.Table, uniswapv3collect.FieldID, id),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, uniswapv3collect.EventTable, uniswapv3collect.EventColumn),
		)
		fromV = sqlgraph.Neighbors(uv.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UniswapV3CollectClient) Hooks() []Hook {
	return c.hooks.UniswapV3Collect
}

// UniswapV3DecreaseLiqudityClient is a client for the UniswapV3DecreaseLiqudity schema.
type UniswapV3DecreaseLiqudityClient struct {
	config
}

// NewUniswapV3DecreaseLiqudityClient returns a client for the UniswapV3DecreaseLiqudity from the given config.
func NewUniswapV3DecreaseLiqudityClient(c config) *UniswapV3DecreaseLiqudityClient {
	return &UniswapV3DecreaseLiqudityClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `uniswapv3decreaseliqudity.Hooks(f(g(h())))`.
func (c *UniswapV3DecreaseLiqudityClient) Use(hooks ...Hook) {
	c.hooks.UniswapV3DecreaseLiqudity = append(c.hooks.UniswapV3DecreaseLiqudity, hooks...)
}

// Create returns a create builder for UniswapV3DecreaseLiqudity.
func (c *UniswapV3DecreaseLiqudityClient) Create() *UniswapV3DecreaseLiqudityCreate {
	mutation := newUniswapV3DecreaseLiqudityMutation(c.config, OpCreate)
	return &UniswapV3DecreaseLiqudityCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UniswapV3DecreaseLiqudity entities.
func (c *UniswapV3DecreaseLiqudityClient) CreateBulk(builders ...*UniswapV3DecreaseLiqudityCreate) *UniswapV3DecreaseLiqudityCreateBulk {
	return &UniswapV3DecreaseLiqudityCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UniswapV3DecreaseLiqudity.
func (c *UniswapV3DecreaseLiqudityClient) Update() *UniswapV3DecreaseLiqudityUpdate {
	mutation := newUniswapV3DecreaseLiqudityMutation(c.config, OpUpdate)
	return &UniswapV3DecreaseLiqudityUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UniswapV3DecreaseLiqudityClient) UpdateOne(uvl *UniswapV3DecreaseLiqudity) *UniswapV3DecreaseLiqudityUpdateOne {
	mutation := newUniswapV3DecreaseLiqudityMutation(c.config, OpUpdateOne, withUniswapV3DecreaseLiqudity(uvl))
	return &UniswapV3DecreaseLiqudityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UniswapV3DecreaseLiqudityClient) UpdateOneID(id int) *UniswapV3DecreaseLiqudityUpdateOne {
	mutation := newUniswapV3DecreaseLiqudityMutation(c.config, OpUpdateOne, withUniswapV3DecreaseLiqudityID(id))
	return &UniswapV3DecreaseLiqudityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UniswapV3DecreaseLiqudity.
func (c *UniswapV3DecreaseLiqudityClient) Delete() *UniswapV3DecreaseLiqudityDelete {
	mutation := newUniswapV3DecreaseLiqudityMutation(c.config, OpDelete)
	return &UniswapV3DecreaseLiqudityDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UniswapV3DecreaseLiqudityClient) DeleteOne(uvl *UniswapV3DecreaseLiqudity) *UniswapV3DecreaseLiqudityDeleteOne {
	return c.DeleteOneID(uvl.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UniswapV3DecreaseLiqudityClient) DeleteOneID(id int) *UniswapV3DecreaseLiqudityDeleteOne {
	builder := c.Delete().Where(uniswapv3decreaseliqudity.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UniswapV3DecreaseLiqudityDeleteOne{builder}
}

// Query returns a query builder for UniswapV3DecreaseLiqudity.
func (c *UniswapV3DecreaseLiqudityClient) Query() *UniswapV3DecreaseLiqudityQuery {
	return &UniswapV3DecreaseLiqudityQuery{
		config: c.config,
	}
}

// Get returns a UniswapV3DecreaseLiqudity entity by its id.
func (c *UniswapV3DecreaseLiqudityClient) Get(ctx context.Context, id int) (*UniswapV3DecreaseLiqudity, error) {
	return c.Query().Where(uniswapv3decreaseliqudity.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UniswapV3DecreaseLiqudityClient) GetX(ctx context.Context, id int) *UniswapV3DecreaseLiqudity {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEvent queries the event edge of a UniswapV3DecreaseLiqudity.
func (c *UniswapV3DecreaseLiqudityClient) QueryEvent(uvl *UniswapV3DecreaseLiqudity) *EventQuery {
	query := &EventQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := uvl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(uniswapv3decreaseliqudity.Table, uniswapv3decreaseliqudity.FieldID, id),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, uniswapv3decreaseliqudity.EventTable, uniswapv3decreaseliqudity.EventColumn),
		)
		fromV = sqlgraph.Neighbors(uvl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UniswapV3DecreaseLiqudityClient) Hooks() []Hook {
	return c.hooks.UniswapV3DecreaseLiqudity
}

// UniswapV3IncreaseLiqudityClient is a client for the UniswapV3IncreaseLiqudity schema.
type UniswapV3IncreaseLiqudityClient struct {
	config
}

// NewUniswapV3IncreaseLiqudityClient returns a client for the UniswapV3IncreaseLiqudity from the given config.
func NewUniswapV3IncreaseLiqudityClient(c config) *UniswapV3IncreaseLiqudityClient {
	return &UniswapV3IncreaseLiqudityClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `uniswapv3increaseliqudity.Hooks(f(g(h())))`.
func (c *UniswapV3IncreaseLiqudityClient) Use(hooks ...Hook) {
	c.hooks.UniswapV3IncreaseLiqudity = append(c.hooks.UniswapV3IncreaseLiqudity, hooks...)
}

// Create returns a create builder for UniswapV3IncreaseLiqudity.
func (c *UniswapV3IncreaseLiqudityClient) Create() *UniswapV3IncreaseLiqudityCreate {
	mutation := newUniswapV3IncreaseLiqudityMutation(c.config, OpCreate)
	return &UniswapV3IncreaseLiqudityCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UniswapV3IncreaseLiqudity entities.
func (c *UniswapV3IncreaseLiqudityClient) CreateBulk(builders ...*UniswapV3IncreaseLiqudityCreate) *UniswapV3IncreaseLiqudityCreateBulk {
	return &UniswapV3IncreaseLiqudityCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UniswapV3IncreaseLiqudity.
func (c *UniswapV3IncreaseLiqudityClient) Update() *UniswapV3IncreaseLiqudityUpdate {
	mutation := newUniswapV3IncreaseLiqudityMutation(c.config, OpUpdate)
	return &UniswapV3IncreaseLiqudityUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UniswapV3IncreaseLiqudityClient) UpdateOne(uvl *UniswapV3IncreaseLiqudity) *UniswapV3IncreaseLiqudityUpdateOne {
	mutation := newUniswapV3IncreaseLiqudityMutation(c.config, OpUpdateOne, withUniswapV3IncreaseLiqudity(uvl))
	return &UniswapV3IncreaseLiqudityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UniswapV3IncreaseLiqudityClient) UpdateOneID(id int) *UniswapV3IncreaseLiqudityUpdateOne {
	mutation := newUniswapV3IncreaseLiqudityMutation(c.config, OpUpdateOne, withUniswapV3IncreaseLiqudityID(id))
	return &UniswapV3IncreaseLiqudityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UniswapV3IncreaseLiqudity.
func (c *UniswapV3IncreaseLiqudityClient) Delete() *UniswapV3IncreaseLiqudityDelete {
	mutation := newUniswapV3IncreaseLiqudityMutation(c.config, OpDelete)
	return &UniswapV3IncreaseLiqudityDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UniswapV3IncreaseLiqudityClient) DeleteOne(uvl *UniswapV3IncreaseLiqudity) *UniswapV3IncreaseLiqudityDeleteOne {
	return c.DeleteOneID(uvl.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UniswapV3IncreaseLiqudityClient) DeleteOneID(id int) *UniswapV3IncreaseLiqudityDeleteOne {
	builder := c.Delete().Where(uniswapv3increaseliqudity.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UniswapV3IncreaseLiqudityDeleteOne{builder}
}

// Query returns a query builder for UniswapV3IncreaseLiqudity.
func (c *UniswapV3IncreaseLiqudityClient) Query() *UniswapV3IncreaseLiqudityQuery {
	return &UniswapV3IncreaseLiqudityQuery{
		config: c.config,
	}
}

// Get returns a UniswapV3IncreaseLiqudity entity by its id.
func (c *UniswapV3IncreaseLiqudityClient) Get(ctx context.Context, id int) (*UniswapV3IncreaseLiqudity, error) {
	return c.Query().Where(uniswapv3increaseliqudity.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UniswapV3IncreaseLiqudityClient) GetX(ctx context.Context, id int) *UniswapV3IncreaseLiqudity {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEvent queries the event edge of a UniswapV3IncreaseLiqudity.
func (c *UniswapV3IncreaseLiqudityClient) QueryEvent(uvl *UniswapV3IncreaseLiqudity) *EventQuery {
	query := &EventQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := uvl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(uniswapv3increaseliqudity.Table, uniswapv3increaseliqudity.FieldID, id),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, uniswapv3increaseliqudity.EventTable, uniswapv3increaseliqudity.EventColumn),
		)
		fromV = sqlgraph.Neighbors(uvl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UniswapV3IncreaseLiqudityClient) Hooks() []Hook {
	return c.hooks.UniswapV3IncreaseLiqudity
}

// UniswapV3PoolBurnClient is a client for the UniswapV3PoolBurn schema.
type UniswapV3PoolBurnClient struct {
	config
}

// NewUniswapV3PoolBurnClient returns a client for the UniswapV3PoolBurn from the given config.
func NewUniswapV3PoolBurnClient(c config) *UniswapV3PoolBurnClient {
	return &UniswapV3PoolBurnClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `uniswapv3poolburn.Hooks(f(g(h())))`.
func (c *UniswapV3PoolBurnClient) Use(hooks ...Hook) {
	c.hooks.UniswapV3PoolBurn = append(c.hooks.UniswapV3PoolBurn, hooks...)
}

// Create returns a create builder for UniswapV3PoolBurn.
func (c *UniswapV3PoolBurnClient) Create() *UniswapV3PoolBurnCreate {
	mutation := newUniswapV3PoolBurnMutation(c.config, OpCreate)
	return &UniswapV3PoolBurnCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UniswapV3PoolBurn entities.
func (c *UniswapV3PoolBurnClient) CreateBulk(builders ...*UniswapV3PoolBurnCreate) *UniswapV3PoolBurnCreateBulk {
	return &UniswapV3PoolBurnCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UniswapV3PoolBurn.
func (c *UniswapV3PoolBurnClient) Update() *UniswapV3PoolBurnUpdate {
	mutation := newUniswapV3PoolBurnMutation(c.config, OpUpdate)
	return &UniswapV3PoolBurnUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UniswapV3PoolBurnClient) UpdateOne(uvb *UniswapV3PoolBurn) *UniswapV3PoolBurnUpdateOne {
	mutation := newUniswapV3PoolBurnMutation(c.config, OpUpdateOne, withUniswapV3PoolBurn(uvb))
	return &UniswapV3PoolBurnUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UniswapV3PoolBurnClient) UpdateOneID(id int) *UniswapV3PoolBurnUpdateOne {
	mutation := newUniswapV3PoolBurnMutation(c.config, OpUpdateOne, withUniswapV3PoolBurnID(id))
	return &UniswapV3PoolBurnUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UniswapV3PoolBurn.
func (c *UniswapV3PoolBurnClient) Delete() *UniswapV3PoolBurnDelete {
	mutation := newUniswapV3PoolBurnMutation(c.config, OpDelete)
	return &UniswapV3PoolBurnDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UniswapV3PoolBurnClient) DeleteOne(uvb *UniswapV3PoolBurn) *UniswapV3PoolBurnDeleteOne {
	return c.DeleteOneID(uvb.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UniswapV3PoolBurnClient) DeleteOneID(id int) *UniswapV3PoolBurnDeleteOne {
	builder := c.Delete().Where(uniswapv3poolburn.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UniswapV3PoolBurnDeleteOne{builder}
}

// Query returns a query builder for UniswapV3PoolBurn.
func (c *UniswapV3PoolBurnClient) Query() *UniswapV3PoolBurnQuery {
	return &UniswapV3PoolBurnQuery{
		config: c.config,
	}
}

// Get returns a UniswapV3PoolBurn entity by its id.
func (c *UniswapV3PoolBurnClient) Get(ctx context.Context, id int) (*UniswapV3PoolBurn, error) {
	return c.Query().Where(uniswapv3poolburn.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UniswapV3PoolBurnClient) GetX(ctx context.Context, id int) *UniswapV3PoolBurn {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEvent queries the event edge of a UniswapV3PoolBurn.
func (c *UniswapV3PoolBurnClient) QueryEvent(uvb *UniswapV3PoolBurn) *EventQuery {
	query := &EventQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := uvb.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(uniswapv3poolburn.Table, uniswapv3poolburn.FieldID, id),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, uniswapv3poolburn.EventTable, uniswapv3poolburn.EventColumn),
		)
		fromV = sqlgraph.Neighbors(uvb.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UniswapV3PoolBurnClient) Hooks() []Hook {
	return c.hooks.UniswapV3PoolBurn
}

// UniswapV3PoolCreatedClient is a client for the UniswapV3PoolCreated schema.
type UniswapV3PoolCreatedClient struct {
	config
}

// NewUniswapV3PoolCreatedClient returns a client for the UniswapV3PoolCreated from the given config.
func NewUniswapV3PoolCreatedClient(c config) *UniswapV3PoolCreatedClient {
	return &UniswapV3PoolCreatedClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `uniswapv3poolcreated.Hooks(f(g(h())))`.
func (c *UniswapV3PoolCreatedClient) Use(hooks ...Hook) {
	c.hooks.UniswapV3PoolCreated = append(c.hooks.UniswapV3PoolCreated, hooks...)
}

// Create returns a create builder for UniswapV3PoolCreated.
func (c *UniswapV3PoolCreatedClient) Create() *UniswapV3PoolCreatedCreate {
	mutation := newUniswapV3PoolCreatedMutation(c.config, OpCreate)
	return &UniswapV3PoolCreatedCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UniswapV3PoolCreated entities.
func (c *UniswapV3PoolCreatedClient) CreateBulk(builders ...*UniswapV3PoolCreatedCreate) *UniswapV3PoolCreatedCreateBulk {
	return &UniswapV3PoolCreatedCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UniswapV3PoolCreated.
func (c *UniswapV3PoolCreatedClient) Update() *UniswapV3PoolCreatedUpdate {
	mutation := newUniswapV3PoolCreatedMutation(c.config, OpUpdate)
	return &UniswapV3PoolCreatedUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UniswapV3PoolCreatedClient) UpdateOne(uvc *UniswapV3PoolCreated) *UniswapV3PoolCreatedUpdateOne {
	mutation := newUniswapV3PoolCreatedMutation(c.config, OpUpdateOne, withUniswapV3PoolCreated(uvc))
	return &UniswapV3PoolCreatedUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UniswapV3PoolCreatedClient) UpdateOneID(id int) *UniswapV3PoolCreatedUpdateOne {
	mutation := newUniswapV3PoolCreatedMutation(c.config, OpUpdateOne, withUniswapV3PoolCreatedID(id))
	return &UniswapV3PoolCreatedUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UniswapV3PoolCreated.
func (c *UniswapV3PoolCreatedClient) Delete() *UniswapV3PoolCreatedDelete {
	mutation := newUniswapV3PoolCreatedMutation(c.config, OpDelete)
	return &UniswapV3PoolCreatedDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UniswapV3PoolCreatedClient) DeleteOne(uvc *UniswapV3PoolCreated) *UniswapV3PoolCreatedDeleteOne {
	return c.DeleteOneID(uvc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UniswapV3PoolCreatedClient) DeleteOneID(id int) *UniswapV3PoolCreatedDeleteOne {
	builder := c.Delete().Where(uniswapv3poolcreated.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UniswapV3PoolCreatedDeleteOne{builder}
}

// Query returns a query builder for UniswapV3PoolCreated.
func (c *UniswapV3PoolCreatedClient) Query() *UniswapV3PoolCreatedQuery {
	return &UniswapV3PoolCreatedQuery{
		config: c.config,
	}
}

// Get returns a UniswapV3PoolCreated entity by its id.
func (c *UniswapV3PoolCreatedClient) Get(ctx context.Context, id int) (*UniswapV3PoolCreated, error) {
	return c.Query().Where(uniswapv3poolcreated.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UniswapV3PoolCreatedClient) GetX(ctx context.Context, id int) *UniswapV3PoolCreated {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEvent queries the event edge of a UniswapV3PoolCreated.
func (c *UniswapV3PoolCreatedClient) QueryEvent(uvc *UniswapV3PoolCreated) *EventQuery {
	query := &EventQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := uvc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(uniswapv3poolcreated.Table, uniswapv3poolcreated.FieldID, id),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, uniswapv3poolcreated.EventTable, uniswapv3poolcreated.EventColumn),
		)
		fromV = sqlgraph.Neighbors(uvc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UniswapV3PoolCreatedClient) Hooks() []Hook {
	return c.hooks.UniswapV3PoolCreated
}

// UniswapV3PoolFlashClient is a client for the UniswapV3PoolFlash schema.
type UniswapV3PoolFlashClient struct {
	config
}

// NewUniswapV3PoolFlashClient returns a client for the UniswapV3PoolFlash from the given config.
func NewUniswapV3PoolFlashClient(c config) *UniswapV3PoolFlashClient {
	return &UniswapV3PoolFlashClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `uniswapv3poolflash.Hooks(f(g(h())))`.
func (c *UniswapV3PoolFlashClient) Use(hooks ...Hook) {
	c.hooks.UniswapV3PoolFlash = append(c.hooks.UniswapV3PoolFlash, hooks...)
}

// Create returns a create builder for UniswapV3PoolFlash.
func (c *UniswapV3PoolFlashClient) Create() *UniswapV3PoolFlashCreate {
	mutation := newUniswapV3PoolFlashMutation(c.config, OpCreate)
	return &UniswapV3PoolFlashCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UniswapV3PoolFlash entities.
func (c *UniswapV3PoolFlashClient) CreateBulk(builders ...*UniswapV3PoolFlashCreate) *UniswapV3PoolFlashCreateBulk {
	return &UniswapV3PoolFlashCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UniswapV3PoolFlash.
func (c *UniswapV3PoolFlashClient) Update() *UniswapV3PoolFlashUpdate {
	mutation := newUniswapV3PoolFlashMutation(c.config, OpUpdate)
	return &UniswapV3PoolFlashUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UniswapV3PoolFlashClient) UpdateOne(uvf *UniswapV3PoolFlash) *UniswapV3PoolFlashUpdateOne {
	mutation := newUniswapV3PoolFlashMutation(c.config, OpUpdateOne, withUniswapV3PoolFlash(uvf))
	return &UniswapV3PoolFlashUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UniswapV3PoolFlashClient) UpdateOneID(id int) *UniswapV3PoolFlashUpdateOne {
	mutation := newUniswapV3PoolFlashMutation(c.config, OpUpdateOne, withUniswapV3PoolFlashID(id))
	return &UniswapV3PoolFlashUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UniswapV3PoolFlash.
func (c *UniswapV3PoolFlashClient) Delete() *UniswapV3PoolFlashDelete {
	mutation := newUniswapV3PoolFlashMutation(c.config, OpDelete)
	return &UniswapV3PoolFlashDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UniswapV3PoolFlashClient) DeleteOne(uvf *UniswapV3PoolFlash) *UniswapV3PoolFlashDeleteOne {
	return c.DeleteOneID(uvf.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UniswapV3PoolFlashClient) DeleteOneID(id int) *UniswapV3PoolFlashDeleteOne {
	builder := c.Delete().Where(uniswapv3poolflash.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UniswapV3PoolFlashDeleteOne{builder}
}

// Query returns a query builder for UniswapV3PoolFlash.
func (c *UniswapV3PoolFlashClient) Query() *UniswapV3PoolFlashQuery {
	return &UniswapV3PoolFlashQuery{
		config: c.config,
	}
}

// Get returns a UniswapV3PoolFlash entity by its id.
func (c *UniswapV3PoolFlashClient) Get(ctx context.Context, id int) (*UniswapV3PoolFlash, error) {
	return c.Query().Where(uniswapv3poolflash.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UniswapV3PoolFlashClient) GetX(ctx context.Context, id int) *UniswapV3PoolFlash {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEvent queries the event edge of a UniswapV3PoolFlash.
func (c *UniswapV3PoolFlashClient) QueryEvent(uvf *UniswapV3PoolFlash) *EventQuery {
	query := &EventQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := uvf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(uniswapv3poolflash.Table, uniswapv3poolflash.FieldID, id),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, uniswapv3poolflash.EventTable, uniswapv3poolflash.EventColumn),
		)
		fromV = sqlgraph.Neighbors(uvf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UniswapV3PoolFlashClient) Hooks() []Hook {
	return c.hooks.UniswapV3PoolFlash
}

// UniswapV3PoolInitializeClient is a client for the UniswapV3PoolInitialize schema.
type UniswapV3PoolInitializeClient struct {
	config
}

// NewUniswapV3PoolInitializeClient returns a client for the UniswapV3PoolInitialize from the given config.
func NewUniswapV3PoolInitializeClient(c config) *UniswapV3PoolInitializeClient {
	return &UniswapV3PoolInitializeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `uniswapv3poolinitialize.Hooks(f(g(h())))`.
func (c *UniswapV3PoolInitializeClient) Use(hooks ...Hook) {
	c.hooks.UniswapV3PoolInitialize = append(c.hooks.UniswapV3PoolInitialize, hooks...)
}

// Create returns a create builder for UniswapV3PoolInitialize.
func (c *UniswapV3PoolInitializeClient) Create() *UniswapV3PoolInitializeCreate {
	mutation := newUniswapV3PoolInitializeMutation(c.config, OpCreate)
	return &UniswapV3PoolInitializeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UniswapV3PoolInitialize entities.
func (c *UniswapV3PoolInitializeClient) CreateBulk(builders ...*UniswapV3PoolInitializeCreate) *UniswapV3PoolInitializeCreateBulk {
	return &UniswapV3PoolInitializeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UniswapV3PoolInitialize.
func (c *UniswapV3PoolInitializeClient) Update() *UniswapV3PoolInitializeUpdate {
	mutation := newUniswapV3PoolInitializeMutation(c.config, OpUpdate)
	return &UniswapV3PoolInitializeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UniswapV3PoolInitializeClient) UpdateOne(uvi *UniswapV3PoolInitialize) *UniswapV3PoolInitializeUpdateOne {
	mutation := newUniswapV3PoolInitializeMutation(c.config, OpUpdateOne, withUniswapV3PoolInitialize(uvi))
	return &UniswapV3PoolInitializeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UniswapV3PoolInitializeClient) UpdateOneID(id int) *UniswapV3PoolInitializeUpdateOne {
	mutation := newUniswapV3PoolInitializeMutation(c.config, OpUpdateOne, withUniswapV3PoolInitializeID(id))
	return &UniswapV3PoolInitializeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UniswapV3PoolInitialize.
func (c *UniswapV3PoolInitializeClient) Delete() *UniswapV3PoolInitializeDelete {
	mutation := newUniswapV3PoolInitializeMutation(c.config, OpDelete)
	return &UniswapV3PoolInitializeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UniswapV3PoolInitializeClient) DeleteOne(uvi *UniswapV3PoolInitialize) *UniswapV3PoolInitializeDeleteOne {
	return c.DeleteOneID(uvi.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UniswapV3PoolInitializeClient) DeleteOneID(id int) *UniswapV3PoolInitializeDeleteOne {
	builder := c.Delete().Where(uniswapv3poolinitialize.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UniswapV3PoolInitializeDeleteOne{builder}
}

// Query returns a query builder for UniswapV3PoolInitialize.
func (c *UniswapV3PoolInitializeClient) Query() *UniswapV3PoolInitializeQuery {
	return &UniswapV3PoolInitializeQuery{
		config: c.config,
	}
}

// Get returns a UniswapV3PoolInitialize entity by its id.
func (c *UniswapV3PoolInitializeClient) Get(ctx context.Context, id int) (*UniswapV3PoolInitialize, error) {
	return c.Query().Where(uniswapv3poolinitialize.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UniswapV3PoolInitializeClient) GetX(ctx context.Context, id int) *UniswapV3PoolInitialize {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEvent queries the event edge of a UniswapV3PoolInitialize.
func (c *UniswapV3PoolInitializeClient) QueryEvent(uvi *UniswapV3PoolInitialize) *EventQuery {
	query := &EventQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := uvi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(uniswapv3poolinitialize.Table, uniswapv3poolinitialize.FieldID, id),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, uniswapv3poolinitialize.EventTable, uniswapv3poolinitialize.EventColumn),
		)
		fromV = sqlgraph.Neighbors(uvi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UniswapV3PoolInitializeClient) Hooks() []Hook {
	return c.hooks.UniswapV3PoolInitialize
}

// UniswapV3PoolMintClient is a client for the UniswapV3PoolMint schema.
type UniswapV3PoolMintClient struct {
	config
}

// NewUniswapV3PoolMintClient returns a client for the UniswapV3PoolMint from the given config.
func NewUniswapV3PoolMintClient(c config) *UniswapV3PoolMintClient {
	return &UniswapV3PoolMintClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `uniswapv3poolmint.Hooks(f(g(h())))`.
func (c *UniswapV3PoolMintClient) Use(hooks ...Hook) {
	c.hooks.UniswapV3PoolMint = append(c.hooks.UniswapV3PoolMint, hooks...)
}

// Create returns a create builder for UniswapV3PoolMint.
func (c *UniswapV3PoolMintClient) Create() *UniswapV3PoolMintCreate {
	mutation := newUniswapV3PoolMintMutation(c.config, OpCreate)
	return &UniswapV3PoolMintCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UniswapV3PoolMint entities.
func (c *UniswapV3PoolMintClient) CreateBulk(builders ...*UniswapV3PoolMintCreate) *UniswapV3PoolMintCreateBulk {
	return &UniswapV3PoolMintCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UniswapV3PoolMint.
func (c *UniswapV3PoolMintClient) Update() *UniswapV3PoolMintUpdate {
	mutation := newUniswapV3PoolMintMutation(c.config, OpUpdate)
	return &UniswapV3PoolMintUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UniswapV3PoolMintClient) UpdateOne(uvm *UniswapV3PoolMint) *UniswapV3PoolMintUpdateOne {
	mutation := newUniswapV3PoolMintMutation(c.config, OpUpdateOne, withUniswapV3PoolMint(uvm))
	return &UniswapV3PoolMintUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UniswapV3PoolMintClient) UpdateOneID(id int) *UniswapV3PoolMintUpdateOne {
	mutation := newUniswapV3PoolMintMutation(c.config, OpUpdateOne, withUniswapV3PoolMintID(id))
	return &UniswapV3PoolMintUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UniswapV3PoolMint.
func (c *UniswapV3PoolMintClient) Delete() *UniswapV3PoolMintDelete {
	mutation := newUniswapV3PoolMintMutation(c.config, OpDelete)
	return &UniswapV3PoolMintDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UniswapV3PoolMintClient) DeleteOne(uvm *UniswapV3PoolMint) *UniswapV3PoolMintDeleteOne {
	return c.DeleteOneID(uvm.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UniswapV3PoolMintClient) DeleteOneID(id int) *UniswapV3PoolMintDeleteOne {
	builder := c.Delete().Where(uniswapv3poolmint.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UniswapV3PoolMintDeleteOne{builder}
}

// Query returns a query builder for UniswapV3PoolMint.
func (c *UniswapV3PoolMintClient) Query() *UniswapV3PoolMintQuery {
	return &UniswapV3PoolMintQuery{
		config: c.config,
	}
}

// Get returns a UniswapV3PoolMint entity by its id.
func (c *UniswapV3PoolMintClient) Get(ctx context.Context, id int) (*UniswapV3PoolMint, error) {
	return c.Query().Where(uniswapv3poolmint.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UniswapV3PoolMintClient) GetX(ctx context.Context, id int) *UniswapV3PoolMint {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEvent queries the event edge of a UniswapV3PoolMint.
func (c *UniswapV3PoolMintClient) QueryEvent(uvm *UniswapV3PoolMint) *EventQuery {
	query := &EventQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := uvm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(uniswapv3poolmint.Table, uniswapv3poolmint.FieldID, id),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, uniswapv3poolmint.EventTable, uniswapv3poolmint.EventColumn),
		)
		fromV = sqlgraph.Neighbors(uvm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UniswapV3PoolMintClient) Hooks() []Hook {
	return c.hooks.UniswapV3PoolMint
}

// UniswapV3PoolSwapClient is a client for the UniswapV3PoolSwap schema.
type UniswapV3PoolSwapClient struct {
	config
}

// NewUniswapV3PoolSwapClient returns a client for the UniswapV3PoolSwap from the given config.
func NewUniswapV3PoolSwapClient(c config) *UniswapV3PoolSwapClient {
	return &UniswapV3PoolSwapClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `uniswapv3poolswap.Hooks(f(g(h())))`.
func (c *UniswapV3PoolSwapClient) Use(hooks ...Hook) {
	c.hooks.UniswapV3PoolSwap = append(c.hooks.UniswapV3PoolSwap, hooks...)
}

// Create returns a create builder for UniswapV3PoolSwap.
func (c *UniswapV3PoolSwapClient) Create() *UniswapV3PoolSwapCreate {
	mutation := newUniswapV3PoolSwapMutation(c.config, OpCreate)
	return &UniswapV3PoolSwapCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UniswapV3PoolSwap entities.
func (c *UniswapV3PoolSwapClient) CreateBulk(builders ...*UniswapV3PoolSwapCreate) *UniswapV3PoolSwapCreateBulk {
	return &UniswapV3PoolSwapCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UniswapV3PoolSwap.
func (c *UniswapV3PoolSwapClient) Update() *UniswapV3PoolSwapUpdate {
	mutation := newUniswapV3PoolSwapMutation(c.config, OpUpdate)
	return &UniswapV3PoolSwapUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UniswapV3PoolSwapClient) UpdateOne(uvs *UniswapV3PoolSwap) *UniswapV3PoolSwapUpdateOne {
	mutation := newUniswapV3PoolSwapMutation(c.config, OpUpdateOne, withUniswapV3PoolSwap(uvs))
	return &UniswapV3PoolSwapUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UniswapV3PoolSwapClient) UpdateOneID(id int) *UniswapV3PoolSwapUpdateOne {
	mutation := newUniswapV3PoolSwapMutation(c.config, OpUpdateOne, withUniswapV3PoolSwapID(id))
	return &UniswapV3PoolSwapUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UniswapV3PoolSwap.
func (c *UniswapV3PoolSwapClient) Delete() *UniswapV3PoolSwapDelete {
	mutation := newUniswapV3PoolSwapMutation(c.config, OpDelete)
	return &UniswapV3PoolSwapDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UniswapV3PoolSwapClient) DeleteOne(uvs *UniswapV3PoolSwap) *UniswapV3PoolSwapDeleteOne {
	return c.DeleteOneID(uvs.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UniswapV3PoolSwapClient) DeleteOneID(id int) *UniswapV3PoolSwapDeleteOne {
	builder := c.Delete().Where(uniswapv3poolswap.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UniswapV3PoolSwapDeleteOne{builder}
}

// Query returns a query builder for UniswapV3PoolSwap.
func (c *UniswapV3PoolSwapClient) Query() *UniswapV3PoolSwapQuery {
	return &UniswapV3PoolSwapQuery{
		config: c.config,
	}
}

// Get returns a UniswapV3PoolSwap entity by its id.
func (c *UniswapV3PoolSwapClient) Get(ctx context.Context, id int) (*UniswapV3PoolSwap, error) {
	return c.Query().Where(uniswapv3poolswap.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UniswapV3PoolSwapClient) GetX(ctx context.Context, id int) *UniswapV3PoolSwap {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEvent queries the event edge of a UniswapV3PoolSwap.
func (c *UniswapV3PoolSwapClient) QueryEvent(uvs *UniswapV3PoolSwap) *EventQuery {
	query := &EventQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := uvs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(uniswapv3poolswap.Table, uniswapv3poolswap.FieldID, id),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, uniswapv3poolswap.EventTable, uniswapv3poolswap.EventColumn),
		)
		fromV = sqlgraph.Neighbors(uvs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UniswapV3PoolSwapClient) Hooks() []Hook {
	return c.hooks.UniswapV3PoolSwap
}

// UniswapV3TransferClient is a client for the UniswapV3Transfer schema.
type UniswapV3TransferClient struct {
	config
}

// NewUniswapV3TransferClient returns a client for the UniswapV3Transfer from the given config.
func NewUniswapV3TransferClient(c config) *UniswapV3TransferClient {
	return &UniswapV3TransferClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `uniswapv3transfer.Hooks(f(g(h())))`.
func (c *UniswapV3TransferClient) Use(hooks ...Hook) {
	c.hooks.UniswapV3Transfer = append(c.hooks.UniswapV3Transfer, hooks...)
}

// Create returns a create builder for UniswapV3Transfer.
func (c *UniswapV3TransferClient) Create() *UniswapV3TransferCreate {
	mutation := newUniswapV3TransferMutation(c.config, OpCreate)
	return &UniswapV3TransferCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UniswapV3Transfer entities.
func (c *UniswapV3TransferClient) CreateBulk(builders ...*UniswapV3TransferCreate) *UniswapV3TransferCreateBulk {
	return &UniswapV3TransferCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UniswapV3Transfer.
func (c *UniswapV3TransferClient) Update() *UniswapV3TransferUpdate {
	mutation := newUniswapV3TransferMutation(c.config, OpUpdate)
	return &UniswapV3TransferUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UniswapV3TransferClient) UpdateOne(uv *UniswapV3Transfer) *UniswapV3TransferUpdateOne {
	mutation := newUniswapV3TransferMutation(c.config, OpUpdateOne, withUniswapV3Transfer(uv))
	return &UniswapV3TransferUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UniswapV3TransferClient) UpdateOneID(id int) *UniswapV3TransferUpdateOne {
	mutation := newUniswapV3TransferMutation(c.config, OpUpdateOne, withUniswapV3TransferID(id))
	return &UniswapV3TransferUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UniswapV3Transfer.
func (c *UniswapV3TransferClient) Delete() *UniswapV3TransferDelete {
	mutation := newUniswapV3TransferMutation(c.config, OpDelete)
	return &UniswapV3TransferDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UniswapV3TransferClient) DeleteOne(uv *UniswapV3Transfer) *UniswapV3TransferDeleteOne {
	return c.DeleteOneID(uv.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UniswapV3TransferClient) DeleteOneID(id int) *UniswapV3TransferDeleteOne {
	builder := c.Delete().Where(uniswapv3transfer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UniswapV3TransferDeleteOne{builder}
}

// Query returns a query builder for UniswapV3Transfer.
func (c *UniswapV3TransferClient) Query() *UniswapV3TransferQuery {
	return &UniswapV3TransferQuery{
		config: c.config,
	}
}

// Get returns a UniswapV3Transfer entity by its id.
func (c *UniswapV3TransferClient) Get(ctx context.Context, id int) (*UniswapV3Transfer, error) {
	return c.Query().Where(uniswapv3transfer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UniswapV3TransferClient) GetX(ctx context.Context, id int) *UniswapV3Transfer {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEvent queries the event edge of a UniswapV3Transfer.
func (c *UniswapV3TransferClient) QueryEvent(uv *UniswapV3Transfer) *EventQuery {
	query := &EventQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := uv.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(uniswapv3transfer.Table, uniswapv3transfer.FieldID, id),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, uniswapv3transfer.EventTable, uniswapv3transfer.EventColumn),
		)
		fromV = sqlgraph.Neighbors(uv.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UniswapV3TransferClient) Hooks() []Hook {
	return c.hooks.UniswapV3Transfer
}
