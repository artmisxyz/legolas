// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (e *EventQuery) CollectFields(ctx context.Context, satisfies ...string) *EventQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		e = e.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return e
}

func (e *EventQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *EventQuery {
	return e
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (uv *UniswapV3CollectQuery) CollectFields(ctx context.Context, satisfies ...string) *UniswapV3CollectQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		uv = uv.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return uv
}

func (uv *UniswapV3CollectQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *UniswapV3CollectQuery {
	return uv
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (uvl *UniswapV3DecreaseLiqudityQuery) CollectFields(ctx context.Context, satisfies ...string) *UniswapV3DecreaseLiqudityQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		uvl = uvl.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return uvl
}

func (uvl *UniswapV3DecreaseLiqudityQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *UniswapV3DecreaseLiqudityQuery {
	return uvl
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (uvl *UniswapV3IncreaseLiqudityQuery) CollectFields(ctx context.Context, satisfies ...string) *UniswapV3IncreaseLiqudityQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		uvl = uvl.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return uvl
}

func (uvl *UniswapV3IncreaseLiqudityQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *UniswapV3IncreaseLiqudityQuery {
	return uvl
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (uvb *UniswapV3PoolBurnQuery) CollectFields(ctx context.Context, satisfies ...string) *UniswapV3PoolBurnQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		uvb = uvb.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return uvb
}

func (uvb *UniswapV3PoolBurnQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *UniswapV3PoolBurnQuery {
	return uvb
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (uvc *UniswapV3PoolCreatedQuery) CollectFields(ctx context.Context, satisfies ...string) *UniswapV3PoolCreatedQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		uvc = uvc.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return uvc
}

func (uvc *UniswapV3PoolCreatedQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *UniswapV3PoolCreatedQuery {
	return uvc
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (uvf *UniswapV3PoolFlashQuery) CollectFields(ctx context.Context, satisfies ...string) *UniswapV3PoolFlashQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		uvf = uvf.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return uvf
}

func (uvf *UniswapV3PoolFlashQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *UniswapV3PoolFlashQuery {
	return uvf
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (uvi *UniswapV3PoolInitializeQuery) CollectFields(ctx context.Context, satisfies ...string) *UniswapV3PoolInitializeQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		uvi = uvi.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return uvi
}

func (uvi *UniswapV3PoolInitializeQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *UniswapV3PoolInitializeQuery {
	return uvi
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (uvm *UniswapV3PoolMintQuery) CollectFields(ctx context.Context, satisfies ...string) *UniswapV3PoolMintQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		uvm = uvm.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return uvm
}

func (uvm *UniswapV3PoolMintQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *UniswapV3PoolMintQuery {
	return uvm
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (uvs *UniswapV3PoolSwapQuery) CollectFields(ctx context.Context, satisfies ...string) *UniswapV3PoolSwapQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		uvs = uvs.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return uvs
}

func (uvs *UniswapV3PoolSwapQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *UniswapV3PoolSwapQuery {
	return uvs
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (uv *UniswapV3TransferQuery) CollectFields(ctx context.Context, satisfies ...string) *UniswapV3TransferQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		uv = uv.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return uv
}

func (uv *UniswapV3TransferQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *UniswapV3TransferQuery {
	return uv
}
