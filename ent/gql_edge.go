// Code generated by entc, DO NOT EDIT.

package ent

import "context"

func (e *Event) IncreaseLiquidity(ctx context.Context) (*UniswapV3IncreaseLiqudity, error) {
	result, err := e.Edges.IncreaseLiquidityOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryIncreaseLiquidity().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (e *Event) DecreaseLiquidity(ctx context.Context) (*UniswapV3DecreaseLiqudity, error) {
	result, err := e.Edges.DecreaseLiquidityOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryDecreaseLiquidity().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (e *Event) Collect(ctx context.Context) (*UniswapV3Collect, error) {
	result, err := e.Edges.CollectOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryCollect().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (e *Event) Transfer(ctx context.Context) (*UniswapV3Transfer, error) {
	result, err := e.Edges.TransferOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryTransfer().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (e *Event) PoolCreated(ctx context.Context) (*UniswapV3PoolCreated, error) {
	result, err := e.Edges.PoolCreatedOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryPoolCreated().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (e *Event) PoolInitialize(ctx context.Context) (*UniswapV3PoolInitialize, error) {
	result, err := e.Edges.PoolInitializeOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryPoolInitialize().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (e *Event) PoolSwap(ctx context.Context) (*UniswapV3PoolSwap, error) {
	result, err := e.Edges.PoolSwapOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryPoolSwap().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (e *Event) PoolMint(ctx context.Context) (*UniswapV3PoolMint, error) {
	result, err := e.Edges.PoolMintOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryPoolMint().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (e *Event) PoolBurn(ctx context.Context) (*UniswapV3PoolBurn, error) {
	result, err := e.Edges.PoolBurnOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryPoolBurn().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (e *Event) PoolFlash(ctx context.Context) (*UniswapV3PoolFlash, error) {
	result, err := e.Edges.PoolFlashOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryPoolFlash().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (uv *UniswapV3Collect) Event(ctx context.Context) (*Event, error) {
	result, err := uv.Edges.EventOrErr()
	if IsNotLoaded(err) {
		result, err = uv.QueryEvent().Only(ctx)
	}
	return result, err
}

func (uvl *UniswapV3DecreaseLiqudity) Event(ctx context.Context) (*Event, error) {
	result, err := uvl.Edges.EventOrErr()
	if IsNotLoaded(err) {
		result, err = uvl.QueryEvent().Only(ctx)
	}
	return result, err
}

func (uvl *UniswapV3IncreaseLiqudity) Event(ctx context.Context) (*Event, error) {
	result, err := uvl.Edges.EventOrErr()
	if IsNotLoaded(err) {
		result, err = uvl.QueryEvent().Only(ctx)
	}
	return result, err
}

func (uvb *UniswapV3PoolBurn) Event(ctx context.Context) (*Event, error) {
	result, err := uvb.Edges.EventOrErr()
	if IsNotLoaded(err) {
		result, err = uvb.QueryEvent().Only(ctx)
	}
	return result, err
}

func (uvc *UniswapV3PoolCreated) Event(ctx context.Context) (*Event, error) {
	result, err := uvc.Edges.EventOrErr()
	if IsNotLoaded(err) {
		result, err = uvc.QueryEvent().Only(ctx)
	}
	return result, err
}

func (uvf *UniswapV3PoolFlash) Event(ctx context.Context) (*Event, error) {
	result, err := uvf.Edges.EventOrErr()
	if IsNotLoaded(err) {
		result, err = uvf.QueryEvent().Only(ctx)
	}
	return result, err
}

func (uvi *UniswapV3PoolInitialize) Event(ctx context.Context) (*Event, error) {
	result, err := uvi.Edges.EventOrErr()
	if IsNotLoaded(err) {
		result, err = uvi.QueryEvent().Only(ctx)
	}
	return result, err
}

func (uvm *UniswapV3PoolMint) Event(ctx context.Context) (*Event, error) {
	result, err := uvm.Edges.EventOrErr()
	if IsNotLoaded(err) {
		result, err = uvm.QueryEvent().Only(ctx)
	}
	return result, err
}

func (uvs *UniswapV3PoolSwap) Event(ctx context.Context) (*Event, error) {
	result, err := uvs.Edges.EventOrErr()
	if IsNotLoaded(err) {
		result, err = uvs.QueryEvent().Only(ctx)
	}
	return result, err
}

func (uv *UniswapV3Transfer) Event(ctx context.Context) (*Event, error) {
	result, err := uv.Edges.EventOrErr()
	if IsNotLoaded(err) {
		result, err = uv.QueryEvent().Only(ctx)
	}
	return result, err
}
