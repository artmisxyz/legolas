// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/artmisxyz/legolas/ent/position"
	"github.com/artmisxyz/legolas/ent/schema"
)

// PositionCreate is the builder for creating a Position entity.
type PositionCreate struct {
	config
	mutation *PositionMutation
	hooks    []Hook
}

// SetToken sets the "token" field.
func (pc *PositionCreate) SetToken(si *schema.BigInt) *PositionCreate {
	pc.mutation.SetToken(si)
	return pc
}

// SetOwner sets the "owner" field.
func (pc *PositionCreate) SetOwner(b []byte) *PositionCreate {
	pc.mutation.SetOwner(b)
	return pc
}

// SetPool sets the "pool" field.
func (pc *PositionCreate) SetPool(b []byte) *PositionCreate {
	pc.mutation.SetPool(b)
	return pc
}

// SetToken0 sets the "token0" field.
func (pc *PositionCreate) SetToken0(b []byte) *PositionCreate {
	pc.mutation.SetToken0(b)
	return pc
}

// SetToken1 sets the "token1" field.
func (pc *PositionCreate) SetToken1(b []byte) *PositionCreate {
	pc.mutation.SetToken1(b)
	return pc
}

// SetTickLower sets the "tick_lower" field.
func (pc *PositionCreate) SetTickLower(si *schema.BigInt) *PositionCreate {
	pc.mutation.SetTickLower(si)
	return pc
}

// SetTickUpper sets the "tick_upper" field.
func (pc *PositionCreate) SetTickUpper(si *schema.BigInt) *PositionCreate {
	pc.mutation.SetTickUpper(si)
	return pc
}

// SetLiquidity sets the "liquidity" field.
func (pc *PositionCreate) SetLiquidity(si *schema.BigInt) *PositionCreate {
	pc.mutation.SetLiquidity(si)
	return pc
}

// SetDepositedToken0 sets the "deposited_token0" field.
func (pc *PositionCreate) SetDepositedToken0(si *schema.BigInt) *PositionCreate {
	pc.mutation.SetDepositedToken0(si)
	return pc
}

// SetDepositedToken1 sets the "deposited_token1" field.
func (pc *PositionCreate) SetDepositedToken1(si *schema.BigInt) *PositionCreate {
	pc.mutation.SetDepositedToken1(si)
	return pc
}

// SetWithdrawnToken0 sets the "withdrawn_token0" field.
func (pc *PositionCreate) SetWithdrawnToken0(si *schema.BigInt) *PositionCreate {
	pc.mutation.SetWithdrawnToken0(si)
	return pc
}

// SetWithdrawnToken1 sets the "withdrawn_token1" field.
func (pc *PositionCreate) SetWithdrawnToken1(si *schema.BigInt) *PositionCreate {
	pc.mutation.SetWithdrawnToken1(si)
	return pc
}

// SetCollectedToken0 sets the "collected_token0" field.
func (pc *PositionCreate) SetCollectedToken0(si *schema.BigInt) *PositionCreate {
	pc.mutation.SetCollectedToken0(si)
	return pc
}

// SetCollectedToken1 sets the "collected_token1" field.
func (pc *PositionCreate) SetCollectedToken1(si *schema.BigInt) *PositionCreate {
	pc.mutation.SetCollectedToken1(si)
	return pc
}

// SetCollectedFeesToken0 sets the "collected_fees_token0" field.
func (pc *PositionCreate) SetCollectedFeesToken0(si *schema.BigInt) *PositionCreate {
	pc.mutation.SetCollectedFeesToken0(si)
	return pc
}

// SetCollectedFeesToken1 sets the "collected_fees_token1" field.
func (pc *PositionCreate) SetCollectedFeesToken1(si *schema.BigInt) *PositionCreate {
	pc.mutation.SetCollectedFeesToken1(si)
	return pc
}

// SetFeeGrowthInside0LastX128 sets the "fee_growth_inside0_lastX128" field.
func (pc *PositionCreate) SetFeeGrowthInside0LastX128(si *schema.BigInt) *PositionCreate {
	pc.mutation.SetFeeGrowthInside0LastX128(si)
	return pc
}

// SetFeeGrowthInside1LastX128 sets the "fee_growth_inside1_lastX128" field.
func (pc *PositionCreate) SetFeeGrowthInside1LastX128(si *schema.BigInt) *PositionCreate {
	pc.mutation.SetFeeGrowthInside1LastX128(si)
	return pc
}

// Mutation returns the PositionMutation object of the builder.
func (pc *PositionCreate) Mutation() *PositionMutation {
	return pc.mutation
}

// Save creates the Position in the database.
func (pc *PositionCreate) Save(ctx context.Context) (*Position, error) {
	var (
		err  error
		node *Position
	)
	if len(pc.hooks) == 0 {
		if err = pc.check(); err != nil {
			return nil, err
		}
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PositionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pc.check(); err != nil {
				return nil, err
			}
			pc.mutation = mutation
			if node, err = pc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			if pc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PositionCreate) SaveX(ctx context.Context) *Position {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PositionCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PositionCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PositionCreate) check() error {
	if _, ok := pc.mutation.Token(); !ok {
		return &ValidationError{Name: "token", err: errors.New(`ent: missing required field "token"`)}
	}
	if _, ok := pc.mutation.Owner(); !ok {
		return &ValidationError{Name: "owner", err: errors.New(`ent: missing required field "owner"`)}
	}
	if _, ok := pc.mutation.Pool(); !ok {
		return &ValidationError{Name: "pool", err: errors.New(`ent: missing required field "pool"`)}
	}
	if _, ok := pc.mutation.Token0(); !ok {
		return &ValidationError{Name: "token0", err: errors.New(`ent: missing required field "token0"`)}
	}
	if _, ok := pc.mutation.Token1(); !ok {
		return &ValidationError{Name: "token1", err: errors.New(`ent: missing required field "token1"`)}
	}
	if _, ok := pc.mutation.TickLower(); !ok {
		return &ValidationError{Name: "tick_lower", err: errors.New(`ent: missing required field "tick_lower"`)}
	}
	if _, ok := pc.mutation.TickUpper(); !ok {
		return &ValidationError{Name: "tick_upper", err: errors.New(`ent: missing required field "tick_upper"`)}
	}
	if _, ok := pc.mutation.Liquidity(); !ok {
		return &ValidationError{Name: "liquidity", err: errors.New(`ent: missing required field "liquidity"`)}
	}
	if _, ok := pc.mutation.DepositedToken0(); !ok {
		return &ValidationError{Name: "deposited_token0", err: errors.New(`ent: missing required field "deposited_token0"`)}
	}
	if _, ok := pc.mutation.DepositedToken1(); !ok {
		return &ValidationError{Name: "deposited_token1", err: errors.New(`ent: missing required field "deposited_token1"`)}
	}
	if _, ok := pc.mutation.WithdrawnToken0(); !ok {
		return &ValidationError{Name: "withdrawn_token0", err: errors.New(`ent: missing required field "withdrawn_token0"`)}
	}
	if _, ok := pc.mutation.WithdrawnToken1(); !ok {
		return &ValidationError{Name: "withdrawn_token1", err: errors.New(`ent: missing required field "withdrawn_token1"`)}
	}
	if _, ok := pc.mutation.CollectedToken0(); !ok {
		return &ValidationError{Name: "collected_token0", err: errors.New(`ent: missing required field "collected_token0"`)}
	}
	if _, ok := pc.mutation.CollectedToken1(); !ok {
		return &ValidationError{Name: "collected_token1", err: errors.New(`ent: missing required field "collected_token1"`)}
	}
	if _, ok := pc.mutation.CollectedFeesToken0(); !ok {
		return &ValidationError{Name: "collected_fees_token0", err: errors.New(`ent: missing required field "collected_fees_token0"`)}
	}
	if _, ok := pc.mutation.CollectedFeesToken1(); !ok {
		return &ValidationError{Name: "collected_fees_token1", err: errors.New(`ent: missing required field "collected_fees_token1"`)}
	}
	if _, ok := pc.mutation.FeeGrowthInside0LastX128(); !ok {
		return &ValidationError{Name: "fee_growth_inside0_lastX128", err: errors.New(`ent: missing required field "fee_growth_inside0_lastX128"`)}
	}
	if _, ok := pc.mutation.FeeGrowthInside1LastX128(); !ok {
		return &ValidationError{Name: "fee_growth_inside1_lastX128", err: errors.New(`ent: missing required field "fee_growth_inside1_lastX128"`)}
	}
	return nil
}

func (pc *PositionCreate) sqlSave(ctx context.Context) (*Position, error) {
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (pc *PositionCreate) createSpec() (*Position, *sqlgraph.CreateSpec) {
	var (
		_node = &Position{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: position.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: position.FieldID,
			},
		}
	)
	if value, ok := pc.mutation.Token(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: position.FieldToken,
		})
		_node.Token = value
	}
	if value, ok := pc.mutation.Owner(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: position.FieldOwner,
		})
		_node.Owner = value
	}
	if value, ok := pc.mutation.Pool(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: position.FieldPool,
		})
		_node.Pool = value
	}
	if value, ok := pc.mutation.Token0(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: position.FieldToken0,
		})
		_node.Token0 = value
	}
	if value, ok := pc.mutation.Token1(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: position.FieldToken1,
		})
		_node.Token1 = value
	}
	if value, ok := pc.mutation.TickLower(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: position.FieldTickLower,
		})
		_node.TickLower = value
	}
	if value, ok := pc.mutation.TickUpper(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: position.FieldTickUpper,
		})
		_node.TickUpper = value
	}
	if value, ok := pc.mutation.Liquidity(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: position.FieldLiquidity,
		})
		_node.Liquidity = value
	}
	if value, ok := pc.mutation.DepositedToken0(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: position.FieldDepositedToken0,
		})
		_node.DepositedToken0 = value
	}
	if value, ok := pc.mutation.DepositedToken1(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: position.FieldDepositedToken1,
		})
		_node.DepositedToken1 = value
	}
	if value, ok := pc.mutation.WithdrawnToken0(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: position.FieldWithdrawnToken0,
		})
		_node.WithdrawnToken0 = value
	}
	if value, ok := pc.mutation.WithdrawnToken1(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: position.FieldWithdrawnToken1,
		})
		_node.WithdrawnToken1 = value
	}
	if value, ok := pc.mutation.CollectedToken0(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: position.FieldCollectedToken0,
		})
		_node.CollectedToken0 = value
	}
	if value, ok := pc.mutation.CollectedToken1(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: position.FieldCollectedToken1,
		})
		_node.CollectedToken1 = value
	}
	if value, ok := pc.mutation.CollectedFeesToken0(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: position.FieldCollectedFeesToken0,
		})
		_node.CollectedFeesToken0 = value
	}
	if value, ok := pc.mutation.CollectedFeesToken1(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: position.FieldCollectedFeesToken1,
		})
		_node.CollectedFeesToken1 = value
	}
	if value, ok := pc.mutation.FeeGrowthInside0LastX128(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: position.FieldFeeGrowthInside0LastX128,
		})
		_node.FeeGrowthInside0LastX128 = value
	}
	if value, ok := pc.mutation.FeeGrowthInside1LastX128(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: position.FieldFeeGrowthInside1LastX128,
		})
		_node.FeeGrowthInside1LastX128 = value
	}
	return _node, _spec
}

// PositionCreateBulk is the builder for creating many Position entities in bulk.
type PositionCreateBulk struct {
	config
	builders []*PositionCreate
}

// Save creates the Position entities in the database.
func (pcb *PositionCreateBulk) Save(ctx context.Context) ([]*Position, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Position, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PositionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PositionCreateBulk) SaveX(ctx context.Context) []*Position {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PositionCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PositionCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
