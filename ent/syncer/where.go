// Code generated by entc, DO NOT EDIT.

package syncer

import (
	"entgo.io/ent/dialect/sql"
	"github.com/artmisxyz/legolas/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Syncer {
	return predicate.Syncer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Syncer {
	return predicate.Syncer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Syncer {
	return predicate.Syncer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Syncer {
	return predicate.Syncer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Syncer {
	return predicate.Syncer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Syncer {
	return predicate.Syncer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Syncer {
	return predicate.Syncer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Syncer {
	return predicate.Syncer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Syncer {
	return predicate.Syncer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Syncer {
	return predicate.Syncer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Start applies equality check predicate on the "start" field. It's identical to StartEQ.
func Start(v uint64) predicate.Syncer {
	return predicate.Syncer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStart), v))
	})
}

// Finish applies equality check predicate on the "finish" field. It's identical to FinishEQ.
func Finish(v uint64) predicate.Syncer {
	return predicate.Syncer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFinish), v))
	})
}

// Current applies equality check predicate on the "current" field. It's identical to CurrentEQ.
func Current(v uint64) predicate.Syncer {
	return predicate.Syncer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCurrent), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Syncer {
	return predicate.Syncer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Syncer {
	return predicate.Syncer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Syncer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Syncer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Syncer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Syncer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Syncer {
	return predicate.Syncer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Syncer {
	return predicate.Syncer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Syncer {
	return predicate.Syncer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Syncer {
	return predicate.Syncer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Syncer {
	return predicate.Syncer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Syncer {
	return predicate.Syncer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Syncer {
	return predicate.Syncer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Syncer {
	return predicate.Syncer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Syncer {
	return predicate.Syncer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// StartEQ applies the EQ predicate on the "start" field.
func StartEQ(v uint64) predicate.Syncer {
	return predicate.Syncer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStart), v))
	})
}

// StartNEQ applies the NEQ predicate on the "start" field.
func StartNEQ(v uint64) predicate.Syncer {
	return predicate.Syncer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStart), v))
	})
}

// StartIn applies the In predicate on the "start" field.
func StartIn(vs ...uint64) predicate.Syncer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Syncer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStart), v...))
	})
}

// StartNotIn applies the NotIn predicate on the "start" field.
func StartNotIn(vs ...uint64) predicate.Syncer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Syncer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStart), v...))
	})
}

// StartGT applies the GT predicate on the "start" field.
func StartGT(v uint64) predicate.Syncer {
	return predicate.Syncer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStart), v))
	})
}

// StartGTE applies the GTE predicate on the "start" field.
func StartGTE(v uint64) predicate.Syncer {
	return predicate.Syncer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStart), v))
	})
}

// StartLT applies the LT predicate on the "start" field.
func StartLT(v uint64) predicate.Syncer {
	return predicate.Syncer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStart), v))
	})
}

// StartLTE applies the LTE predicate on the "start" field.
func StartLTE(v uint64) predicate.Syncer {
	return predicate.Syncer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStart), v))
	})
}

// FinishEQ applies the EQ predicate on the "finish" field.
func FinishEQ(v uint64) predicate.Syncer {
	return predicate.Syncer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFinish), v))
	})
}

// FinishNEQ applies the NEQ predicate on the "finish" field.
func FinishNEQ(v uint64) predicate.Syncer {
	return predicate.Syncer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFinish), v))
	})
}

// FinishIn applies the In predicate on the "finish" field.
func FinishIn(vs ...uint64) predicate.Syncer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Syncer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFinish), v...))
	})
}

// FinishNotIn applies the NotIn predicate on the "finish" field.
func FinishNotIn(vs ...uint64) predicate.Syncer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Syncer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFinish), v...))
	})
}

// FinishGT applies the GT predicate on the "finish" field.
func FinishGT(v uint64) predicate.Syncer {
	return predicate.Syncer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFinish), v))
	})
}

// FinishGTE applies the GTE predicate on the "finish" field.
func FinishGTE(v uint64) predicate.Syncer {
	return predicate.Syncer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFinish), v))
	})
}

// FinishLT applies the LT predicate on the "finish" field.
func FinishLT(v uint64) predicate.Syncer {
	return predicate.Syncer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFinish), v))
	})
}

// FinishLTE applies the LTE predicate on the "finish" field.
func FinishLTE(v uint64) predicate.Syncer {
	return predicate.Syncer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFinish), v))
	})
}

// CurrentEQ applies the EQ predicate on the "current" field.
func CurrentEQ(v uint64) predicate.Syncer {
	return predicate.Syncer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCurrent), v))
	})
}

// CurrentNEQ applies the NEQ predicate on the "current" field.
func CurrentNEQ(v uint64) predicate.Syncer {
	return predicate.Syncer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCurrent), v))
	})
}

// CurrentIn applies the In predicate on the "current" field.
func CurrentIn(vs ...uint64) predicate.Syncer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Syncer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCurrent), v...))
	})
}

// CurrentNotIn applies the NotIn predicate on the "current" field.
func CurrentNotIn(vs ...uint64) predicate.Syncer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Syncer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCurrent), v...))
	})
}

// CurrentGT applies the GT predicate on the "current" field.
func CurrentGT(v uint64) predicate.Syncer {
	return predicate.Syncer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCurrent), v))
	})
}

// CurrentGTE applies the GTE predicate on the "current" field.
func CurrentGTE(v uint64) predicate.Syncer {
	return predicate.Syncer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCurrent), v))
	})
}

// CurrentLT applies the LT predicate on the "current" field.
func CurrentLT(v uint64) predicate.Syncer {
	return predicate.Syncer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCurrent), v))
	})
}

// CurrentLTE applies the LTE predicate on the "current" field.
func CurrentLTE(v uint64) predicate.Syncer {
	return predicate.Syncer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCurrent), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Syncer) predicate.Syncer {
	return predicate.Syncer(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Syncer) predicate.Syncer {
	return predicate.Syncer(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Syncer) predicate.Syncer {
	return predicate.Syncer(func(s *sql.Selector) {
		p(s.Not())
	})
}
