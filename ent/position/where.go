// Code generated by entc, DO NOT EDIT.

package position

import (
	"entgo.io/ent/dialect/sql"
	"github.com/artmisxyz/legolas/ent/predicate"
	"github.com/artmisxyz/legolas/ent/schema"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Token applies equality check predicate on the "token" field. It's identical to TokenEQ.
func Token(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldToken), v))
	})
}

// Owner applies equality check predicate on the "owner" field. It's identical to OwnerEQ.
func Owner(v []byte) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOwner), v))
	})
}

// Pool applies equality check predicate on the "pool" field. It's identical to PoolEQ.
func Pool(v []byte) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPool), v))
	})
}

// Token0 applies equality check predicate on the "token0" field. It's identical to Token0EQ.
func Token0(v []byte) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldToken0), v))
	})
}

// Token1 applies equality check predicate on the "token1" field. It's identical to Token1EQ.
func Token1(v []byte) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldToken1), v))
	})
}

// TickLower applies equality check predicate on the "tick_lower" field. It's identical to TickLowerEQ.
func TickLower(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTickLower), v))
	})
}

// TickUpper applies equality check predicate on the "tick_upper" field. It's identical to TickUpperEQ.
func TickUpper(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTickUpper), v))
	})
}

// Liquidity applies equality check predicate on the "liquidity" field. It's identical to LiquidityEQ.
func Liquidity(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLiquidity), v))
	})
}

// DepositedToken0 applies equality check predicate on the "deposited_token0" field. It's identical to DepositedToken0EQ.
func DepositedToken0(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDepositedToken0), v))
	})
}

// DepositedToken1 applies equality check predicate on the "deposited_token1" field. It's identical to DepositedToken1EQ.
func DepositedToken1(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDepositedToken1), v))
	})
}

// WithdrawnToken0 applies equality check predicate on the "withdrawn_token0" field. It's identical to WithdrawnToken0EQ.
func WithdrawnToken0(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWithdrawnToken0), v))
	})
}

// WithdrawnToken1 applies equality check predicate on the "withdrawn_token1" field. It's identical to WithdrawnToken1EQ.
func WithdrawnToken1(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWithdrawnToken1), v))
	})
}

// CollectedToken0 applies equality check predicate on the "collected_token0" field. It's identical to CollectedToken0EQ.
func CollectedToken0(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCollectedToken0), v))
	})
}

// CollectedToken1 applies equality check predicate on the "collected_token1" field. It's identical to CollectedToken1EQ.
func CollectedToken1(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCollectedToken1), v))
	})
}

// CollectedFeesToken0 applies equality check predicate on the "collected_fees_token0" field. It's identical to CollectedFeesToken0EQ.
func CollectedFeesToken0(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCollectedFeesToken0), v))
	})
}

// CollectedFeesToken1 applies equality check predicate on the "collected_fees_token1" field. It's identical to CollectedFeesToken1EQ.
func CollectedFeesToken1(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCollectedFeesToken1), v))
	})
}

// FeeGrowthInside0LastX128 applies equality check predicate on the "fee_growth_inside0_lastX128" field. It's identical to FeeGrowthInside0LastX128EQ.
func FeeGrowthInside0LastX128(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFeeGrowthInside0LastX128), v))
	})
}

// FeeGrowthInside1LastX128 applies equality check predicate on the "fee_growth_inside1_lastX128" field. It's identical to FeeGrowthInside1LastX128EQ.
func FeeGrowthInside1LastX128(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFeeGrowthInside1LastX128), v))
	})
}

// TokenEQ applies the EQ predicate on the "token" field.
func TokenEQ(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldToken), v))
	})
}

// TokenNEQ applies the NEQ predicate on the "token" field.
func TokenNEQ(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldToken), v))
	})
}

// TokenIn applies the In predicate on the "token" field.
func TokenIn(vs ...*schema.BigInt) predicate.Position {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Position(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldToken), v...))
	})
}

// TokenNotIn applies the NotIn predicate on the "token" field.
func TokenNotIn(vs ...*schema.BigInt) predicate.Position {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Position(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldToken), v...))
	})
}

// TokenGT applies the GT predicate on the "token" field.
func TokenGT(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldToken), v))
	})
}

// TokenGTE applies the GTE predicate on the "token" field.
func TokenGTE(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldToken), v))
	})
}

// TokenLT applies the LT predicate on the "token" field.
func TokenLT(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldToken), v))
	})
}

// TokenLTE applies the LTE predicate on the "token" field.
func TokenLTE(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldToken), v))
	})
}

// TokenContains applies the Contains predicate on the "token" field.
func TokenContains(v *schema.BigInt) predicate.Position {
	vc := v.String()
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldToken), vc))
	})
}

// TokenHasPrefix applies the HasPrefix predicate on the "token" field.
func TokenHasPrefix(v *schema.BigInt) predicate.Position {
	vc := v.String()
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldToken), vc))
	})
}

// TokenHasSuffix applies the HasSuffix predicate on the "token" field.
func TokenHasSuffix(v *schema.BigInt) predicate.Position {
	vc := v.String()
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldToken), vc))
	})
}

// TokenEqualFold applies the EqualFold predicate on the "token" field.
func TokenEqualFold(v *schema.BigInt) predicate.Position {
	vc := v.String()
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldToken), vc))
	})
}

// TokenContainsFold applies the ContainsFold predicate on the "token" field.
func TokenContainsFold(v *schema.BigInt) predicate.Position {
	vc := v.String()
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldToken), vc))
	})
}

// OwnerEQ applies the EQ predicate on the "owner" field.
func OwnerEQ(v []byte) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOwner), v))
	})
}

// OwnerNEQ applies the NEQ predicate on the "owner" field.
func OwnerNEQ(v []byte) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOwner), v))
	})
}

// OwnerIn applies the In predicate on the "owner" field.
func OwnerIn(vs ...[]byte) predicate.Position {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Position(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOwner), v...))
	})
}

// OwnerNotIn applies the NotIn predicate on the "owner" field.
func OwnerNotIn(vs ...[]byte) predicate.Position {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Position(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOwner), v...))
	})
}

// OwnerGT applies the GT predicate on the "owner" field.
func OwnerGT(v []byte) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOwner), v))
	})
}

// OwnerGTE applies the GTE predicate on the "owner" field.
func OwnerGTE(v []byte) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOwner), v))
	})
}

// OwnerLT applies the LT predicate on the "owner" field.
func OwnerLT(v []byte) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOwner), v))
	})
}

// OwnerLTE applies the LTE predicate on the "owner" field.
func OwnerLTE(v []byte) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOwner), v))
	})
}

// PoolEQ applies the EQ predicate on the "pool" field.
func PoolEQ(v []byte) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPool), v))
	})
}

// PoolNEQ applies the NEQ predicate on the "pool" field.
func PoolNEQ(v []byte) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPool), v))
	})
}

// PoolIn applies the In predicate on the "pool" field.
func PoolIn(vs ...[]byte) predicate.Position {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Position(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPool), v...))
	})
}

// PoolNotIn applies the NotIn predicate on the "pool" field.
func PoolNotIn(vs ...[]byte) predicate.Position {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Position(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPool), v...))
	})
}

// PoolGT applies the GT predicate on the "pool" field.
func PoolGT(v []byte) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPool), v))
	})
}

// PoolGTE applies the GTE predicate on the "pool" field.
func PoolGTE(v []byte) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPool), v))
	})
}

// PoolLT applies the LT predicate on the "pool" field.
func PoolLT(v []byte) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPool), v))
	})
}

// PoolLTE applies the LTE predicate on the "pool" field.
func PoolLTE(v []byte) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPool), v))
	})
}

// Token0EQ applies the EQ predicate on the "token0" field.
func Token0EQ(v []byte) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldToken0), v))
	})
}

// Token0NEQ applies the NEQ predicate on the "token0" field.
func Token0NEQ(v []byte) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldToken0), v))
	})
}

// Token0In applies the In predicate on the "token0" field.
func Token0In(vs ...[]byte) predicate.Position {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Position(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldToken0), v...))
	})
}

// Token0NotIn applies the NotIn predicate on the "token0" field.
func Token0NotIn(vs ...[]byte) predicate.Position {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Position(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldToken0), v...))
	})
}

// Token0GT applies the GT predicate on the "token0" field.
func Token0GT(v []byte) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldToken0), v))
	})
}

// Token0GTE applies the GTE predicate on the "token0" field.
func Token0GTE(v []byte) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldToken0), v))
	})
}

// Token0LT applies the LT predicate on the "token0" field.
func Token0LT(v []byte) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldToken0), v))
	})
}

// Token0LTE applies the LTE predicate on the "token0" field.
func Token0LTE(v []byte) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldToken0), v))
	})
}

// Token1EQ applies the EQ predicate on the "token1" field.
func Token1EQ(v []byte) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldToken1), v))
	})
}

// Token1NEQ applies the NEQ predicate on the "token1" field.
func Token1NEQ(v []byte) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldToken1), v))
	})
}

// Token1In applies the In predicate on the "token1" field.
func Token1In(vs ...[]byte) predicate.Position {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Position(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldToken1), v...))
	})
}

// Token1NotIn applies the NotIn predicate on the "token1" field.
func Token1NotIn(vs ...[]byte) predicate.Position {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Position(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldToken1), v...))
	})
}

// Token1GT applies the GT predicate on the "token1" field.
func Token1GT(v []byte) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldToken1), v))
	})
}

// Token1GTE applies the GTE predicate on the "token1" field.
func Token1GTE(v []byte) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldToken1), v))
	})
}

// Token1LT applies the LT predicate on the "token1" field.
func Token1LT(v []byte) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldToken1), v))
	})
}

// Token1LTE applies the LTE predicate on the "token1" field.
func Token1LTE(v []byte) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldToken1), v))
	})
}

// TickLowerEQ applies the EQ predicate on the "tick_lower" field.
func TickLowerEQ(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTickLower), v))
	})
}

// TickLowerNEQ applies the NEQ predicate on the "tick_lower" field.
func TickLowerNEQ(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTickLower), v))
	})
}

// TickLowerIn applies the In predicate on the "tick_lower" field.
func TickLowerIn(vs ...*schema.BigInt) predicate.Position {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Position(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTickLower), v...))
	})
}

// TickLowerNotIn applies the NotIn predicate on the "tick_lower" field.
func TickLowerNotIn(vs ...*schema.BigInt) predicate.Position {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Position(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTickLower), v...))
	})
}

// TickLowerGT applies the GT predicate on the "tick_lower" field.
func TickLowerGT(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTickLower), v))
	})
}

// TickLowerGTE applies the GTE predicate on the "tick_lower" field.
func TickLowerGTE(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTickLower), v))
	})
}

// TickLowerLT applies the LT predicate on the "tick_lower" field.
func TickLowerLT(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTickLower), v))
	})
}

// TickLowerLTE applies the LTE predicate on the "tick_lower" field.
func TickLowerLTE(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTickLower), v))
	})
}

// TickLowerContains applies the Contains predicate on the "tick_lower" field.
func TickLowerContains(v *schema.BigInt) predicate.Position {
	vc := v.String()
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTickLower), vc))
	})
}

// TickLowerHasPrefix applies the HasPrefix predicate on the "tick_lower" field.
func TickLowerHasPrefix(v *schema.BigInt) predicate.Position {
	vc := v.String()
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTickLower), vc))
	})
}

// TickLowerHasSuffix applies the HasSuffix predicate on the "tick_lower" field.
func TickLowerHasSuffix(v *schema.BigInt) predicate.Position {
	vc := v.String()
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTickLower), vc))
	})
}

// TickLowerEqualFold applies the EqualFold predicate on the "tick_lower" field.
func TickLowerEqualFold(v *schema.BigInt) predicate.Position {
	vc := v.String()
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTickLower), vc))
	})
}

// TickLowerContainsFold applies the ContainsFold predicate on the "tick_lower" field.
func TickLowerContainsFold(v *schema.BigInt) predicate.Position {
	vc := v.String()
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTickLower), vc))
	})
}

// TickUpperEQ applies the EQ predicate on the "tick_upper" field.
func TickUpperEQ(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTickUpper), v))
	})
}

// TickUpperNEQ applies the NEQ predicate on the "tick_upper" field.
func TickUpperNEQ(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTickUpper), v))
	})
}

// TickUpperIn applies the In predicate on the "tick_upper" field.
func TickUpperIn(vs ...*schema.BigInt) predicate.Position {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Position(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTickUpper), v...))
	})
}

// TickUpperNotIn applies the NotIn predicate on the "tick_upper" field.
func TickUpperNotIn(vs ...*schema.BigInt) predicate.Position {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Position(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTickUpper), v...))
	})
}

// TickUpperGT applies the GT predicate on the "tick_upper" field.
func TickUpperGT(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTickUpper), v))
	})
}

// TickUpperGTE applies the GTE predicate on the "tick_upper" field.
func TickUpperGTE(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTickUpper), v))
	})
}

// TickUpperLT applies the LT predicate on the "tick_upper" field.
func TickUpperLT(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTickUpper), v))
	})
}

// TickUpperLTE applies the LTE predicate on the "tick_upper" field.
func TickUpperLTE(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTickUpper), v))
	})
}

// TickUpperContains applies the Contains predicate on the "tick_upper" field.
func TickUpperContains(v *schema.BigInt) predicate.Position {
	vc := v.String()
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTickUpper), vc))
	})
}

// TickUpperHasPrefix applies the HasPrefix predicate on the "tick_upper" field.
func TickUpperHasPrefix(v *schema.BigInt) predicate.Position {
	vc := v.String()
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTickUpper), vc))
	})
}

// TickUpperHasSuffix applies the HasSuffix predicate on the "tick_upper" field.
func TickUpperHasSuffix(v *schema.BigInt) predicate.Position {
	vc := v.String()
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTickUpper), vc))
	})
}

// TickUpperEqualFold applies the EqualFold predicate on the "tick_upper" field.
func TickUpperEqualFold(v *schema.BigInt) predicate.Position {
	vc := v.String()
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTickUpper), vc))
	})
}

// TickUpperContainsFold applies the ContainsFold predicate on the "tick_upper" field.
func TickUpperContainsFold(v *schema.BigInt) predicate.Position {
	vc := v.String()
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTickUpper), vc))
	})
}

// LiquidityEQ applies the EQ predicate on the "liquidity" field.
func LiquidityEQ(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLiquidity), v))
	})
}

// LiquidityNEQ applies the NEQ predicate on the "liquidity" field.
func LiquidityNEQ(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLiquidity), v))
	})
}

// LiquidityIn applies the In predicate on the "liquidity" field.
func LiquidityIn(vs ...*schema.BigInt) predicate.Position {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Position(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLiquidity), v...))
	})
}

// LiquidityNotIn applies the NotIn predicate on the "liquidity" field.
func LiquidityNotIn(vs ...*schema.BigInt) predicate.Position {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Position(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLiquidity), v...))
	})
}

// LiquidityGT applies the GT predicate on the "liquidity" field.
func LiquidityGT(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLiquidity), v))
	})
}

// LiquidityGTE applies the GTE predicate on the "liquidity" field.
func LiquidityGTE(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLiquidity), v))
	})
}

// LiquidityLT applies the LT predicate on the "liquidity" field.
func LiquidityLT(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLiquidity), v))
	})
}

// LiquidityLTE applies the LTE predicate on the "liquidity" field.
func LiquidityLTE(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLiquidity), v))
	})
}

// LiquidityContains applies the Contains predicate on the "liquidity" field.
func LiquidityContains(v *schema.BigInt) predicate.Position {
	vc := v.String()
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLiquidity), vc))
	})
}

// LiquidityHasPrefix applies the HasPrefix predicate on the "liquidity" field.
func LiquidityHasPrefix(v *schema.BigInt) predicate.Position {
	vc := v.String()
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLiquidity), vc))
	})
}

// LiquidityHasSuffix applies the HasSuffix predicate on the "liquidity" field.
func LiquidityHasSuffix(v *schema.BigInt) predicate.Position {
	vc := v.String()
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLiquidity), vc))
	})
}

// LiquidityEqualFold applies the EqualFold predicate on the "liquidity" field.
func LiquidityEqualFold(v *schema.BigInt) predicate.Position {
	vc := v.String()
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLiquidity), vc))
	})
}

// LiquidityContainsFold applies the ContainsFold predicate on the "liquidity" field.
func LiquidityContainsFold(v *schema.BigInt) predicate.Position {
	vc := v.String()
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLiquidity), vc))
	})
}

// DepositedToken0EQ applies the EQ predicate on the "deposited_token0" field.
func DepositedToken0EQ(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDepositedToken0), v))
	})
}

// DepositedToken0NEQ applies the NEQ predicate on the "deposited_token0" field.
func DepositedToken0NEQ(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDepositedToken0), v))
	})
}

// DepositedToken0In applies the In predicate on the "deposited_token0" field.
func DepositedToken0In(vs ...*schema.BigInt) predicate.Position {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Position(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDepositedToken0), v...))
	})
}

// DepositedToken0NotIn applies the NotIn predicate on the "deposited_token0" field.
func DepositedToken0NotIn(vs ...*schema.BigInt) predicate.Position {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Position(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDepositedToken0), v...))
	})
}

// DepositedToken0GT applies the GT predicate on the "deposited_token0" field.
func DepositedToken0GT(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDepositedToken0), v))
	})
}

// DepositedToken0GTE applies the GTE predicate on the "deposited_token0" field.
func DepositedToken0GTE(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDepositedToken0), v))
	})
}

// DepositedToken0LT applies the LT predicate on the "deposited_token0" field.
func DepositedToken0LT(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDepositedToken0), v))
	})
}

// DepositedToken0LTE applies the LTE predicate on the "deposited_token0" field.
func DepositedToken0LTE(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDepositedToken0), v))
	})
}

// DepositedToken0Contains applies the Contains predicate on the "deposited_token0" field.
func DepositedToken0Contains(v *schema.BigInt) predicate.Position {
	vc := v.String()
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDepositedToken0), vc))
	})
}

// DepositedToken0HasPrefix applies the HasPrefix predicate on the "deposited_token0" field.
func DepositedToken0HasPrefix(v *schema.BigInt) predicate.Position {
	vc := v.String()
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDepositedToken0), vc))
	})
}

// DepositedToken0HasSuffix applies the HasSuffix predicate on the "deposited_token0" field.
func DepositedToken0HasSuffix(v *schema.BigInt) predicate.Position {
	vc := v.String()
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDepositedToken0), vc))
	})
}

// DepositedToken0EqualFold applies the EqualFold predicate on the "deposited_token0" field.
func DepositedToken0EqualFold(v *schema.BigInt) predicate.Position {
	vc := v.String()
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDepositedToken0), vc))
	})
}

// DepositedToken0ContainsFold applies the ContainsFold predicate on the "deposited_token0" field.
func DepositedToken0ContainsFold(v *schema.BigInt) predicate.Position {
	vc := v.String()
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDepositedToken0), vc))
	})
}

// DepositedToken1EQ applies the EQ predicate on the "deposited_token1" field.
func DepositedToken1EQ(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDepositedToken1), v))
	})
}

// DepositedToken1NEQ applies the NEQ predicate on the "deposited_token1" field.
func DepositedToken1NEQ(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDepositedToken1), v))
	})
}

// DepositedToken1In applies the In predicate on the "deposited_token1" field.
func DepositedToken1In(vs ...*schema.BigInt) predicate.Position {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Position(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDepositedToken1), v...))
	})
}

// DepositedToken1NotIn applies the NotIn predicate on the "deposited_token1" field.
func DepositedToken1NotIn(vs ...*schema.BigInt) predicate.Position {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Position(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDepositedToken1), v...))
	})
}

// DepositedToken1GT applies the GT predicate on the "deposited_token1" field.
func DepositedToken1GT(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDepositedToken1), v))
	})
}

// DepositedToken1GTE applies the GTE predicate on the "deposited_token1" field.
func DepositedToken1GTE(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDepositedToken1), v))
	})
}

// DepositedToken1LT applies the LT predicate on the "deposited_token1" field.
func DepositedToken1LT(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDepositedToken1), v))
	})
}

// DepositedToken1LTE applies the LTE predicate on the "deposited_token1" field.
func DepositedToken1LTE(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDepositedToken1), v))
	})
}

// DepositedToken1Contains applies the Contains predicate on the "deposited_token1" field.
func DepositedToken1Contains(v *schema.BigInt) predicate.Position {
	vc := v.String()
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDepositedToken1), vc))
	})
}

// DepositedToken1HasPrefix applies the HasPrefix predicate on the "deposited_token1" field.
func DepositedToken1HasPrefix(v *schema.BigInt) predicate.Position {
	vc := v.String()
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDepositedToken1), vc))
	})
}

// DepositedToken1HasSuffix applies the HasSuffix predicate on the "deposited_token1" field.
func DepositedToken1HasSuffix(v *schema.BigInt) predicate.Position {
	vc := v.String()
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDepositedToken1), vc))
	})
}

// DepositedToken1EqualFold applies the EqualFold predicate on the "deposited_token1" field.
func DepositedToken1EqualFold(v *schema.BigInt) predicate.Position {
	vc := v.String()
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDepositedToken1), vc))
	})
}

// DepositedToken1ContainsFold applies the ContainsFold predicate on the "deposited_token1" field.
func DepositedToken1ContainsFold(v *schema.BigInt) predicate.Position {
	vc := v.String()
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDepositedToken1), vc))
	})
}

// WithdrawnToken0EQ applies the EQ predicate on the "withdrawn_token0" field.
func WithdrawnToken0EQ(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWithdrawnToken0), v))
	})
}

// WithdrawnToken0NEQ applies the NEQ predicate on the "withdrawn_token0" field.
func WithdrawnToken0NEQ(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWithdrawnToken0), v))
	})
}

// WithdrawnToken0In applies the In predicate on the "withdrawn_token0" field.
func WithdrawnToken0In(vs ...*schema.BigInt) predicate.Position {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Position(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldWithdrawnToken0), v...))
	})
}

// WithdrawnToken0NotIn applies the NotIn predicate on the "withdrawn_token0" field.
func WithdrawnToken0NotIn(vs ...*schema.BigInt) predicate.Position {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Position(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldWithdrawnToken0), v...))
	})
}

// WithdrawnToken0GT applies the GT predicate on the "withdrawn_token0" field.
func WithdrawnToken0GT(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWithdrawnToken0), v))
	})
}

// WithdrawnToken0GTE applies the GTE predicate on the "withdrawn_token0" field.
func WithdrawnToken0GTE(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWithdrawnToken0), v))
	})
}

// WithdrawnToken0LT applies the LT predicate on the "withdrawn_token0" field.
func WithdrawnToken0LT(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWithdrawnToken0), v))
	})
}

// WithdrawnToken0LTE applies the LTE predicate on the "withdrawn_token0" field.
func WithdrawnToken0LTE(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWithdrawnToken0), v))
	})
}

// WithdrawnToken0Contains applies the Contains predicate on the "withdrawn_token0" field.
func WithdrawnToken0Contains(v *schema.BigInt) predicate.Position {
	vc := v.String()
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldWithdrawnToken0), vc))
	})
}

// WithdrawnToken0HasPrefix applies the HasPrefix predicate on the "withdrawn_token0" field.
func WithdrawnToken0HasPrefix(v *schema.BigInt) predicate.Position {
	vc := v.String()
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldWithdrawnToken0), vc))
	})
}

// WithdrawnToken0HasSuffix applies the HasSuffix predicate on the "withdrawn_token0" field.
func WithdrawnToken0HasSuffix(v *schema.BigInt) predicate.Position {
	vc := v.String()
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldWithdrawnToken0), vc))
	})
}

// WithdrawnToken0EqualFold applies the EqualFold predicate on the "withdrawn_token0" field.
func WithdrawnToken0EqualFold(v *schema.BigInt) predicate.Position {
	vc := v.String()
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldWithdrawnToken0), vc))
	})
}

// WithdrawnToken0ContainsFold applies the ContainsFold predicate on the "withdrawn_token0" field.
func WithdrawnToken0ContainsFold(v *schema.BigInt) predicate.Position {
	vc := v.String()
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldWithdrawnToken0), vc))
	})
}

// WithdrawnToken1EQ applies the EQ predicate on the "withdrawn_token1" field.
func WithdrawnToken1EQ(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWithdrawnToken1), v))
	})
}

// WithdrawnToken1NEQ applies the NEQ predicate on the "withdrawn_token1" field.
func WithdrawnToken1NEQ(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWithdrawnToken1), v))
	})
}

// WithdrawnToken1In applies the In predicate on the "withdrawn_token1" field.
func WithdrawnToken1In(vs ...*schema.BigInt) predicate.Position {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Position(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldWithdrawnToken1), v...))
	})
}

// WithdrawnToken1NotIn applies the NotIn predicate on the "withdrawn_token1" field.
func WithdrawnToken1NotIn(vs ...*schema.BigInt) predicate.Position {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Position(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldWithdrawnToken1), v...))
	})
}

// WithdrawnToken1GT applies the GT predicate on the "withdrawn_token1" field.
func WithdrawnToken1GT(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWithdrawnToken1), v))
	})
}

// WithdrawnToken1GTE applies the GTE predicate on the "withdrawn_token1" field.
func WithdrawnToken1GTE(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWithdrawnToken1), v))
	})
}

// WithdrawnToken1LT applies the LT predicate on the "withdrawn_token1" field.
func WithdrawnToken1LT(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWithdrawnToken1), v))
	})
}

// WithdrawnToken1LTE applies the LTE predicate on the "withdrawn_token1" field.
func WithdrawnToken1LTE(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWithdrawnToken1), v))
	})
}

// WithdrawnToken1Contains applies the Contains predicate on the "withdrawn_token1" field.
func WithdrawnToken1Contains(v *schema.BigInt) predicate.Position {
	vc := v.String()
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldWithdrawnToken1), vc))
	})
}

// WithdrawnToken1HasPrefix applies the HasPrefix predicate on the "withdrawn_token1" field.
func WithdrawnToken1HasPrefix(v *schema.BigInt) predicate.Position {
	vc := v.String()
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldWithdrawnToken1), vc))
	})
}

// WithdrawnToken1HasSuffix applies the HasSuffix predicate on the "withdrawn_token1" field.
func WithdrawnToken1HasSuffix(v *schema.BigInt) predicate.Position {
	vc := v.String()
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldWithdrawnToken1), vc))
	})
}

// WithdrawnToken1EqualFold applies the EqualFold predicate on the "withdrawn_token1" field.
func WithdrawnToken1EqualFold(v *schema.BigInt) predicate.Position {
	vc := v.String()
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldWithdrawnToken1), vc))
	})
}

// WithdrawnToken1ContainsFold applies the ContainsFold predicate on the "withdrawn_token1" field.
func WithdrawnToken1ContainsFold(v *schema.BigInt) predicate.Position {
	vc := v.String()
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldWithdrawnToken1), vc))
	})
}

// CollectedToken0EQ applies the EQ predicate on the "collected_token0" field.
func CollectedToken0EQ(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCollectedToken0), v))
	})
}

// CollectedToken0NEQ applies the NEQ predicate on the "collected_token0" field.
func CollectedToken0NEQ(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCollectedToken0), v))
	})
}

// CollectedToken0In applies the In predicate on the "collected_token0" field.
func CollectedToken0In(vs ...*schema.BigInt) predicate.Position {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Position(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCollectedToken0), v...))
	})
}

// CollectedToken0NotIn applies the NotIn predicate on the "collected_token0" field.
func CollectedToken0NotIn(vs ...*schema.BigInt) predicate.Position {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Position(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCollectedToken0), v...))
	})
}

// CollectedToken0GT applies the GT predicate on the "collected_token0" field.
func CollectedToken0GT(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCollectedToken0), v))
	})
}

// CollectedToken0GTE applies the GTE predicate on the "collected_token0" field.
func CollectedToken0GTE(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCollectedToken0), v))
	})
}

// CollectedToken0LT applies the LT predicate on the "collected_token0" field.
func CollectedToken0LT(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCollectedToken0), v))
	})
}

// CollectedToken0LTE applies the LTE predicate on the "collected_token0" field.
func CollectedToken0LTE(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCollectedToken0), v))
	})
}

// CollectedToken0Contains applies the Contains predicate on the "collected_token0" field.
func CollectedToken0Contains(v *schema.BigInt) predicate.Position {
	vc := v.String()
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCollectedToken0), vc))
	})
}

// CollectedToken0HasPrefix applies the HasPrefix predicate on the "collected_token0" field.
func CollectedToken0HasPrefix(v *schema.BigInt) predicate.Position {
	vc := v.String()
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCollectedToken0), vc))
	})
}

// CollectedToken0HasSuffix applies the HasSuffix predicate on the "collected_token0" field.
func CollectedToken0HasSuffix(v *schema.BigInt) predicate.Position {
	vc := v.String()
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCollectedToken0), vc))
	})
}

// CollectedToken0EqualFold applies the EqualFold predicate on the "collected_token0" field.
func CollectedToken0EqualFold(v *schema.BigInt) predicate.Position {
	vc := v.String()
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCollectedToken0), vc))
	})
}

// CollectedToken0ContainsFold applies the ContainsFold predicate on the "collected_token0" field.
func CollectedToken0ContainsFold(v *schema.BigInt) predicate.Position {
	vc := v.String()
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCollectedToken0), vc))
	})
}

// CollectedToken1EQ applies the EQ predicate on the "collected_token1" field.
func CollectedToken1EQ(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCollectedToken1), v))
	})
}

// CollectedToken1NEQ applies the NEQ predicate on the "collected_token1" field.
func CollectedToken1NEQ(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCollectedToken1), v))
	})
}

// CollectedToken1In applies the In predicate on the "collected_token1" field.
func CollectedToken1In(vs ...*schema.BigInt) predicate.Position {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Position(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCollectedToken1), v...))
	})
}

// CollectedToken1NotIn applies the NotIn predicate on the "collected_token1" field.
func CollectedToken1NotIn(vs ...*schema.BigInt) predicate.Position {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Position(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCollectedToken1), v...))
	})
}

// CollectedToken1GT applies the GT predicate on the "collected_token1" field.
func CollectedToken1GT(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCollectedToken1), v))
	})
}

// CollectedToken1GTE applies the GTE predicate on the "collected_token1" field.
func CollectedToken1GTE(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCollectedToken1), v))
	})
}

// CollectedToken1LT applies the LT predicate on the "collected_token1" field.
func CollectedToken1LT(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCollectedToken1), v))
	})
}

// CollectedToken1LTE applies the LTE predicate on the "collected_token1" field.
func CollectedToken1LTE(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCollectedToken1), v))
	})
}

// CollectedToken1Contains applies the Contains predicate on the "collected_token1" field.
func CollectedToken1Contains(v *schema.BigInt) predicate.Position {
	vc := v.String()
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCollectedToken1), vc))
	})
}

// CollectedToken1HasPrefix applies the HasPrefix predicate on the "collected_token1" field.
func CollectedToken1HasPrefix(v *schema.BigInt) predicate.Position {
	vc := v.String()
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCollectedToken1), vc))
	})
}

// CollectedToken1HasSuffix applies the HasSuffix predicate on the "collected_token1" field.
func CollectedToken1HasSuffix(v *schema.BigInt) predicate.Position {
	vc := v.String()
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCollectedToken1), vc))
	})
}

// CollectedToken1EqualFold applies the EqualFold predicate on the "collected_token1" field.
func CollectedToken1EqualFold(v *schema.BigInt) predicate.Position {
	vc := v.String()
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCollectedToken1), vc))
	})
}

// CollectedToken1ContainsFold applies the ContainsFold predicate on the "collected_token1" field.
func CollectedToken1ContainsFold(v *schema.BigInt) predicate.Position {
	vc := v.String()
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCollectedToken1), vc))
	})
}

// CollectedFeesToken0EQ applies the EQ predicate on the "collected_fees_token0" field.
func CollectedFeesToken0EQ(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCollectedFeesToken0), v))
	})
}

// CollectedFeesToken0NEQ applies the NEQ predicate on the "collected_fees_token0" field.
func CollectedFeesToken0NEQ(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCollectedFeesToken0), v))
	})
}

// CollectedFeesToken0In applies the In predicate on the "collected_fees_token0" field.
func CollectedFeesToken0In(vs ...*schema.BigInt) predicate.Position {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Position(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCollectedFeesToken0), v...))
	})
}

// CollectedFeesToken0NotIn applies the NotIn predicate on the "collected_fees_token0" field.
func CollectedFeesToken0NotIn(vs ...*schema.BigInt) predicate.Position {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Position(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCollectedFeesToken0), v...))
	})
}

// CollectedFeesToken0GT applies the GT predicate on the "collected_fees_token0" field.
func CollectedFeesToken0GT(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCollectedFeesToken0), v))
	})
}

// CollectedFeesToken0GTE applies the GTE predicate on the "collected_fees_token0" field.
func CollectedFeesToken0GTE(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCollectedFeesToken0), v))
	})
}

// CollectedFeesToken0LT applies the LT predicate on the "collected_fees_token0" field.
func CollectedFeesToken0LT(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCollectedFeesToken0), v))
	})
}

// CollectedFeesToken0LTE applies the LTE predicate on the "collected_fees_token0" field.
func CollectedFeesToken0LTE(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCollectedFeesToken0), v))
	})
}

// CollectedFeesToken0Contains applies the Contains predicate on the "collected_fees_token0" field.
func CollectedFeesToken0Contains(v *schema.BigInt) predicate.Position {
	vc := v.String()
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCollectedFeesToken0), vc))
	})
}

// CollectedFeesToken0HasPrefix applies the HasPrefix predicate on the "collected_fees_token0" field.
func CollectedFeesToken0HasPrefix(v *schema.BigInt) predicate.Position {
	vc := v.String()
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCollectedFeesToken0), vc))
	})
}

// CollectedFeesToken0HasSuffix applies the HasSuffix predicate on the "collected_fees_token0" field.
func CollectedFeesToken0HasSuffix(v *schema.BigInt) predicate.Position {
	vc := v.String()
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCollectedFeesToken0), vc))
	})
}

// CollectedFeesToken0EqualFold applies the EqualFold predicate on the "collected_fees_token0" field.
func CollectedFeesToken0EqualFold(v *schema.BigInt) predicate.Position {
	vc := v.String()
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCollectedFeesToken0), vc))
	})
}

// CollectedFeesToken0ContainsFold applies the ContainsFold predicate on the "collected_fees_token0" field.
func CollectedFeesToken0ContainsFold(v *schema.BigInt) predicate.Position {
	vc := v.String()
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCollectedFeesToken0), vc))
	})
}

// CollectedFeesToken1EQ applies the EQ predicate on the "collected_fees_token1" field.
func CollectedFeesToken1EQ(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCollectedFeesToken1), v))
	})
}

// CollectedFeesToken1NEQ applies the NEQ predicate on the "collected_fees_token1" field.
func CollectedFeesToken1NEQ(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCollectedFeesToken1), v))
	})
}

// CollectedFeesToken1In applies the In predicate on the "collected_fees_token1" field.
func CollectedFeesToken1In(vs ...*schema.BigInt) predicate.Position {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Position(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCollectedFeesToken1), v...))
	})
}

// CollectedFeesToken1NotIn applies the NotIn predicate on the "collected_fees_token1" field.
func CollectedFeesToken1NotIn(vs ...*schema.BigInt) predicate.Position {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Position(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCollectedFeesToken1), v...))
	})
}

// CollectedFeesToken1GT applies the GT predicate on the "collected_fees_token1" field.
func CollectedFeesToken1GT(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCollectedFeesToken1), v))
	})
}

// CollectedFeesToken1GTE applies the GTE predicate on the "collected_fees_token1" field.
func CollectedFeesToken1GTE(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCollectedFeesToken1), v))
	})
}

// CollectedFeesToken1LT applies the LT predicate on the "collected_fees_token1" field.
func CollectedFeesToken1LT(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCollectedFeesToken1), v))
	})
}

// CollectedFeesToken1LTE applies the LTE predicate on the "collected_fees_token1" field.
func CollectedFeesToken1LTE(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCollectedFeesToken1), v))
	})
}

// CollectedFeesToken1Contains applies the Contains predicate on the "collected_fees_token1" field.
func CollectedFeesToken1Contains(v *schema.BigInt) predicate.Position {
	vc := v.String()
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCollectedFeesToken1), vc))
	})
}

// CollectedFeesToken1HasPrefix applies the HasPrefix predicate on the "collected_fees_token1" field.
func CollectedFeesToken1HasPrefix(v *schema.BigInt) predicate.Position {
	vc := v.String()
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCollectedFeesToken1), vc))
	})
}

// CollectedFeesToken1HasSuffix applies the HasSuffix predicate on the "collected_fees_token1" field.
func CollectedFeesToken1HasSuffix(v *schema.BigInt) predicate.Position {
	vc := v.String()
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCollectedFeesToken1), vc))
	})
}

// CollectedFeesToken1EqualFold applies the EqualFold predicate on the "collected_fees_token1" field.
func CollectedFeesToken1EqualFold(v *schema.BigInt) predicate.Position {
	vc := v.String()
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCollectedFeesToken1), vc))
	})
}

// CollectedFeesToken1ContainsFold applies the ContainsFold predicate on the "collected_fees_token1" field.
func CollectedFeesToken1ContainsFold(v *schema.BigInt) predicate.Position {
	vc := v.String()
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCollectedFeesToken1), vc))
	})
}

// FeeGrowthInside0LastX128EQ applies the EQ predicate on the "fee_growth_inside0_lastX128" field.
func FeeGrowthInside0LastX128EQ(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFeeGrowthInside0LastX128), v))
	})
}

// FeeGrowthInside0LastX128NEQ applies the NEQ predicate on the "fee_growth_inside0_lastX128" field.
func FeeGrowthInside0LastX128NEQ(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFeeGrowthInside0LastX128), v))
	})
}

// FeeGrowthInside0LastX128In applies the In predicate on the "fee_growth_inside0_lastX128" field.
func FeeGrowthInside0LastX128In(vs ...*schema.BigInt) predicate.Position {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Position(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFeeGrowthInside0LastX128), v...))
	})
}

// FeeGrowthInside0LastX128NotIn applies the NotIn predicate on the "fee_growth_inside0_lastX128" field.
func FeeGrowthInside0LastX128NotIn(vs ...*schema.BigInt) predicate.Position {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Position(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFeeGrowthInside0LastX128), v...))
	})
}

// FeeGrowthInside0LastX128GT applies the GT predicate on the "fee_growth_inside0_lastX128" field.
func FeeGrowthInside0LastX128GT(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFeeGrowthInside0LastX128), v))
	})
}

// FeeGrowthInside0LastX128GTE applies the GTE predicate on the "fee_growth_inside0_lastX128" field.
func FeeGrowthInside0LastX128GTE(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFeeGrowthInside0LastX128), v))
	})
}

// FeeGrowthInside0LastX128LT applies the LT predicate on the "fee_growth_inside0_lastX128" field.
func FeeGrowthInside0LastX128LT(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFeeGrowthInside0LastX128), v))
	})
}

// FeeGrowthInside0LastX128LTE applies the LTE predicate on the "fee_growth_inside0_lastX128" field.
func FeeGrowthInside0LastX128LTE(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFeeGrowthInside0LastX128), v))
	})
}

// FeeGrowthInside0LastX128Contains applies the Contains predicate on the "fee_growth_inside0_lastX128" field.
func FeeGrowthInside0LastX128Contains(v *schema.BigInt) predicate.Position {
	vc := v.String()
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFeeGrowthInside0LastX128), vc))
	})
}

// FeeGrowthInside0LastX128HasPrefix applies the HasPrefix predicate on the "fee_growth_inside0_lastX128" field.
func FeeGrowthInside0LastX128HasPrefix(v *schema.BigInt) predicate.Position {
	vc := v.String()
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFeeGrowthInside0LastX128), vc))
	})
}

// FeeGrowthInside0LastX128HasSuffix applies the HasSuffix predicate on the "fee_growth_inside0_lastX128" field.
func FeeGrowthInside0LastX128HasSuffix(v *schema.BigInt) predicate.Position {
	vc := v.String()
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFeeGrowthInside0LastX128), vc))
	})
}

// FeeGrowthInside0LastX128EqualFold applies the EqualFold predicate on the "fee_growth_inside0_lastX128" field.
func FeeGrowthInside0LastX128EqualFold(v *schema.BigInt) predicate.Position {
	vc := v.String()
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFeeGrowthInside0LastX128), vc))
	})
}

// FeeGrowthInside0LastX128ContainsFold applies the ContainsFold predicate on the "fee_growth_inside0_lastX128" field.
func FeeGrowthInside0LastX128ContainsFold(v *schema.BigInt) predicate.Position {
	vc := v.String()
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFeeGrowthInside0LastX128), vc))
	})
}

// FeeGrowthInside1LastX128EQ applies the EQ predicate on the "fee_growth_inside1_lastX128" field.
func FeeGrowthInside1LastX128EQ(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFeeGrowthInside1LastX128), v))
	})
}

// FeeGrowthInside1LastX128NEQ applies the NEQ predicate on the "fee_growth_inside1_lastX128" field.
func FeeGrowthInside1LastX128NEQ(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFeeGrowthInside1LastX128), v))
	})
}

// FeeGrowthInside1LastX128In applies the In predicate on the "fee_growth_inside1_lastX128" field.
func FeeGrowthInside1LastX128In(vs ...*schema.BigInt) predicate.Position {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Position(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFeeGrowthInside1LastX128), v...))
	})
}

// FeeGrowthInside1LastX128NotIn applies the NotIn predicate on the "fee_growth_inside1_lastX128" field.
func FeeGrowthInside1LastX128NotIn(vs ...*schema.BigInt) predicate.Position {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Position(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFeeGrowthInside1LastX128), v...))
	})
}

// FeeGrowthInside1LastX128GT applies the GT predicate on the "fee_growth_inside1_lastX128" field.
func FeeGrowthInside1LastX128GT(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFeeGrowthInside1LastX128), v))
	})
}

// FeeGrowthInside1LastX128GTE applies the GTE predicate on the "fee_growth_inside1_lastX128" field.
func FeeGrowthInside1LastX128GTE(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFeeGrowthInside1LastX128), v))
	})
}

// FeeGrowthInside1LastX128LT applies the LT predicate on the "fee_growth_inside1_lastX128" field.
func FeeGrowthInside1LastX128LT(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFeeGrowthInside1LastX128), v))
	})
}

// FeeGrowthInside1LastX128LTE applies the LTE predicate on the "fee_growth_inside1_lastX128" field.
func FeeGrowthInside1LastX128LTE(v *schema.BigInt) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFeeGrowthInside1LastX128), v))
	})
}

// FeeGrowthInside1LastX128Contains applies the Contains predicate on the "fee_growth_inside1_lastX128" field.
func FeeGrowthInside1LastX128Contains(v *schema.BigInt) predicate.Position {
	vc := v.String()
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFeeGrowthInside1LastX128), vc))
	})
}

// FeeGrowthInside1LastX128HasPrefix applies the HasPrefix predicate on the "fee_growth_inside1_lastX128" field.
func FeeGrowthInside1LastX128HasPrefix(v *schema.BigInt) predicate.Position {
	vc := v.String()
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFeeGrowthInside1LastX128), vc))
	})
}

// FeeGrowthInside1LastX128HasSuffix applies the HasSuffix predicate on the "fee_growth_inside1_lastX128" field.
func FeeGrowthInside1LastX128HasSuffix(v *schema.BigInt) predicate.Position {
	vc := v.String()
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFeeGrowthInside1LastX128), vc))
	})
}

// FeeGrowthInside1LastX128EqualFold applies the EqualFold predicate on the "fee_growth_inside1_lastX128" field.
func FeeGrowthInside1LastX128EqualFold(v *schema.BigInt) predicate.Position {
	vc := v.String()
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFeeGrowthInside1LastX128), vc))
	})
}

// FeeGrowthInside1LastX128ContainsFold applies the ContainsFold predicate on the "fee_growth_inside1_lastX128" field.
func FeeGrowthInside1LastX128ContainsFold(v *schema.BigInt) predicate.Position {
	vc := v.String()
	return predicate.Position(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFeeGrowthInside1LastX128), vc))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Position) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Position) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Position) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		p(s.Not())
	})
}
