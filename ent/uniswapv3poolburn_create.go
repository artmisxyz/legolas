// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/artmisxyz/blockinspector/ent/event"
	"github.com/artmisxyz/blockinspector/ent/schema"
	"github.com/artmisxyz/blockinspector/ent/uniswapv3poolburn"
)

// UniswapV3PoolBurnCreate is the builder for creating a UniswapV3PoolBurn entity.
type UniswapV3PoolBurnCreate struct {
	config
	mutation *UniswapV3PoolBurnMutation
	hooks    []Hook
}

// SetOwner sets the "owner" field.
func (uvbc *UniswapV3PoolBurnCreate) SetOwner(s string) *UniswapV3PoolBurnCreate {
	uvbc.mutation.SetOwner(s)
	return uvbc
}

// SetTickLower sets the "tick_lower" field.
func (uvbc *UniswapV3PoolBurnCreate) SetTickLower(si *schema.BigInt) *UniswapV3PoolBurnCreate {
	uvbc.mutation.SetTickLower(si)
	return uvbc
}

// SetTickUpper sets the "tick_upper" field.
func (uvbc *UniswapV3PoolBurnCreate) SetTickUpper(si *schema.BigInt) *UniswapV3PoolBurnCreate {
	uvbc.mutation.SetTickUpper(si)
	return uvbc
}

// SetAmount sets the "amount" field.
func (uvbc *UniswapV3PoolBurnCreate) SetAmount(si *schema.BigInt) *UniswapV3PoolBurnCreate {
	uvbc.mutation.SetAmount(si)
	return uvbc
}

// SetAmount0 sets the "amount0" field.
func (uvbc *UniswapV3PoolBurnCreate) SetAmount0(si *schema.BigInt) *UniswapV3PoolBurnCreate {
	uvbc.mutation.SetAmount0(si)
	return uvbc
}

// SetAmount1 sets the "amount1" field.
func (uvbc *UniswapV3PoolBurnCreate) SetAmount1(si *schema.BigInt) *UniswapV3PoolBurnCreate {
	uvbc.mutation.SetAmount1(si)
	return uvbc
}

// SetEventID sets the "event" edge to the Event entity by ID.
func (uvbc *UniswapV3PoolBurnCreate) SetEventID(id int) *UniswapV3PoolBurnCreate {
	uvbc.mutation.SetEventID(id)
	return uvbc
}

// SetEvent sets the "event" edge to the Event entity.
func (uvbc *UniswapV3PoolBurnCreate) SetEvent(e *Event) *UniswapV3PoolBurnCreate {
	return uvbc.SetEventID(e.ID)
}

// Mutation returns the UniswapV3PoolBurnMutation object of the builder.
func (uvbc *UniswapV3PoolBurnCreate) Mutation() *UniswapV3PoolBurnMutation {
	return uvbc.mutation
}

// Save creates the UniswapV3PoolBurn in the database.
func (uvbc *UniswapV3PoolBurnCreate) Save(ctx context.Context) (*UniswapV3PoolBurn, error) {
	var (
		err  error
		node *UniswapV3PoolBurn
	)
	if len(uvbc.hooks) == 0 {
		if err = uvbc.check(); err != nil {
			return nil, err
		}
		node, err = uvbc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UniswapV3PoolBurnMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uvbc.check(); err != nil {
				return nil, err
			}
			uvbc.mutation = mutation
			if node, err = uvbc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(uvbc.hooks) - 1; i >= 0; i-- {
			if uvbc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uvbc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uvbc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (uvbc *UniswapV3PoolBurnCreate) SaveX(ctx context.Context) *UniswapV3PoolBurn {
	v, err := uvbc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uvbc *UniswapV3PoolBurnCreate) Exec(ctx context.Context) error {
	_, err := uvbc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uvbc *UniswapV3PoolBurnCreate) ExecX(ctx context.Context) {
	if err := uvbc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uvbc *UniswapV3PoolBurnCreate) check() error {
	if _, ok := uvbc.mutation.Owner(); !ok {
		return &ValidationError{Name: "owner", err: errors.New(`ent: missing required field "owner"`)}
	}
	if v, ok := uvbc.mutation.Owner(); ok {
		if err := uniswapv3poolburn.OwnerValidator(v); err != nil {
			return &ValidationError{Name: "owner", err: fmt.Errorf(`ent: validator failed for field "owner": %w`, err)}
		}
	}
	if _, ok := uvbc.mutation.TickLower(); !ok {
		return &ValidationError{Name: "tick_lower", err: errors.New(`ent: missing required field "tick_lower"`)}
	}
	if _, ok := uvbc.mutation.TickUpper(); !ok {
		return &ValidationError{Name: "tick_upper", err: errors.New(`ent: missing required field "tick_upper"`)}
	}
	if _, ok := uvbc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "amount"`)}
	}
	if _, ok := uvbc.mutation.Amount0(); !ok {
		return &ValidationError{Name: "amount0", err: errors.New(`ent: missing required field "amount0"`)}
	}
	if _, ok := uvbc.mutation.Amount1(); !ok {
		return &ValidationError{Name: "amount1", err: errors.New(`ent: missing required field "amount1"`)}
	}
	if _, ok := uvbc.mutation.EventID(); !ok {
		return &ValidationError{Name: "event", err: errors.New("ent: missing required edge \"event\"")}
	}
	return nil
}

func (uvbc *UniswapV3PoolBurnCreate) sqlSave(ctx context.Context) (*UniswapV3PoolBurn, error) {
	_node, _spec := uvbc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uvbc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (uvbc *UniswapV3PoolBurnCreate) createSpec() (*UniswapV3PoolBurn, *sqlgraph.CreateSpec) {
	var (
		_node = &UniswapV3PoolBurn{config: uvbc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: uniswapv3poolburn.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: uniswapv3poolburn.FieldID,
			},
		}
	)
	if value, ok := uvbc.mutation.Owner(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: uniswapv3poolburn.FieldOwner,
		})
		_node.Owner = value
	}
	if value, ok := uvbc.mutation.TickLower(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: uniswapv3poolburn.FieldTickLower,
		})
		_node.TickLower = value
	}
	if value, ok := uvbc.mutation.TickUpper(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: uniswapv3poolburn.FieldTickUpper,
		})
		_node.TickUpper = value
	}
	if value, ok := uvbc.mutation.Amount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: uniswapv3poolburn.FieldAmount,
		})
		_node.Amount = value
	}
	if value, ok := uvbc.mutation.Amount0(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: uniswapv3poolburn.FieldAmount0,
		})
		_node.Amount0 = value
	}
	if value, ok := uvbc.mutation.Amount1(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: uniswapv3poolburn.FieldAmount1,
		})
		_node.Amount1 = value
	}
	if nodes := uvbc.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   uniswapv3poolburn.EventTable,
			Columns: []string{uniswapv3poolburn.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.event_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UniswapV3PoolBurnCreateBulk is the builder for creating many UniswapV3PoolBurn entities in bulk.
type UniswapV3PoolBurnCreateBulk struct {
	config
	builders []*UniswapV3PoolBurnCreate
}

// Save creates the UniswapV3PoolBurn entities in the database.
func (uvbcb *UniswapV3PoolBurnCreateBulk) Save(ctx context.Context) ([]*UniswapV3PoolBurn, error) {
	specs := make([]*sqlgraph.CreateSpec, len(uvbcb.builders))
	nodes := make([]*UniswapV3PoolBurn, len(uvbcb.builders))
	mutators := make([]Mutator, len(uvbcb.builders))
	for i := range uvbcb.builders {
		func(i int, root context.Context) {
			builder := uvbcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UniswapV3PoolBurnMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uvbcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uvbcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uvbcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uvbcb *UniswapV3PoolBurnCreateBulk) SaveX(ctx context.Context) []*UniswapV3PoolBurn {
	v, err := uvbcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uvbcb *UniswapV3PoolBurnCreateBulk) Exec(ctx context.Context) error {
	_, err := uvbcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uvbcb *UniswapV3PoolBurnCreateBulk) ExecX(ctx context.Context) {
	if err := uvbcb.Exec(ctx); err != nil {
		panic(err)
	}
}
