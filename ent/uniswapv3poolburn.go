// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/artmisxyz/blockinspector/ent/event"
	"github.com/artmisxyz/blockinspector/ent/schema"
	"github.com/artmisxyz/blockinspector/ent/uniswapv3poolburn"
)

// UniswapV3PoolBurn is the model entity for the UniswapV3PoolBurn schema.
type UniswapV3PoolBurn struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Owner holds the value of the "owner" field.
	Owner string `json:"owner,omitempty"`
	// TickLower holds the value of the "tick_lower" field.
	TickLower *schema.BigInt `json:"tick_lower,omitempty"`
	// TickUpper holds the value of the "tick_upper" field.
	TickUpper *schema.BigInt `json:"tick_upper,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount *schema.BigInt `json:"amount,omitempty"`
	// Amount0 holds the value of the "amount0" field.
	Amount0 *schema.BigInt `json:"amount0,omitempty"`
	// Amount1 holds the value of the "amount1" field.
	Amount1 *schema.BigInt `json:"amount1,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UniswapV3PoolBurnQuery when eager-loading is set.
	Edges    UniswapV3PoolBurnEdges `json:"edges"`
	event_id *int
}

// UniswapV3PoolBurnEdges holds the relations/edges for other nodes in the graph.
type UniswapV3PoolBurnEdges struct {
	// Event holds the value of the event edge.
	Event *Event `json:"event,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EventOrErr returns the Event value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UniswapV3PoolBurnEdges) EventOrErr() (*Event, error) {
	if e.loadedTypes[0] {
		if e.Event == nil {
			// The edge event was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: event.Label}
		}
		return e.Event, nil
	}
	return nil, &NotLoadedError{edge: "event"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UniswapV3PoolBurn) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case uniswapv3poolburn.FieldTickLower, uniswapv3poolburn.FieldTickUpper, uniswapv3poolburn.FieldAmount, uniswapv3poolburn.FieldAmount0, uniswapv3poolburn.FieldAmount1:
			values[i] = new(schema.BigInt)
		case uniswapv3poolburn.FieldID:
			values[i] = new(sql.NullInt64)
		case uniswapv3poolburn.FieldOwner:
			values[i] = new(sql.NullString)
		case uniswapv3poolburn.ForeignKeys[0]: // event_id
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UniswapV3PoolBurn", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UniswapV3PoolBurn fields.
func (uvb *UniswapV3PoolBurn) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case uniswapv3poolburn.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			uvb.ID = int(value.Int64)
		case uniswapv3poolburn.FieldOwner:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner", values[i])
			} else if value.Valid {
				uvb.Owner = value.String
			}
		case uniswapv3poolburn.FieldTickLower:
			if value, ok := values[i].(*schema.BigInt); !ok {
				return fmt.Errorf("unexpected type %T for field tick_lower", values[i])
			} else if value != nil {
				uvb.TickLower = value
			}
		case uniswapv3poolburn.FieldTickUpper:
			if value, ok := values[i].(*schema.BigInt); !ok {
				return fmt.Errorf("unexpected type %T for field tick_upper", values[i])
			} else if value != nil {
				uvb.TickUpper = value
			}
		case uniswapv3poolburn.FieldAmount:
			if value, ok := values[i].(*schema.BigInt); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value != nil {
				uvb.Amount = value
			}
		case uniswapv3poolburn.FieldAmount0:
			if value, ok := values[i].(*schema.BigInt); !ok {
				return fmt.Errorf("unexpected type %T for field amount0", values[i])
			} else if value != nil {
				uvb.Amount0 = value
			}
		case uniswapv3poolburn.FieldAmount1:
			if value, ok := values[i].(*schema.BigInt); !ok {
				return fmt.Errorf("unexpected type %T for field amount1", values[i])
			} else if value != nil {
				uvb.Amount1 = value
			}
		case uniswapv3poolburn.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field event_id", value)
			} else if value.Valid {
				uvb.event_id = new(int)
				*uvb.event_id = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryEvent queries the "event" edge of the UniswapV3PoolBurn entity.
func (uvb *UniswapV3PoolBurn) QueryEvent() *EventQuery {
	return (&UniswapV3PoolBurnClient{config: uvb.config}).QueryEvent(uvb)
}

// Update returns a builder for updating this UniswapV3PoolBurn.
// Note that you need to call UniswapV3PoolBurn.Unwrap() before calling this method if this UniswapV3PoolBurn
// was returned from a transaction, and the transaction was committed or rolled back.
func (uvb *UniswapV3PoolBurn) Update() *UniswapV3PoolBurnUpdateOne {
	return (&UniswapV3PoolBurnClient{config: uvb.config}).UpdateOne(uvb)
}

// Unwrap unwraps the UniswapV3PoolBurn entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (uvb *UniswapV3PoolBurn) Unwrap() *UniswapV3PoolBurn {
	tx, ok := uvb.config.driver.(*txDriver)
	if !ok {
		panic("ent: UniswapV3PoolBurn is not a transactional entity")
	}
	uvb.config.driver = tx.drv
	return uvb
}

// String implements the fmt.Stringer.
func (uvb *UniswapV3PoolBurn) String() string {
	var builder strings.Builder
	builder.WriteString("UniswapV3PoolBurn(")
	builder.WriteString(fmt.Sprintf("id=%v", uvb.ID))
	builder.WriteString(", owner=")
	builder.WriteString(uvb.Owner)
	builder.WriteString(", tick_lower=")
	builder.WriteString(fmt.Sprintf("%v", uvb.TickLower))
	builder.WriteString(", tick_upper=")
	builder.WriteString(fmt.Sprintf("%v", uvb.TickUpper))
	builder.WriteString(", amount=")
	builder.WriteString(fmt.Sprintf("%v", uvb.Amount))
	builder.WriteString(", amount0=")
	builder.WriteString(fmt.Sprintf("%v", uvb.Amount0))
	builder.WriteString(", amount1=")
	builder.WriteString(fmt.Sprintf("%v", uvb.Amount1))
	builder.WriteByte(')')
	return builder.String()
}

// UniswapV3PoolBurns is a parsable slice of UniswapV3PoolBurn.
type UniswapV3PoolBurns []*UniswapV3PoolBurn

func (uvb UniswapV3PoolBurns) config(cfg config) {
	for _i := range uvb {
		uvb[_i].config = cfg
	}
}
