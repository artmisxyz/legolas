// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/artmisxyz/blockinspector/ent/position"
	"github.com/artmisxyz/blockinspector/ent/predicate"
	"github.com/artmisxyz/blockinspector/ent/schema"
)

// PositionUpdate is the builder for updating Position entities.
type PositionUpdate struct {
	config
	hooks    []Hook
	mutation *PositionMutation
}

// Where appends a list predicates to the PositionUpdate builder.
func (pu *PositionUpdate) Where(ps ...predicate.Position) *PositionUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetToken sets the "token" field.
func (pu *PositionUpdate) SetToken(si *schema.BigInt) *PositionUpdate {
	pu.mutation.SetToken(si)
	return pu
}

// SetOwner sets the "owner" field.
func (pu *PositionUpdate) SetOwner(b []byte) *PositionUpdate {
	pu.mutation.SetOwner(b)
	return pu
}

// SetPool sets the "pool" field.
func (pu *PositionUpdate) SetPool(b []byte) *PositionUpdate {
	pu.mutation.SetPool(b)
	return pu
}

// SetToken0 sets the "token0" field.
func (pu *PositionUpdate) SetToken0(b []byte) *PositionUpdate {
	pu.mutation.SetToken0(b)
	return pu
}

// SetToken1 sets the "token1" field.
func (pu *PositionUpdate) SetToken1(b []byte) *PositionUpdate {
	pu.mutation.SetToken1(b)
	return pu
}

// SetTickLower sets the "tick_lower" field.
func (pu *PositionUpdate) SetTickLower(si *schema.BigInt) *PositionUpdate {
	pu.mutation.SetTickLower(si)
	return pu
}

// SetTickUpper sets the "tick_upper" field.
func (pu *PositionUpdate) SetTickUpper(si *schema.BigInt) *PositionUpdate {
	pu.mutation.SetTickUpper(si)
	return pu
}

// SetLiquidity sets the "liquidity" field.
func (pu *PositionUpdate) SetLiquidity(si *schema.BigInt) *PositionUpdate {
	pu.mutation.SetLiquidity(si)
	return pu
}

// SetDepositedToken0 sets the "deposited_token0" field.
func (pu *PositionUpdate) SetDepositedToken0(si *schema.BigInt) *PositionUpdate {
	pu.mutation.SetDepositedToken0(si)
	return pu
}

// SetDepositedToken1 sets the "deposited_token1" field.
func (pu *PositionUpdate) SetDepositedToken1(si *schema.BigInt) *PositionUpdate {
	pu.mutation.SetDepositedToken1(si)
	return pu
}

// SetWithdrawnToken0 sets the "withdrawn_token0" field.
func (pu *PositionUpdate) SetWithdrawnToken0(si *schema.BigInt) *PositionUpdate {
	pu.mutation.SetWithdrawnToken0(si)
	return pu
}

// SetWithdrawnToken1 sets the "withdrawn_token1" field.
func (pu *PositionUpdate) SetWithdrawnToken1(si *schema.BigInt) *PositionUpdate {
	pu.mutation.SetWithdrawnToken1(si)
	return pu
}

// SetCollectedToken0 sets the "collected_token0" field.
func (pu *PositionUpdate) SetCollectedToken0(si *schema.BigInt) *PositionUpdate {
	pu.mutation.SetCollectedToken0(si)
	return pu
}

// SetCollectedToken1 sets the "collected_token1" field.
func (pu *PositionUpdate) SetCollectedToken1(si *schema.BigInt) *PositionUpdate {
	pu.mutation.SetCollectedToken1(si)
	return pu
}

// SetCollectedFeesToken0 sets the "collected_fees_token0" field.
func (pu *PositionUpdate) SetCollectedFeesToken0(si *schema.BigInt) *PositionUpdate {
	pu.mutation.SetCollectedFeesToken0(si)
	return pu
}

// SetCollectedFeesToken1 sets the "collected_fees_token1" field.
func (pu *PositionUpdate) SetCollectedFeesToken1(si *schema.BigInt) *PositionUpdate {
	pu.mutation.SetCollectedFeesToken1(si)
	return pu
}

// SetFeeGrowthInside0LastX128 sets the "fee_growth_inside0_lastX128" field.
func (pu *PositionUpdate) SetFeeGrowthInside0LastX128(si *schema.BigInt) *PositionUpdate {
	pu.mutation.SetFeeGrowthInside0LastX128(si)
	return pu
}

// SetFeeGrowthInside1LastX128 sets the "fee_growth_inside1_lastX128" field.
func (pu *PositionUpdate) SetFeeGrowthInside1LastX128(si *schema.BigInt) *PositionUpdate {
	pu.mutation.SetFeeGrowthInside1LastX128(si)
	return pu
}

// Mutation returns the PositionMutation object of the builder.
func (pu *PositionUpdate) Mutation() *PositionMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PositionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PositionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			if pu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PositionUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PositionUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PositionUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PositionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   position.Table,
			Columns: position.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: position.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Token(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: position.FieldToken,
		})
	}
	if value, ok := pu.mutation.Owner(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: position.FieldOwner,
		})
	}
	if value, ok := pu.mutation.Pool(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: position.FieldPool,
		})
	}
	if value, ok := pu.mutation.Token0(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: position.FieldToken0,
		})
	}
	if value, ok := pu.mutation.Token1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: position.FieldToken1,
		})
	}
	if value, ok := pu.mutation.TickLower(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: position.FieldTickLower,
		})
	}
	if value, ok := pu.mutation.TickUpper(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: position.FieldTickUpper,
		})
	}
	if value, ok := pu.mutation.Liquidity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: position.FieldLiquidity,
		})
	}
	if value, ok := pu.mutation.DepositedToken0(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: position.FieldDepositedToken0,
		})
	}
	if value, ok := pu.mutation.DepositedToken1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: position.FieldDepositedToken1,
		})
	}
	if value, ok := pu.mutation.WithdrawnToken0(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: position.FieldWithdrawnToken0,
		})
	}
	if value, ok := pu.mutation.WithdrawnToken1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: position.FieldWithdrawnToken1,
		})
	}
	if value, ok := pu.mutation.CollectedToken0(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: position.FieldCollectedToken0,
		})
	}
	if value, ok := pu.mutation.CollectedToken1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: position.FieldCollectedToken1,
		})
	}
	if value, ok := pu.mutation.CollectedFeesToken0(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: position.FieldCollectedFeesToken0,
		})
	}
	if value, ok := pu.mutation.CollectedFeesToken1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: position.FieldCollectedFeesToken1,
		})
	}
	if value, ok := pu.mutation.FeeGrowthInside0LastX128(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: position.FieldFeeGrowthInside0LastX128,
		})
	}
	if value, ok := pu.mutation.FeeGrowthInside1LastX128(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: position.FieldFeeGrowthInside1LastX128,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{position.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// PositionUpdateOne is the builder for updating a single Position entity.
type PositionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PositionMutation
}

// SetToken sets the "token" field.
func (puo *PositionUpdateOne) SetToken(si *schema.BigInt) *PositionUpdateOne {
	puo.mutation.SetToken(si)
	return puo
}

// SetOwner sets the "owner" field.
func (puo *PositionUpdateOne) SetOwner(b []byte) *PositionUpdateOne {
	puo.mutation.SetOwner(b)
	return puo
}

// SetPool sets the "pool" field.
func (puo *PositionUpdateOne) SetPool(b []byte) *PositionUpdateOne {
	puo.mutation.SetPool(b)
	return puo
}

// SetToken0 sets the "token0" field.
func (puo *PositionUpdateOne) SetToken0(b []byte) *PositionUpdateOne {
	puo.mutation.SetToken0(b)
	return puo
}

// SetToken1 sets the "token1" field.
func (puo *PositionUpdateOne) SetToken1(b []byte) *PositionUpdateOne {
	puo.mutation.SetToken1(b)
	return puo
}

// SetTickLower sets the "tick_lower" field.
func (puo *PositionUpdateOne) SetTickLower(si *schema.BigInt) *PositionUpdateOne {
	puo.mutation.SetTickLower(si)
	return puo
}

// SetTickUpper sets the "tick_upper" field.
func (puo *PositionUpdateOne) SetTickUpper(si *schema.BigInt) *PositionUpdateOne {
	puo.mutation.SetTickUpper(si)
	return puo
}

// SetLiquidity sets the "liquidity" field.
func (puo *PositionUpdateOne) SetLiquidity(si *schema.BigInt) *PositionUpdateOne {
	puo.mutation.SetLiquidity(si)
	return puo
}

// SetDepositedToken0 sets the "deposited_token0" field.
func (puo *PositionUpdateOne) SetDepositedToken0(si *schema.BigInt) *PositionUpdateOne {
	puo.mutation.SetDepositedToken0(si)
	return puo
}

// SetDepositedToken1 sets the "deposited_token1" field.
func (puo *PositionUpdateOne) SetDepositedToken1(si *schema.BigInt) *PositionUpdateOne {
	puo.mutation.SetDepositedToken1(si)
	return puo
}

// SetWithdrawnToken0 sets the "withdrawn_token0" field.
func (puo *PositionUpdateOne) SetWithdrawnToken0(si *schema.BigInt) *PositionUpdateOne {
	puo.mutation.SetWithdrawnToken0(si)
	return puo
}

// SetWithdrawnToken1 sets the "withdrawn_token1" field.
func (puo *PositionUpdateOne) SetWithdrawnToken1(si *schema.BigInt) *PositionUpdateOne {
	puo.mutation.SetWithdrawnToken1(si)
	return puo
}

// SetCollectedToken0 sets the "collected_token0" field.
func (puo *PositionUpdateOne) SetCollectedToken0(si *schema.BigInt) *PositionUpdateOne {
	puo.mutation.SetCollectedToken0(si)
	return puo
}

// SetCollectedToken1 sets the "collected_token1" field.
func (puo *PositionUpdateOne) SetCollectedToken1(si *schema.BigInt) *PositionUpdateOne {
	puo.mutation.SetCollectedToken1(si)
	return puo
}

// SetCollectedFeesToken0 sets the "collected_fees_token0" field.
func (puo *PositionUpdateOne) SetCollectedFeesToken0(si *schema.BigInt) *PositionUpdateOne {
	puo.mutation.SetCollectedFeesToken0(si)
	return puo
}

// SetCollectedFeesToken1 sets the "collected_fees_token1" field.
func (puo *PositionUpdateOne) SetCollectedFeesToken1(si *schema.BigInt) *PositionUpdateOne {
	puo.mutation.SetCollectedFeesToken1(si)
	return puo
}

// SetFeeGrowthInside0LastX128 sets the "fee_growth_inside0_lastX128" field.
func (puo *PositionUpdateOne) SetFeeGrowthInside0LastX128(si *schema.BigInt) *PositionUpdateOne {
	puo.mutation.SetFeeGrowthInside0LastX128(si)
	return puo
}

// SetFeeGrowthInside1LastX128 sets the "fee_growth_inside1_lastX128" field.
func (puo *PositionUpdateOne) SetFeeGrowthInside1LastX128(si *schema.BigInt) *PositionUpdateOne {
	puo.mutation.SetFeeGrowthInside1LastX128(si)
	return puo
}

// Mutation returns the PositionMutation object of the builder.
func (puo *PositionUpdateOne) Mutation() *PositionMutation {
	return puo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PositionUpdateOne) Select(field string, fields ...string) *PositionUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Position entity.
func (puo *PositionUpdateOne) Save(ctx context.Context) (*Position, error) {
	var (
		err  error
		node *Position
	)
	if len(puo.hooks) == 0 {
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PositionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			if puo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PositionUpdateOne) SaveX(ctx context.Context) *Position {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PositionUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PositionUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PositionUpdateOne) sqlSave(ctx context.Context) (_node *Position, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   position.Table,
			Columns: position.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: position.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Position.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, position.FieldID)
		for _, f := range fields {
			if !position.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != position.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Token(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: position.FieldToken,
		})
	}
	if value, ok := puo.mutation.Owner(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: position.FieldOwner,
		})
	}
	if value, ok := puo.mutation.Pool(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: position.FieldPool,
		})
	}
	if value, ok := puo.mutation.Token0(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: position.FieldToken0,
		})
	}
	if value, ok := puo.mutation.Token1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: position.FieldToken1,
		})
	}
	if value, ok := puo.mutation.TickLower(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: position.FieldTickLower,
		})
	}
	if value, ok := puo.mutation.TickUpper(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: position.FieldTickUpper,
		})
	}
	if value, ok := puo.mutation.Liquidity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: position.FieldLiquidity,
		})
	}
	if value, ok := puo.mutation.DepositedToken0(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: position.FieldDepositedToken0,
		})
	}
	if value, ok := puo.mutation.DepositedToken1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: position.FieldDepositedToken1,
		})
	}
	if value, ok := puo.mutation.WithdrawnToken0(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: position.FieldWithdrawnToken0,
		})
	}
	if value, ok := puo.mutation.WithdrawnToken1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: position.FieldWithdrawnToken1,
		})
	}
	if value, ok := puo.mutation.CollectedToken0(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: position.FieldCollectedToken0,
		})
	}
	if value, ok := puo.mutation.CollectedToken1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: position.FieldCollectedToken1,
		})
	}
	if value, ok := puo.mutation.CollectedFeesToken0(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: position.FieldCollectedFeesToken0,
		})
	}
	if value, ok := puo.mutation.CollectedFeesToken1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: position.FieldCollectedFeesToken1,
		})
	}
	if value, ok := puo.mutation.FeeGrowthInside0LastX128(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: position.FieldFeeGrowthInside0LastX128,
		})
	}
	if value, ok := puo.mutation.FeeGrowthInside1LastX128(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: position.FieldFeeGrowthInside1LastX128,
		})
	}
	_node = &Position{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{position.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
