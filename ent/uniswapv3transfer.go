// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/artmisxyz/legolas/ent/event"
	"github.com/artmisxyz/legolas/ent/uniswapv3transfer"
)

// UniswapV3Transfer is the model entity for the UniswapV3Transfer schema.
type UniswapV3Transfer struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TokenID holds the value of the "token_id" field.
	TokenID string `json:"token_id,omitempty"`
	// From holds the value of the "from" field.
	From string `json:"from,omitempty"`
	// To holds the value of the "to" field.
	To string `json:"to,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UniswapV3TransferQuery when eager-loading is set.
	Edges    UniswapV3TransferEdges `json:"edges"`
	event_id *int
}

// UniswapV3TransferEdges holds the relations/edges for other nodes in the graph.
type UniswapV3TransferEdges struct {
	// Event holds the value of the event edge.
	Event *Event `json:"event,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EventOrErr returns the Event value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UniswapV3TransferEdges) EventOrErr() (*Event, error) {
	if e.loadedTypes[0] {
		if e.Event == nil {
			// The edge event was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: event.Label}
		}
		return e.Event, nil
	}
	return nil, &NotLoadedError{edge: "event"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UniswapV3Transfer) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case uniswapv3transfer.FieldID:
			values[i] = new(sql.NullInt64)
		case uniswapv3transfer.FieldTokenID, uniswapv3transfer.FieldFrom, uniswapv3transfer.FieldTo:
			values[i] = new(sql.NullString)
		case uniswapv3transfer.ForeignKeys[0]: // event_id
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UniswapV3Transfer", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UniswapV3Transfer fields.
func (uv *UniswapV3Transfer) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case uniswapv3transfer.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			uv.ID = int(value.Int64)
		case uniswapv3transfer.FieldTokenID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token_id", values[i])
			} else if value.Valid {
				uv.TokenID = value.String
			}
		case uniswapv3transfer.FieldFrom:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field from", values[i])
			} else if value.Valid {
				uv.From = value.String
			}
		case uniswapv3transfer.FieldTo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field to", values[i])
			} else if value.Valid {
				uv.To = value.String
			}
		case uniswapv3transfer.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field event_id", value)
			} else if value.Valid {
				uv.event_id = new(int)
				*uv.event_id = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryEvent queries the "event" edge of the UniswapV3Transfer entity.
func (uv *UniswapV3Transfer) QueryEvent() *EventQuery {
	return (&UniswapV3TransferClient{config: uv.config}).QueryEvent(uv)
}

// Update returns a builder for updating this UniswapV3Transfer.
// Note that you need to call UniswapV3Transfer.Unwrap() before calling this method if this UniswapV3Transfer
// was returned from a transaction, and the transaction was committed or rolled back.
func (uv *UniswapV3Transfer) Update() *UniswapV3TransferUpdateOne {
	return (&UniswapV3TransferClient{config: uv.config}).UpdateOne(uv)
}

// Unwrap unwraps the UniswapV3Transfer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (uv *UniswapV3Transfer) Unwrap() *UniswapV3Transfer {
	tx, ok := uv.config.driver.(*txDriver)
	if !ok {
		panic("ent: UniswapV3Transfer is not a transactional entity")
	}
	uv.config.driver = tx.drv
	return uv
}

// String implements the fmt.Stringer.
func (uv *UniswapV3Transfer) String() string {
	var builder strings.Builder
	builder.WriteString("UniswapV3Transfer(")
	builder.WriteString(fmt.Sprintf("id=%v", uv.ID))
	builder.WriteString(", token_id=")
	builder.WriteString(uv.TokenID)
	builder.WriteString(", from=")
	builder.WriteString(uv.From)
	builder.WriteString(", to=")
	builder.WriteString(uv.To)
	builder.WriteByte(')')
	return builder.String()
}

// UniswapV3Transfers is a parsable slice of UniswapV3Transfer.
type UniswapV3Transfers []*UniswapV3Transfer

func (uv UniswapV3Transfers) config(cfg config) {
	for _i := range uv {
		uv[_i].config = cfg
	}
}
