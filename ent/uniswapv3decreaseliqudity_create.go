// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/artmisxyz/legolas/ent/event"
	"github.com/artmisxyz/legolas/ent/uniswapv3decreaseliqudity"
)

// UniswapV3DecreaseLiqudityCreate is the builder for creating a UniswapV3DecreaseLiqudity entity.
type UniswapV3DecreaseLiqudityCreate struct {
	config
	mutation *UniswapV3DecreaseLiqudityMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTokenID sets the "token_id" field.
func (uvlc *UniswapV3DecreaseLiqudityCreate) SetTokenID(s string) *UniswapV3DecreaseLiqudityCreate {
	uvlc.mutation.SetTokenID(s)
	return uvlc
}

// SetLiquidity sets the "liquidity" field.
func (uvlc *UniswapV3DecreaseLiqudityCreate) SetLiquidity(s string) *UniswapV3DecreaseLiqudityCreate {
	uvlc.mutation.SetLiquidity(s)
	return uvlc
}

// SetAmount0 sets the "amount0" field.
func (uvlc *UniswapV3DecreaseLiqudityCreate) SetAmount0(s string) *UniswapV3DecreaseLiqudityCreate {
	uvlc.mutation.SetAmount0(s)
	return uvlc
}

// SetAmount1 sets the "amount1" field.
func (uvlc *UniswapV3DecreaseLiqudityCreate) SetAmount1(s string) *UniswapV3DecreaseLiqudityCreate {
	uvlc.mutation.SetAmount1(s)
	return uvlc
}

// SetEventID sets the "event" edge to the Event entity by ID.
func (uvlc *UniswapV3DecreaseLiqudityCreate) SetEventID(id int) *UniswapV3DecreaseLiqudityCreate {
	uvlc.mutation.SetEventID(id)
	return uvlc
}

// SetEvent sets the "event" edge to the Event entity.
func (uvlc *UniswapV3DecreaseLiqudityCreate) SetEvent(e *Event) *UniswapV3DecreaseLiqudityCreate {
	return uvlc.SetEventID(e.ID)
}

// Mutation returns the UniswapV3DecreaseLiqudityMutation object of the builder.
func (uvlc *UniswapV3DecreaseLiqudityCreate) Mutation() *UniswapV3DecreaseLiqudityMutation {
	return uvlc.mutation
}

// Save creates the UniswapV3DecreaseLiqudity in the database.
func (uvlc *UniswapV3DecreaseLiqudityCreate) Save(ctx context.Context) (*UniswapV3DecreaseLiqudity, error) {
	var (
		err  error
		node *UniswapV3DecreaseLiqudity
	)
	if len(uvlc.hooks) == 0 {
		if err = uvlc.check(); err != nil {
			return nil, err
		}
		node, err = uvlc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UniswapV3DecreaseLiqudityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uvlc.check(); err != nil {
				return nil, err
			}
			uvlc.mutation = mutation
			if node, err = uvlc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(uvlc.hooks) - 1; i >= 0; i-- {
			if uvlc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uvlc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uvlc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (uvlc *UniswapV3DecreaseLiqudityCreate) SaveX(ctx context.Context) *UniswapV3DecreaseLiqudity {
	v, err := uvlc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uvlc *UniswapV3DecreaseLiqudityCreate) Exec(ctx context.Context) error {
	_, err := uvlc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uvlc *UniswapV3DecreaseLiqudityCreate) ExecX(ctx context.Context) {
	if err := uvlc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uvlc *UniswapV3DecreaseLiqudityCreate) check() error {
	if _, ok := uvlc.mutation.TokenID(); !ok {
		return &ValidationError{Name: "token_id", err: errors.New(`ent: missing required field "token_id"`)}
	}
	if _, ok := uvlc.mutation.Liquidity(); !ok {
		return &ValidationError{Name: "liquidity", err: errors.New(`ent: missing required field "liquidity"`)}
	}
	if _, ok := uvlc.mutation.Amount0(); !ok {
		return &ValidationError{Name: "amount0", err: errors.New(`ent: missing required field "amount0"`)}
	}
	if _, ok := uvlc.mutation.Amount1(); !ok {
		return &ValidationError{Name: "amount1", err: errors.New(`ent: missing required field "amount1"`)}
	}
	if _, ok := uvlc.mutation.EventID(); !ok {
		return &ValidationError{Name: "event", err: errors.New("ent: missing required edge \"event\"")}
	}
	return nil
}

func (uvlc *UniswapV3DecreaseLiqudityCreate) sqlSave(ctx context.Context) (*UniswapV3DecreaseLiqudity, error) {
	_node, _spec := uvlc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uvlc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (uvlc *UniswapV3DecreaseLiqudityCreate) createSpec() (*UniswapV3DecreaseLiqudity, *sqlgraph.CreateSpec) {
	var (
		_node = &UniswapV3DecreaseLiqudity{config: uvlc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: uniswapv3decreaseliqudity.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: uniswapv3decreaseliqudity.FieldID,
			},
		}
	)
	_spec.OnConflict = uvlc.conflict
	if value, ok := uvlc.mutation.TokenID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: uniswapv3decreaseliqudity.FieldTokenID,
		})
		_node.TokenID = value
	}
	if value, ok := uvlc.mutation.Liquidity(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: uniswapv3decreaseliqudity.FieldLiquidity,
		})
		_node.Liquidity = value
	}
	if value, ok := uvlc.mutation.Amount0(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: uniswapv3decreaseliqudity.FieldAmount0,
		})
		_node.Amount0 = value
	}
	if value, ok := uvlc.mutation.Amount1(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: uniswapv3decreaseliqudity.FieldAmount1,
		})
		_node.Amount1 = value
	}
	if nodes := uvlc.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   uniswapv3decreaseliqudity.EventTable,
			Columns: []string{uniswapv3decreaseliqudity.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.event_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UniswapV3DecreaseLiqudity.Create().
//		SetTokenID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UniswapV3DecreaseLiqudityUpsert) {
//			SetTokenID(v+v).
//		}).
//		Exec(ctx)
//
func (uvlc *UniswapV3DecreaseLiqudityCreate) OnConflict(opts ...sql.ConflictOption) *UniswapV3DecreaseLiqudityUpsertOne {
	uvlc.conflict = opts
	return &UniswapV3DecreaseLiqudityUpsertOne{
		create: uvlc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UniswapV3DecreaseLiqudity.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (uvlc *UniswapV3DecreaseLiqudityCreate) OnConflictColumns(columns ...string) *UniswapV3DecreaseLiqudityUpsertOne {
	uvlc.conflict = append(uvlc.conflict, sql.ConflictColumns(columns...))
	return &UniswapV3DecreaseLiqudityUpsertOne{
		create: uvlc,
	}
}

type (
	// UniswapV3DecreaseLiqudityUpsertOne is the builder for "upsert"-ing
	//  one UniswapV3DecreaseLiqudity node.
	UniswapV3DecreaseLiqudityUpsertOne struct {
		create *UniswapV3DecreaseLiqudityCreate
	}

	// UniswapV3DecreaseLiqudityUpsert is the "OnConflict" setter.
	UniswapV3DecreaseLiqudityUpsert struct {
		*sql.UpdateSet
	}
)

// SetTokenID sets the "token_id" field.
func (u *UniswapV3DecreaseLiqudityUpsert) SetTokenID(v string) *UniswapV3DecreaseLiqudityUpsert {
	u.Set(uniswapv3decreaseliqudity.FieldTokenID, v)
	return u
}

// UpdateTokenID sets the "token_id" field to the value that was provided on create.
func (u *UniswapV3DecreaseLiqudityUpsert) UpdateTokenID() *UniswapV3DecreaseLiqudityUpsert {
	u.SetExcluded(uniswapv3decreaseliqudity.FieldTokenID)
	return u
}

// SetLiquidity sets the "liquidity" field.
func (u *UniswapV3DecreaseLiqudityUpsert) SetLiquidity(v string) *UniswapV3DecreaseLiqudityUpsert {
	u.Set(uniswapv3decreaseliqudity.FieldLiquidity, v)
	return u
}

// UpdateLiquidity sets the "liquidity" field to the value that was provided on create.
func (u *UniswapV3DecreaseLiqudityUpsert) UpdateLiquidity() *UniswapV3DecreaseLiqudityUpsert {
	u.SetExcluded(uniswapv3decreaseliqudity.FieldLiquidity)
	return u
}

// SetAmount0 sets the "amount0" field.
func (u *UniswapV3DecreaseLiqudityUpsert) SetAmount0(v string) *UniswapV3DecreaseLiqudityUpsert {
	u.Set(uniswapv3decreaseliqudity.FieldAmount0, v)
	return u
}

// UpdateAmount0 sets the "amount0" field to the value that was provided on create.
func (u *UniswapV3DecreaseLiqudityUpsert) UpdateAmount0() *UniswapV3DecreaseLiqudityUpsert {
	u.SetExcluded(uniswapv3decreaseliqudity.FieldAmount0)
	return u
}

// SetAmount1 sets the "amount1" field.
func (u *UniswapV3DecreaseLiqudityUpsert) SetAmount1(v string) *UniswapV3DecreaseLiqudityUpsert {
	u.Set(uniswapv3decreaseliqudity.FieldAmount1, v)
	return u
}

// UpdateAmount1 sets the "amount1" field to the value that was provided on create.
func (u *UniswapV3DecreaseLiqudityUpsert) UpdateAmount1() *UniswapV3DecreaseLiqudityUpsert {
	u.SetExcluded(uniswapv3decreaseliqudity.FieldAmount1)
	return u
}

// UpdateNewValues updates the fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.UniswapV3DecreaseLiqudity.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *UniswapV3DecreaseLiqudityUpsertOne) UpdateNewValues() *UniswapV3DecreaseLiqudityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.UniswapV3DecreaseLiqudity.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *UniswapV3DecreaseLiqudityUpsertOne) Ignore() *UniswapV3DecreaseLiqudityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UniswapV3DecreaseLiqudityUpsertOne) DoNothing() *UniswapV3DecreaseLiqudityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UniswapV3DecreaseLiqudityCreate.OnConflict
// documentation for more info.
func (u *UniswapV3DecreaseLiqudityUpsertOne) Update(set func(*UniswapV3DecreaseLiqudityUpsert)) *UniswapV3DecreaseLiqudityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UniswapV3DecreaseLiqudityUpsert{UpdateSet: update})
	}))
	return u
}

// SetTokenID sets the "token_id" field.
func (u *UniswapV3DecreaseLiqudityUpsertOne) SetTokenID(v string) *UniswapV3DecreaseLiqudityUpsertOne {
	return u.Update(func(s *UniswapV3DecreaseLiqudityUpsert) {
		s.SetTokenID(v)
	})
}

// UpdateTokenID sets the "token_id" field to the value that was provided on create.
func (u *UniswapV3DecreaseLiqudityUpsertOne) UpdateTokenID() *UniswapV3DecreaseLiqudityUpsertOne {
	return u.Update(func(s *UniswapV3DecreaseLiqudityUpsert) {
		s.UpdateTokenID()
	})
}

// SetLiquidity sets the "liquidity" field.
func (u *UniswapV3DecreaseLiqudityUpsertOne) SetLiquidity(v string) *UniswapV3DecreaseLiqudityUpsertOne {
	return u.Update(func(s *UniswapV3DecreaseLiqudityUpsert) {
		s.SetLiquidity(v)
	})
}

// UpdateLiquidity sets the "liquidity" field to the value that was provided on create.
func (u *UniswapV3DecreaseLiqudityUpsertOne) UpdateLiquidity() *UniswapV3DecreaseLiqudityUpsertOne {
	return u.Update(func(s *UniswapV3DecreaseLiqudityUpsert) {
		s.UpdateLiquidity()
	})
}

// SetAmount0 sets the "amount0" field.
func (u *UniswapV3DecreaseLiqudityUpsertOne) SetAmount0(v string) *UniswapV3DecreaseLiqudityUpsertOne {
	return u.Update(func(s *UniswapV3DecreaseLiqudityUpsert) {
		s.SetAmount0(v)
	})
}

// UpdateAmount0 sets the "amount0" field to the value that was provided on create.
func (u *UniswapV3DecreaseLiqudityUpsertOne) UpdateAmount0() *UniswapV3DecreaseLiqudityUpsertOne {
	return u.Update(func(s *UniswapV3DecreaseLiqudityUpsert) {
		s.UpdateAmount0()
	})
}

// SetAmount1 sets the "amount1" field.
func (u *UniswapV3DecreaseLiqudityUpsertOne) SetAmount1(v string) *UniswapV3DecreaseLiqudityUpsertOne {
	return u.Update(func(s *UniswapV3DecreaseLiqudityUpsert) {
		s.SetAmount1(v)
	})
}

// UpdateAmount1 sets the "amount1" field to the value that was provided on create.
func (u *UniswapV3DecreaseLiqudityUpsertOne) UpdateAmount1() *UniswapV3DecreaseLiqudityUpsertOne {
	return u.Update(func(s *UniswapV3DecreaseLiqudityUpsert) {
		s.UpdateAmount1()
	})
}

// Exec executes the query.
func (u *UniswapV3DecreaseLiqudityUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UniswapV3DecreaseLiqudityCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UniswapV3DecreaseLiqudityUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UniswapV3DecreaseLiqudityUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UniswapV3DecreaseLiqudityUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UniswapV3DecreaseLiqudityCreateBulk is the builder for creating many UniswapV3DecreaseLiqudity entities in bulk.
type UniswapV3DecreaseLiqudityCreateBulk struct {
	config
	builders []*UniswapV3DecreaseLiqudityCreate
	conflict []sql.ConflictOption
}

// Save creates the UniswapV3DecreaseLiqudity entities in the database.
func (uvlcb *UniswapV3DecreaseLiqudityCreateBulk) Save(ctx context.Context) ([]*UniswapV3DecreaseLiqudity, error) {
	specs := make([]*sqlgraph.CreateSpec, len(uvlcb.builders))
	nodes := make([]*UniswapV3DecreaseLiqudity, len(uvlcb.builders))
	mutators := make([]Mutator, len(uvlcb.builders))
	for i := range uvlcb.builders {
		func(i int, root context.Context) {
			builder := uvlcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UniswapV3DecreaseLiqudityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uvlcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = uvlcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uvlcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uvlcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uvlcb *UniswapV3DecreaseLiqudityCreateBulk) SaveX(ctx context.Context) []*UniswapV3DecreaseLiqudity {
	v, err := uvlcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uvlcb *UniswapV3DecreaseLiqudityCreateBulk) Exec(ctx context.Context) error {
	_, err := uvlcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uvlcb *UniswapV3DecreaseLiqudityCreateBulk) ExecX(ctx context.Context) {
	if err := uvlcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UniswapV3DecreaseLiqudity.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UniswapV3DecreaseLiqudityUpsert) {
//			SetTokenID(v+v).
//		}).
//		Exec(ctx)
//
func (uvlcb *UniswapV3DecreaseLiqudityCreateBulk) OnConflict(opts ...sql.ConflictOption) *UniswapV3DecreaseLiqudityUpsertBulk {
	uvlcb.conflict = opts
	return &UniswapV3DecreaseLiqudityUpsertBulk{
		create: uvlcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UniswapV3DecreaseLiqudity.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (uvlcb *UniswapV3DecreaseLiqudityCreateBulk) OnConflictColumns(columns ...string) *UniswapV3DecreaseLiqudityUpsertBulk {
	uvlcb.conflict = append(uvlcb.conflict, sql.ConflictColumns(columns...))
	return &UniswapV3DecreaseLiqudityUpsertBulk{
		create: uvlcb,
	}
}

// UniswapV3DecreaseLiqudityUpsertBulk is the builder for "upsert"-ing
// a bulk of UniswapV3DecreaseLiqudity nodes.
type UniswapV3DecreaseLiqudityUpsertBulk struct {
	create *UniswapV3DecreaseLiqudityCreateBulk
}

// UpdateNewValues updates the fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.UniswapV3DecreaseLiqudity.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *UniswapV3DecreaseLiqudityUpsertBulk) UpdateNewValues() *UniswapV3DecreaseLiqudityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UniswapV3DecreaseLiqudity.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *UniswapV3DecreaseLiqudityUpsertBulk) Ignore() *UniswapV3DecreaseLiqudityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UniswapV3DecreaseLiqudityUpsertBulk) DoNothing() *UniswapV3DecreaseLiqudityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UniswapV3DecreaseLiqudityCreateBulk.OnConflict
// documentation for more info.
func (u *UniswapV3DecreaseLiqudityUpsertBulk) Update(set func(*UniswapV3DecreaseLiqudityUpsert)) *UniswapV3DecreaseLiqudityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UniswapV3DecreaseLiqudityUpsert{UpdateSet: update})
	}))
	return u
}

// SetTokenID sets the "token_id" field.
func (u *UniswapV3DecreaseLiqudityUpsertBulk) SetTokenID(v string) *UniswapV3DecreaseLiqudityUpsertBulk {
	return u.Update(func(s *UniswapV3DecreaseLiqudityUpsert) {
		s.SetTokenID(v)
	})
}

// UpdateTokenID sets the "token_id" field to the value that was provided on create.
func (u *UniswapV3DecreaseLiqudityUpsertBulk) UpdateTokenID() *UniswapV3DecreaseLiqudityUpsertBulk {
	return u.Update(func(s *UniswapV3DecreaseLiqudityUpsert) {
		s.UpdateTokenID()
	})
}

// SetLiquidity sets the "liquidity" field.
func (u *UniswapV3DecreaseLiqudityUpsertBulk) SetLiquidity(v string) *UniswapV3DecreaseLiqudityUpsertBulk {
	return u.Update(func(s *UniswapV3DecreaseLiqudityUpsert) {
		s.SetLiquidity(v)
	})
}

// UpdateLiquidity sets the "liquidity" field to the value that was provided on create.
func (u *UniswapV3DecreaseLiqudityUpsertBulk) UpdateLiquidity() *UniswapV3DecreaseLiqudityUpsertBulk {
	return u.Update(func(s *UniswapV3DecreaseLiqudityUpsert) {
		s.UpdateLiquidity()
	})
}

// SetAmount0 sets the "amount0" field.
func (u *UniswapV3DecreaseLiqudityUpsertBulk) SetAmount0(v string) *UniswapV3DecreaseLiqudityUpsertBulk {
	return u.Update(func(s *UniswapV3DecreaseLiqudityUpsert) {
		s.SetAmount0(v)
	})
}

// UpdateAmount0 sets the "amount0" field to the value that was provided on create.
func (u *UniswapV3DecreaseLiqudityUpsertBulk) UpdateAmount0() *UniswapV3DecreaseLiqudityUpsertBulk {
	return u.Update(func(s *UniswapV3DecreaseLiqudityUpsert) {
		s.UpdateAmount0()
	})
}

// SetAmount1 sets the "amount1" field.
func (u *UniswapV3DecreaseLiqudityUpsertBulk) SetAmount1(v string) *UniswapV3DecreaseLiqudityUpsertBulk {
	return u.Update(func(s *UniswapV3DecreaseLiqudityUpsert) {
		s.SetAmount1(v)
	})
}

// UpdateAmount1 sets the "amount1" field to the value that was provided on create.
func (u *UniswapV3DecreaseLiqudityUpsertBulk) UpdateAmount1() *UniswapV3DecreaseLiqudityUpsertBulk {
	return u.Update(func(s *UniswapV3DecreaseLiqudityUpsert) {
		s.UpdateAmount1()
	})
}

// Exec executes the query.
func (u *UniswapV3DecreaseLiqudityUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UniswapV3DecreaseLiqudityCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UniswapV3DecreaseLiqudityCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UniswapV3DecreaseLiqudityUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
