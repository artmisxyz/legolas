// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/artmisxyz/legolas/ent/event"
	"github.com/artmisxyz/legolas/ent/schema"
	"github.com/artmisxyz/legolas/ent/uniswapv3poolinitialize"
)

// UniswapV3PoolInitialize is the model entity for the UniswapV3PoolInitialize schema.
type UniswapV3PoolInitialize struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// SqrtPriceX96 holds the value of the "sqrt_price_x96" field.
	SqrtPriceX96 *schema.BigInt `json:"sqrt_price_x96,omitempty"`
	// Tick holds the value of the "tick" field.
	Tick *schema.BigInt `json:"tick,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UniswapV3PoolInitializeQuery when eager-loading is set.
	Edges    UniswapV3PoolInitializeEdges `json:"edges"`
	event_id *int
}

// UniswapV3PoolInitializeEdges holds the relations/edges for other nodes in the graph.
type UniswapV3PoolInitializeEdges struct {
	// Event holds the value of the event edge.
	Event *Event `json:"event,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EventOrErr returns the Event value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UniswapV3PoolInitializeEdges) EventOrErr() (*Event, error) {
	if e.loadedTypes[0] {
		if e.Event == nil {
			// The edge event was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: event.Label}
		}
		return e.Event, nil
	}
	return nil, &NotLoadedError{edge: "event"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UniswapV3PoolInitialize) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case uniswapv3poolinitialize.FieldSqrtPriceX96, uniswapv3poolinitialize.FieldTick:
			values[i] = new(schema.BigInt)
		case uniswapv3poolinitialize.FieldID:
			values[i] = new(sql.NullInt64)
		case uniswapv3poolinitialize.ForeignKeys[0]: // event_id
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UniswapV3PoolInitialize", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UniswapV3PoolInitialize fields.
func (uvi *UniswapV3PoolInitialize) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case uniswapv3poolinitialize.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			uvi.ID = int(value.Int64)
		case uniswapv3poolinitialize.FieldSqrtPriceX96:
			if value, ok := values[i].(*schema.BigInt); !ok {
				return fmt.Errorf("unexpected type %T for field sqrt_price_x96", values[i])
			} else if value != nil {
				uvi.SqrtPriceX96 = value
			}
		case uniswapv3poolinitialize.FieldTick:
			if value, ok := values[i].(*schema.BigInt); !ok {
				return fmt.Errorf("unexpected type %T for field tick", values[i])
			} else if value != nil {
				uvi.Tick = value
			}
		case uniswapv3poolinitialize.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field event_id", value)
			} else if value.Valid {
				uvi.event_id = new(int)
				*uvi.event_id = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryEvent queries the "event" edge of the UniswapV3PoolInitialize entity.
func (uvi *UniswapV3PoolInitialize) QueryEvent() *EventQuery {
	return (&UniswapV3PoolInitializeClient{config: uvi.config}).QueryEvent(uvi)
}

// Update returns a builder for updating this UniswapV3PoolInitialize.
// Note that you need to call UniswapV3PoolInitialize.Unwrap() before calling this method if this UniswapV3PoolInitialize
// was returned from a transaction, and the transaction was committed or rolled back.
func (uvi *UniswapV3PoolInitialize) Update() *UniswapV3PoolInitializeUpdateOne {
	return (&UniswapV3PoolInitializeClient{config: uvi.config}).UpdateOne(uvi)
}

// Unwrap unwraps the UniswapV3PoolInitialize entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (uvi *UniswapV3PoolInitialize) Unwrap() *UniswapV3PoolInitialize {
	tx, ok := uvi.config.driver.(*txDriver)
	if !ok {
		panic("ent: UniswapV3PoolInitialize is not a transactional entity")
	}
	uvi.config.driver = tx.drv
	return uvi
}

// String implements the fmt.Stringer.
func (uvi *UniswapV3PoolInitialize) String() string {
	var builder strings.Builder
	builder.WriteString("UniswapV3PoolInitialize(")
	builder.WriteString(fmt.Sprintf("id=%v", uvi.ID))
	builder.WriteString(", sqrt_price_x96=")
	builder.WriteString(fmt.Sprintf("%v", uvi.SqrtPriceX96))
	builder.WriteString(", tick=")
	builder.WriteString(fmt.Sprintf("%v", uvi.Tick))
	builder.WriteByte(')')
	return builder.String()
}

// UniswapV3PoolInitializes is a parsable slice of UniswapV3PoolInitialize.
type UniswapV3PoolInitializes []*UniswapV3PoolInitialize

func (uvi UniswapV3PoolInitializes) config(cfg config) {
	for _i := range uvi {
		uvi[_i].config = cfg
	}
}
