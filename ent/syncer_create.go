// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/artmisxyz/legolas/ent/syncer"
)

// SyncerCreate is the builder for creating a Syncer entity.
type SyncerCreate struct {
	config
	mutation *SyncerMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (sc *SyncerCreate) SetName(s string) *SyncerCreate {
	sc.mutation.SetName(s)
	return sc
}

// SetStart sets the "start" field.
func (sc *SyncerCreate) SetStart(u uint64) *SyncerCreate {
	sc.mutation.SetStart(u)
	return sc
}

// SetFinish sets the "finish" field.
func (sc *SyncerCreate) SetFinish(u uint64) *SyncerCreate {
	sc.mutation.SetFinish(u)
	return sc
}

// SetCurrent sets the "current" field.
func (sc *SyncerCreate) SetCurrent(u uint64) *SyncerCreate {
	sc.mutation.SetCurrent(u)
	return sc
}

// Mutation returns the SyncerMutation object of the builder.
func (sc *SyncerCreate) Mutation() *SyncerMutation {
	return sc.mutation
}

// Save creates the Syncer in the database.
func (sc *SyncerCreate) Save(ctx context.Context) (*Syncer, error) {
	var (
		err  error
		node *Syncer
	)
	if len(sc.hooks) == 0 {
		if err = sc.check(); err != nil {
			return nil, err
		}
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SyncerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sc.check(); err != nil {
				return nil, err
			}
			sc.mutation = mutation
			if node, err = sc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			if sc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SyncerCreate) SaveX(ctx context.Context) *Syncer {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SyncerCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SyncerCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SyncerCreate) check() error {
	if _, ok := sc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "name"`)}
	}
	if _, ok := sc.mutation.Start(); !ok {
		return &ValidationError{Name: "start", err: errors.New(`ent: missing required field "start"`)}
	}
	if _, ok := sc.mutation.Finish(); !ok {
		return &ValidationError{Name: "finish", err: errors.New(`ent: missing required field "finish"`)}
	}
	if _, ok := sc.mutation.Current(); !ok {
		return &ValidationError{Name: "current", err: errors.New(`ent: missing required field "current"`)}
	}
	return nil
}

func (sc *SyncerCreate) sqlSave(ctx context.Context) (*Syncer, error) {
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (sc *SyncerCreate) createSpec() (*Syncer, *sqlgraph.CreateSpec) {
	var (
		_node = &Syncer{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: syncer.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: syncer.FieldID,
			},
		}
	)
	_spec.OnConflict = sc.conflict
	if value, ok := sc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: syncer.FieldName,
		})
		_node.Name = value
	}
	if value, ok := sc.mutation.Start(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: syncer.FieldStart,
		})
		_node.Start = value
	}
	if value, ok := sc.mutation.Finish(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: syncer.FieldFinish,
		})
		_node.Finish = value
	}
	if value, ok := sc.mutation.Current(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: syncer.FieldCurrent,
		})
		_node.Current = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Syncer.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SyncerUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
//
func (sc *SyncerCreate) OnConflict(opts ...sql.ConflictOption) *SyncerUpsertOne {
	sc.conflict = opts
	return &SyncerUpsertOne{
		create: sc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Syncer.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (sc *SyncerCreate) OnConflictColumns(columns ...string) *SyncerUpsertOne {
	sc.conflict = append(sc.conflict, sql.ConflictColumns(columns...))
	return &SyncerUpsertOne{
		create: sc,
	}
}

type (
	// SyncerUpsertOne is the builder for "upsert"-ing
	//  one Syncer node.
	SyncerUpsertOne struct {
		create *SyncerCreate
	}

	// SyncerUpsert is the "OnConflict" setter.
	SyncerUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *SyncerUpsert) SetName(v string) *SyncerUpsert {
	u.Set(syncer.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SyncerUpsert) UpdateName() *SyncerUpsert {
	u.SetExcluded(syncer.FieldName)
	return u
}

// SetStart sets the "start" field.
func (u *SyncerUpsert) SetStart(v uint64) *SyncerUpsert {
	u.Set(syncer.FieldStart, v)
	return u
}

// UpdateStart sets the "start" field to the value that was provided on create.
func (u *SyncerUpsert) UpdateStart() *SyncerUpsert {
	u.SetExcluded(syncer.FieldStart)
	return u
}

// SetFinish sets the "finish" field.
func (u *SyncerUpsert) SetFinish(v uint64) *SyncerUpsert {
	u.Set(syncer.FieldFinish, v)
	return u
}

// UpdateFinish sets the "finish" field to the value that was provided on create.
func (u *SyncerUpsert) UpdateFinish() *SyncerUpsert {
	u.SetExcluded(syncer.FieldFinish)
	return u
}

// SetCurrent sets the "current" field.
func (u *SyncerUpsert) SetCurrent(v uint64) *SyncerUpsert {
	u.Set(syncer.FieldCurrent, v)
	return u
}

// UpdateCurrent sets the "current" field to the value that was provided on create.
func (u *SyncerUpsert) UpdateCurrent() *SyncerUpsert {
	u.SetExcluded(syncer.FieldCurrent)
	return u
}

// UpdateNewValues updates the fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Syncer.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *SyncerUpsertOne) UpdateNewValues() *SyncerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Syncer.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *SyncerUpsertOne) Ignore() *SyncerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SyncerUpsertOne) DoNothing() *SyncerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SyncerCreate.OnConflict
// documentation for more info.
func (u *SyncerUpsertOne) Update(set func(*SyncerUpsert)) *SyncerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SyncerUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *SyncerUpsertOne) SetName(v string) *SyncerUpsertOne {
	return u.Update(func(s *SyncerUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SyncerUpsertOne) UpdateName() *SyncerUpsertOne {
	return u.Update(func(s *SyncerUpsert) {
		s.UpdateName()
	})
}

// SetStart sets the "start" field.
func (u *SyncerUpsertOne) SetStart(v uint64) *SyncerUpsertOne {
	return u.Update(func(s *SyncerUpsert) {
		s.SetStart(v)
	})
}

// UpdateStart sets the "start" field to the value that was provided on create.
func (u *SyncerUpsertOne) UpdateStart() *SyncerUpsertOne {
	return u.Update(func(s *SyncerUpsert) {
		s.UpdateStart()
	})
}

// SetFinish sets the "finish" field.
func (u *SyncerUpsertOne) SetFinish(v uint64) *SyncerUpsertOne {
	return u.Update(func(s *SyncerUpsert) {
		s.SetFinish(v)
	})
}

// UpdateFinish sets the "finish" field to the value that was provided on create.
func (u *SyncerUpsertOne) UpdateFinish() *SyncerUpsertOne {
	return u.Update(func(s *SyncerUpsert) {
		s.UpdateFinish()
	})
}

// SetCurrent sets the "current" field.
func (u *SyncerUpsertOne) SetCurrent(v uint64) *SyncerUpsertOne {
	return u.Update(func(s *SyncerUpsert) {
		s.SetCurrent(v)
	})
}

// UpdateCurrent sets the "current" field to the value that was provided on create.
func (u *SyncerUpsertOne) UpdateCurrent() *SyncerUpsertOne {
	return u.Update(func(s *SyncerUpsert) {
		s.UpdateCurrent()
	})
}

// Exec executes the query.
func (u *SyncerUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SyncerCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SyncerUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SyncerUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SyncerUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SyncerCreateBulk is the builder for creating many Syncer entities in bulk.
type SyncerCreateBulk struct {
	config
	builders []*SyncerCreate
	conflict []sql.ConflictOption
}

// Save creates the Syncer entities in the database.
func (scb *SyncerCreateBulk) Save(ctx context.Context) ([]*Syncer, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Syncer, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SyncerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SyncerCreateBulk) SaveX(ctx context.Context) []*Syncer {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SyncerCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SyncerCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Syncer.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SyncerUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
//
func (scb *SyncerCreateBulk) OnConflict(opts ...sql.ConflictOption) *SyncerUpsertBulk {
	scb.conflict = opts
	return &SyncerUpsertBulk{
		create: scb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Syncer.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (scb *SyncerCreateBulk) OnConflictColumns(columns ...string) *SyncerUpsertBulk {
	scb.conflict = append(scb.conflict, sql.ConflictColumns(columns...))
	return &SyncerUpsertBulk{
		create: scb,
	}
}

// SyncerUpsertBulk is the builder for "upsert"-ing
// a bulk of Syncer nodes.
type SyncerUpsertBulk struct {
	create *SyncerCreateBulk
}

// UpdateNewValues updates the fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Syncer.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *SyncerUpsertBulk) UpdateNewValues() *SyncerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Syncer.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *SyncerUpsertBulk) Ignore() *SyncerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SyncerUpsertBulk) DoNothing() *SyncerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SyncerCreateBulk.OnConflict
// documentation for more info.
func (u *SyncerUpsertBulk) Update(set func(*SyncerUpsert)) *SyncerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SyncerUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *SyncerUpsertBulk) SetName(v string) *SyncerUpsertBulk {
	return u.Update(func(s *SyncerUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SyncerUpsertBulk) UpdateName() *SyncerUpsertBulk {
	return u.Update(func(s *SyncerUpsert) {
		s.UpdateName()
	})
}

// SetStart sets the "start" field.
func (u *SyncerUpsertBulk) SetStart(v uint64) *SyncerUpsertBulk {
	return u.Update(func(s *SyncerUpsert) {
		s.SetStart(v)
	})
}

// UpdateStart sets the "start" field to the value that was provided on create.
func (u *SyncerUpsertBulk) UpdateStart() *SyncerUpsertBulk {
	return u.Update(func(s *SyncerUpsert) {
		s.UpdateStart()
	})
}

// SetFinish sets the "finish" field.
func (u *SyncerUpsertBulk) SetFinish(v uint64) *SyncerUpsertBulk {
	return u.Update(func(s *SyncerUpsert) {
		s.SetFinish(v)
	})
}

// UpdateFinish sets the "finish" field to the value that was provided on create.
func (u *SyncerUpsertBulk) UpdateFinish() *SyncerUpsertBulk {
	return u.Update(func(s *SyncerUpsert) {
		s.UpdateFinish()
	})
}

// SetCurrent sets the "current" field.
func (u *SyncerUpsertBulk) SetCurrent(v uint64) *SyncerUpsertBulk {
	return u.Update(func(s *SyncerUpsert) {
		s.SetCurrent(v)
	})
}

// UpdateCurrent sets the "current" field to the value that was provided on create.
func (u *SyncerUpsertBulk) UpdateCurrent() *SyncerUpsertBulk {
	return u.Update(func(s *SyncerUpsert) {
		s.UpdateCurrent()
	})
}

// Exec executes the query.
func (u *SyncerUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SyncerCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SyncerCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SyncerUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
