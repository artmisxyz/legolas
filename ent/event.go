// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/artmisxyz/blockinspector/ent/event"
	"github.com/artmisxyz/blockinspector/ent/uniswapv3collect"
	"github.com/artmisxyz/blockinspector/ent/uniswapv3decreaseliqudity"
	"github.com/artmisxyz/blockinspector/ent/uniswapv3increaseliqudity"
	"github.com/artmisxyz/blockinspector/ent/uniswapv3poolcreated"
	"github.com/artmisxyz/blockinspector/ent/uniswapv3transfer"
)

// Event is the model entity for the Event schema.
type Event struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Signature holds the value of the "signature" field.
	Signature string `json:"signature,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// BlockNumber holds the value of the "block_number" field.
	BlockNumber uint64 `json:"block_number,omitempty"`
	// TxHash holds the value of the "tx_hash" field.
	TxHash string `json:"tx_hash,omitempty"`
	// TxIndex holds the value of the "tx_index" field.
	TxIndex uint `json:"tx_index,omitempty"`
	// BlockHash holds the value of the "block_hash" field.
	BlockHash string `json:"block_hash,omitempty"`
	// Index holds the value of the "index" field.
	Index uint `json:"index,omitempty"`
	// Hash holds the value of the "hash" field.
	Hash string `json:"hash,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EventQuery when eager-loading is set.
	Edges EventEdges `json:"edges"`
}

// EventEdges holds the relations/edges for other nodes in the graph.
type EventEdges struct {
	// IncreaseLiquidity holds the value of the increase_liquidity edge.
	IncreaseLiquidity *UniswapV3IncreaseLiqudity `json:"increase_liquidity,omitempty"`
	// DecreaseLiquidity holds the value of the decrease_liquidity edge.
	DecreaseLiquidity *UniswapV3DecreaseLiqudity `json:"decrease_liquidity,omitempty"`
	// Collect holds the value of the collect edge.
	Collect *UniswapV3Collect `json:"collect,omitempty"`
	// Transfer holds the value of the transfer edge.
	Transfer *UniswapV3Transfer `json:"transfer,omitempty"`
	// PoolCreated holds the value of the pool_created edge.
	PoolCreated *UniswapV3PoolCreated `json:"pool_created,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// IncreaseLiquidityOrErr returns the IncreaseLiquidity value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventEdges) IncreaseLiquidityOrErr() (*UniswapV3IncreaseLiqudity, error) {
	if e.loadedTypes[0] {
		if e.IncreaseLiquidity == nil {
			// The edge increase_liquidity was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: uniswapv3increaseliqudity.Label}
		}
		return e.IncreaseLiquidity, nil
	}
	return nil, &NotLoadedError{edge: "increase_liquidity"}
}

// DecreaseLiquidityOrErr returns the DecreaseLiquidity value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventEdges) DecreaseLiquidityOrErr() (*UniswapV3DecreaseLiqudity, error) {
	if e.loadedTypes[1] {
		if e.DecreaseLiquidity == nil {
			// The edge decrease_liquidity was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: uniswapv3decreaseliqudity.Label}
		}
		return e.DecreaseLiquidity, nil
	}
	return nil, &NotLoadedError{edge: "decrease_liquidity"}
}

// CollectOrErr returns the Collect value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventEdges) CollectOrErr() (*UniswapV3Collect, error) {
	if e.loadedTypes[2] {
		if e.Collect == nil {
			// The edge collect was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: uniswapv3collect.Label}
		}
		return e.Collect, nil
	}
	return nil, &NotLoadedError{edge: "collect"}
}

// TransferOrErr returns the Transfer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventEdges) TransferOrErr() (*UniswapV3Transfer, error) {
	if e.loadedTypes[3] {
		if e.Transfer == nil {
			// The edge transfer was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: uniswapv3transfer.Label}
		}
		return e.Transfer, nil
	}
	return nil, &NotLoadedError{edge: "transfer"}
}

// PoolCreatedOrErr returns the PoolCreated value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventEdges) PoolCreatedOrErr() (*UniswapV3PoolCreated, error) {
	if e.loadedTypes[4] {
		if e.PoolCreated == nil {
			// The edge pool_created was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: uniswapv3poolcreated.Label}
		}
		return e.PoolCreated, nil
	}
	return nil, &NotLoadedError{edge: "pool_created"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Event) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case event.FieldID, event.FieldBlockNumber, event.FieldTxIndex, event.FieldIndex:
			values[i] = new(sql.NullInt64)
		case event.FieldName, event.FieldSignature, event.FieldAddress, event.FieldTxHash, event.FieldBlockHash, event.FieldHash:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Event", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Event fields.
func (e *Event) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case event.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = int(value.Int64)
		case event.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				e.Name = value.String
			}
		case event.FieldSignature:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field signature", values[i])
			} else if value.Valid {
				e.Signature = value.String
			}
		case event.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				e.Address = value.String
			}
		case event.FieldBlockNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field block_number", values[i])
			} else if value.Valid {
				e.BlockNumber = uint64(value.Int64)
			}
		case event.FieldTxHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tx_hash", values[i])
			} else if value.Valid {
				e.TxHash = value.String
			}
		case event.FieldTxIndex:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tx_index", values[i])
			} else if value.Valid {
				e.TxIndex = uint(value.Int64)
			}
		case event.FieldBlockHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field block_hash", values[i])
			} else if value.Valid {
				e.BlockHash = value.String
			}
		case event.FieldIndex:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field index", values[i])
			} else if value.Valid {
				e.Index = uint(value.Int64)
			}
		case event.FieldHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hash", values[i])
			} else if value.Valid {
				e.Hash = value.String
			}
		}
	}
	return nil
}

// QueryIncreaseLiquidity queries the "increase_liquidity" edge of the Event entity.
func (e *Event) QueryIncreaseLiquidity() *UniswapV3IncreaseLiqudityQuery {
	return (&EventClient{config: e.config}).QueryIncreaseLiquidity(e)
}

// QueryDecreaseLiquidity queries the "decrease_liquidity" edge of the Event entity.
func (e *Event) QueryDecreaseLiquidity() *UniswapV3DecreaseLiqudityQuery {
	return (&EventClient{config: e.config}).QueryDecreaseLiquidity(e)
}

// QueryCollect queries the "collect" edge of the Event entity.
func (e *Event) QueryCollect() *UniswapV3CollectQuery {
	return (&EventClient{config: e.config}).QueryCollect(e)
}

// QueryTransfer queries the "transfer" edge of the Event entity.
func (e *Event) QueryTransfer() *UniswapV3TransferQuery {
	return (&EventClient{config: e.config}).QueryTransfer(e)
}

// QueryPoolCreated queries the "pool_created" edge of the Event entity.
func (e *Event) QueryPoolCreated() *UniswapV3PoolCreatedQuery {
	return (&EventClient{config: e.config}).QueryPoolCreated(e)
}

// Update returns a builder for updating this Event.
// Note that you need to call Event.Unwrap() before calling this method if this Event
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Event) Update() *EventUpdateOne {
	return (&EventClient{config: e.config}).UpdateOne(e)
}

// Unwrap unwraps the Event entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Event) Unwrap() *Event {
	tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Event is not a transactional entity")
	}
	e.config.driver = tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Event) String() string {
	var builder strings.Builder
	builder.WriteString("Event(")
	builder.WriteString(fmt.Sprintf("id=%v", e.ID))
	builder.WriteString(", name=")
	builder.WriteString(e.Name)
	builder.WriteString(", signature=")
	builder.WriteString(e.Signature)
	builder.WriteString(", address=")
	builder.WriteString(e.Address)
	builder.WriteString(", block_number=")
	builder.WriteString(fmt.Sprintf("%v", e.BlockNumber))
	builder.WriteString(", tx_hash=")
	builder.WriteString(e.TxHash)
	builder.WriteString(", tx_index=")
	builder.WriteString(fmt.Sprintf("%v", e.TxIndex))
	builder.WriteString(", block_hash=")
	builder.WriteString(e.BlockHash)
	builder.WriteString(", index=")
	builder.WriteString(fmt.Sprintf("%v", e.Index))
	builder.WriteString(", hash=")
	builder.WriteString(e.Hash)
	builder.WriteByte(')')
	return builder.String()
}

// Events is a parsable slice of Event.
type Events []*Event

func (e Events) config(cfg config) {
	for _i := range e {
		e[_i].config = cfg
	}
}
