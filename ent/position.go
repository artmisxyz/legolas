// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/artmisxyz/blockinspector/ent/position"
	"github.com/artmisxyz/blockinspector/ent/schema"
)

// Position is the model entity for the Position schema.
type Position struct {
	config `json:"-"`
	// ID of the ent.
	ID *schema.BigInt `json:"id,omitempty"`
	// Owner holds the value of the "owner" field.
	Owner []byte `json:"owner,omitempty"`
	// Pool holds the value of the "pool" field.
	Pool []byte `json:"pool,omitempty"`
	// Token0 holds the value of the "token0" field.
	Token0 []byte `json:"token0,omitempty"`
	// Token1 holds the value of the "token1" field.
	Token1 []byte `json:"token1,omitempty"`
	// TickLower holds the value of the "tickLower" field.
	TickLower *schema.BigInt `json:"tickLower,omitempty"`
	// TickUpper holds the value of the "tickUpper" field.
	TickUpper *schema.BigInt `json:"tickUpper,omitempty"`
	// Liquidity holds the value of the "liquidity" field.
	Liquidity *schema.BigInt `json:"liquidity,omitempty"`
	// DepositedToken0 holds the value of the "depositedToken0" field.
	DepositedToken0 *schema.BigInt `json:"depositedToken0,omitempty"`
	// DepositedToken1 holds the value of the "depositedToken1" field.
	DepositedToken1 *schema.BigInt `json:"depositedToken1,omitempty"`
	// WithdrawnToken0 holds the value of the "withdrawnToken0" field.
	WithdrawnToken0 *schema.BigInt `json:"withdrawnToken0,omitempty"`
	// WithdrawnToken1 holds the value of the "withdrawnToken1" field.
	WithdrawnToken1 *schema.BigInt `json:"withdrawnToken1,omitempty"`
	// CollectedToken0 holds the value of the "collectedToken0" field.
	CollectedToken0 *schema.BigInt `json:"collectedToken0,omitempty"`
	// CollectedToken1 holds the value of the "collectedToken1" field.
	CollectedToken1 *schema.BigInt `json:"collectedToken1,omitempty"`
	// CollectedFeesToken0 holds the value of the "collectedFeesToken0" field.
	CollectedFeesToken0 *schema.BigInt `json:"collectedFeesToken0,omitempty"`
	// CollectedFeesToken1 holds the value of the "collectedFeesToken1" field.
	CollectedFeesToken1 *schema.BigInt `json:"collectedFeesToken1,omitempty"`
	// FeeGrowthInside0LastX128 holds the value of the "feeGrowthInside0LastX128" field.
	FeeGrowthInside0LastX128 *schema.BigInt `json:"feeGrowthInside0LastX128,omitempty"`
	// FeeGrowthInside1LastX128 holds the value of the "feeGrowthInside1LastX128" field.
	FeeGrowthInside1LastX128 *schema.BigInt `json:"feeGrowthInside1LastX128,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Position) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case position.FieldOwner, position.FieldPool, position.FieldToken0, position.FieldToken1:
			values[i] = new([]byte)
		case position.FieldID, position.FieldTickLower, position.FieldTickUpper, position.FieldLiquidity, position.FieldDepositedToken0, position.FieldDepositedToken1, position.FieldWithdrawnToken0, position.FieldWithdrawnToken1, position.FieldCollectedToken0, position.FieldCollectedToken1, position.FieldCollectedFeesToken0, position.FieldCollectedFeesToken1, position.FieldFeeGrowthInside0LastX128, position.FieldFeeGrowthInside1LastX128:
			values[i] = new(schema.BigInt)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Position", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Position fields.
func (po *Position) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case position.FieldID:
			if value, ok := values[i].(*schema.BigInt); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				po.ID = value
			}
		case position.FieldOwner:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field owner", values[i])
			} else if value != nil {
				po.Owner = *value
			}
		case position.FieldPool:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field pool", values[i])
			} else if value != nil {
				po.Pool = *value
			}
		case position.FieldToken0:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field token0", values[i])
			} else if value != nil {
				po.Token0 = *value
			}
		case position.FieldToken1:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field token1", values[i])
			} else if value != nil {
				po.Token1 = *value
			}
		case position.FieldTickLower:
			if value, ok := values[i].(*schema.BigInt); !ok {
				return fmt.Errorf("unexpected type %T for field tickLower", values[i])
			} else if value != nil {
				po.TickLower = value
			}
		case position.FieldTickUpper:
			if value, ok := values[i].(*schema.BigInt); !ok {
				return fmt.Errorf("unexpected type %T for field tickUpper", values[i])
			} else if value != nil {
				po.TickUpper = value
			}
		case position.FieldLiquidity:
			if value, ok := values[i].(*schema.BigInt); !ok {
				return fmt.Errorf("unexpected type %T for field liquidity", values[i])
			} else if value != nil {
				po.Liquidity = value
			}
		case position.FieldDepositedToken0:
			if value, ok := values[i].(*schema.BigInt); !ok {
				return fmt.Errorf("unexpected type %T for field depositedToken0", values[i])
			} else if value != nil {
				po.DepositedToken0 = value
			}
		case position.FieldDepositedToken1:
			if value, ok := values[i].(*schema.BigInt); !ok {
				return fmt.Errorf("unexpected type %T for field depositedToken1", values[i])
			} else if value != nil {
				po.DepositedToken1 = value
			}
		case position.FieldWithdrawnToken0:
			if value, ok := values[i].(*schema.BigInt); !ok {
				return fmt.Errorf("unexpected type %T for field withdrawnToken0", values[i])
			} else if value != nil {
				po.WithdrawnToken0 = value
			}
		case position.FieldWithdrawnToken1:
			if value, ok := values[i].(*schema.BigInt); !ok {
				return fmt.Errorf("unexpected type %T for field withdrawnToken1", values[i])
			} else if value != nil {
				po.WithdrawnToken1 = value
			}
		case position.FieldCollectedToken0:
			if value, ok := values[i].(*schema.BigInt); !ok {
				return fmt.Errorf("unexpected type %T for field collectedToken0", values[i])
			} else if value != nil {
				po.CollectedToken0 = value
			}
		case position.FieldCollectedToken1:
			if value, ok := values[i].(*schema.BigInt); !ok {
				return fmt.Errorf("unexpected type %T for field collectedToken1", values[i])
			} else if value != nil {
				po.CollectedToken1 = value
			}
		case position.FieldCollectedFeesToken0:
			if value, ok := values[i].(*schema.BigInt); !ok {
				return fmt.Errorf("unexpected type %T for field collectedFeesToken0", values[i])
			} else if value != nil {
				po.CollectedFeesToken0 = value
			}
		case position.FieldCollectedFeesToken1:
			if value, ok := values[i].(*schema.BigInt); !ok {
				return fmt.Errorf("unexpected type %T for field collectedFeesToken1", values[i])
			} else if value != nil {
				po.CollectedFeesToken1 = value
			}
		case position.FieldFeeGrowthInside0LastX128:
			if value, ok := values[i].(*schema.BigInt); !ok {
				return fmt.Errorf("unexpected type %T for field feeGrowthInside0LastX128", values[i])
			} else if value != nil {
				po.FeeGrowthInside0LastX128 = value
			}
		case position.FieldFeeGrowthInside1LastX128:
			if value, ok := values[i].(*schema.BigInt); !ok {
				return fmt.Errorf("unexpected type %T for field feeGrowthInside1LastX128", values[i])
			} else if value != nil {
				po.FeeGrowthInside1LastX128 = value
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Position.
// Note that you need to call Position.Unwrap() before calling this method if this Position
// was returned from a transaction, and the transaction was committed or rolled back.
func (po *Position) Update() *PositionUpdateOne {
	return (&PositionClient{config: po.config}).UpdateOne(po)
}

// Unwrap unwraps the Position entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (po *Position) Unwrap() *Position {
	tx, ok := po.config.driver.(*txDriver)
	if !ok {
		panic("ent: Position is not a transactional entity")
	}
	po.config.driver = tx.drv
	return po
}

// String implements the fmt.Stringer.
func (po *Position) String() string {
	var builder strings.Builder
	builder.WriteString("Position(")
	builder.WriteString(fmt.Sprintf("id=%v", po.ID))
	builder.WriteString(", owner=")
	builder.WriteString(fmt.Sprintf("%v", po.Owner))
	builder.WriteString(", pool=")
	builder.WriteString(fmt.Sprintf("%v", po.Pool))
	builder.WriteString(", token0=")
	builder.WriteString(fmt.Sprintf("%v", po.Token0))
	builder.WriteString(", token1=")
	builder.WriteString(fmt.Sprintf("%v", po.Token1))
	builder.WriteString(", tickLower=")
	builder.WriteString(fmt.Sprintf("%v", po.TickLower))
	builder.WriteString(", tickUpper=")
	builder.WriteString(fmt.Sprintf("%v", po.TickUpper))
	builder.WriteString(", liquidity=")
	builder.WriteString(fmt.Sprintf("%v", po.Liquidity))
	builder.WriteString(", depositedToken0=")
	builder.WriteString(fmt.Sprintf("%v", po.DepositedToken0))
	builder.WriteString(", depositedToken1=")
	builder.WriteString(fmt.Sprintf("%v", po.DepositedToken1))
	builder.WriteString(", withdrawnToken0=")
	builder.WriteString(fmt.Sprintf("%v", po.WithdrawnToken0))
	builder.WriteString(", withdrawnToken1=")
	builder.WriteString(fmt.Sprintf("%v", po.WithdrawnToken1))
	builder.WriteString(", collectedToken0=")
	builder.WriteString(fmt.Sprintf("%v", po.CollectedToken0))
	builder.WriteString(", collectedToken1=")
	builder.WriteString(fmt.Sprintf("%v", po.CollectedToken1))
	builder.WriteString(", collectedFeesToken0=")
	builder.WriteString(fmt.Sprintf("%v", po.CollectedFeesToken0))
	builder.WriteString(", collectedFeesToken1=")
	builder.WriteString(fmt.Sprintf("%v", po.CollectedFeesToken1))
	builder.WriteString(", feeGrowthInside0LastX128=")
	builder.WriteString(fmt.Sprintf("%v", po.FeeGrowthInside0LastX128))
	builder.WriteString(", feeGrowthInside1LastX128=")
	builder.WriteString(fmt.Sprintf("%v", po.FeeGrowthInside1LastX128))
	builder.WriteByte(')')
	return builder.String()
}

// Positions is a parsable slice of Position.
type Positions []*Position

func (po Positions) config(cfg config) {
	for _i := range po {
		po[_i].config = cfg
	}
}
