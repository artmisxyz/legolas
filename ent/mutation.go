// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/artmisxyz/legolas/ent/event"
	"github.com/artmisxyz/legolas/ent/predicate"
	"github.com/artmisxyz/legolas/ent/syncer"
	"github.com/artmisxyz/legolas/ent/uniswapv3collect"
	"github.com/artmisxyz/legolas/ent/uniswapv3decreaseliqudity"
	"github.com/artmisxyz/legolas/ent/uniswapv3increaseliqudity"
	"github.com/artmisxyz/legolas/ent/uniswapv3poolburn"
	"github.com/artmisxyz/legolas/ent/uniswapv3poolcreated"
	"github.com/artmisxyz/legolas/ent/uniswapv3poolflash"
	"github.com/artmisxyz/legolas/ent/uniswapv3poolinitialize"
	"github.com/artmisxyz/legolas/ent/uniswapv3poolmint"
	"github.com/artmisxyz/legolas/ent/uniswapv3poolswap"
	"github.com/artmisxyz/legolas/ent/uniswapv3transfer"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeEvent                     = "Event"
	TypeSyncer                    = "Syncer"
	TypeUniswapV3Collect          = "UniswapV3Collect"
	TypeUniswapV3DecreaseLiqudity = "UniswapV3DecreaseLiqudity"
	TypeUniswapV3IncreaseLiqudity = "UniswapV3IncreaseLiqudity"
	TypeUniswapV3PoolBurn         = "UniswapV3PoolBurn"
	TypeUniswapV3PoolCreated      = "UniswapV3PoolCreated"
	TypeUniswapV3PoolFlash        = "UniswapV3PoolFlash"
	TypeUniswapV3PoolInitialize   = "UniswapV3PoolInitialize"
	TypeUniswapV3PoolMint         = "UniswapV3PoolMint"
	TypeUniswapV3PoolSwap         = "UniswapV3PoolSwap"
	TypeUniswapV3Transfer         = "UniswapV3Transfer"
)

// EventMutation represents an operation that mutates the Event nodes in the graph.
type EventMutation struct {
	config
	op                        Op
	typ                       string
	id                        *int
	time                      *time.Time
	name                      *string
	signature                 *string
	address                   *string
	block_number              *uint64
	addblock_number           *uint64
	tx_hash                   *string
	tx_index                  *uint
	addtx_index               *uint
	block_hash                *string
	index                     *uint
	addindex                  *uint
	clearedFields             map[string]struct{}
	increase_liquidity        *int
	clearedincrease_liquidity bool
	decrease_liquidity        *int
	cleareddecrease_liquidity bool
	collect                   *int
	clearedcollect            bool
	transfer                  *int
	clearedtransfer           bool
	pool_created              *int
	clearedpool_created       bool
	pool_initialize           *int
	clearedpool_initialize    bool
	pool_swap                 *int
	clearedpool_swap          bool
	pool_mint                 *int
	clearedpool_mint          bool
	pool_burn                 *int
	clearedpool_burn          bool
	pool_flash                *int
	clearedpool_flash         bool
	done                      bool
	oldValue                  func(context.Context) (*Event, error)
	predicates                []predicate.Event
}

var _ ent.Mutation = (*EventMutation)(nil)

// eventOption allows management of the mutation configuration using functional options.
type eventOption func(*EventMutation)

// newEventMutation creates new mutation for the Event entity.
func newEventMutation(c config, op Op, opts ...eventOption) *EventMutation {
	m := &EventMutation{
		config:        c,
		op:            op,
		typ:           TypeEvent,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEventID sets the ID field of the mutation.
func withEventID(id int) eventOption {
	return func(m *EventMutation) {
		var (
			err   error
			once  sync.Once
			value *Event
		)
		m.oldValue = func(ctx context.Context) (*Event, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Event.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEvent sets the old Event of the mutation.
func withEvent(node *Event) eventOption {
	return func(m *EventMutation) {
		m.oldValue = func(context.Context) (*Event, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EventMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EventMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EventMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetTime sets the "time" field.
func (m *EventMutation) SetTime(t time.Time) {
	m.time = &t
}

// Time returns the value of the "time" field in the mutation.
func (m *EventMutation) Time() (r time.Time, exists bool) {
	v := m.time
	if v == nil {
		return
	}
	return *v, true
}

// OldTime returns the old "time" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTime: %w", err)
	}
	return oldValue.Time, nil
}

// ResetTime resets all changes to the "time" field.
func (m *EventMutation) ResetTime() {
	m.time = nil
}

// SetName sets the "name" field.
func (m *EventMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *EventMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *EventMutation) ResetName() {
	m.name = nil
}

// SetSignature sets the "signature" field.
func (m *EventMutation) SetSignature(s string) {
	m.signature = &s
}

// Signature returns the value of the "signature" field in the mutation.
func (m *EventMutation) Signature() (r string, exists bool) {
	v := m.signature
	if v == nil {
		return
	}
	return *v, true
}

// OldSignature returns the old "signature" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldSignature(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSignature is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSignature requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSignature: %w", err)
	}
	return oldValue.Signature, nil
}

// ResetSignature resets all changes to the "signature" field.
func (m *EventMutation) ResetSignature() {
	m.signature = nil
}

// SetAddress sets the "address" field.
func (m *EventMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *EventMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ResetAddress resets all changes to the "address" field.
func (m *EventMutation) ResetAddress() {
	m.address = nil
}

// SetBlockNumber sets the "block_number" field.
func (m *EventMutation) SetBlockNumber(u uint64) {
	m.block_number = &u
	m.addblock_number = nil
}

// BlockNumber returns the value of the "block_number" field in the mutation.
func (m *EventMutation) BlockNumber() (r uint64, exists bool) {
	v := m.block_number
	if v == nil {
		return
	}
	return *v, true
}

// OldBlockNumber returns the old "block_number" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldBlockNumber(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldBlockNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldBlockNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBlockNumber: %w", err)
	}
	return oldValue.BlockNumber, nil
}

// AddBlockNumber adds u to the "block_number" field.
func (m *EventMutation) AddBlockNumber(u uint64) {
	if m.addblock_number != nil {
		*m.addblock_number += u
	} else {
		m.addblock_number = &u
	}
}

// AddedBlockNumber returns the value that was added to the "block_number" field in this mutation.
func (m *EventMutation) AddedBlockNumber() (r uint64, exists bool) {
	v := m.addblock_number
	if v == nil {
		return
	}
	return *v, true
}

// ResetBlockNumber resets all changes to the "block_number" field.
func (m *EventMutation) ResetBlockNumber() {
	m.block_number = nil
	m.addblock_number = nil
}

// SetTxHash sets the "tx_hash" field.
func (m *EventMutation) SetTxHash(s string) {
	m.tx_hash = &s
}

// TxHash returns the value of the "tx_hash" field in the mutation.
func (m *EventMutation) TxHash() (r string, exists bool) {
	v := m.tx_hash
	if v == nil {
		return
	}
	return *v, true
}

// OldTxHash returns the old "tx_hash" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldTxHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTxHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTxHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTxHash: %w", err)
	}
	return oldValue.TxHash, nil
}

// ResetTxHash resets all changes to the "tx_hash" field.
func (m *EventMutation) ResetTxHash() {
	m.tx_hash = nil
}

// SetTxIndex sets the "tx_index" field.
func (m *EventMutation) SetTxIndex(u uint) {
	m.tx_index = &u
	m.addtx_index = nil
}

// TxIndex returns the value of the "tx_index" field in the mutation.
func (m *EventMutation) TxIndex() (r uint, exists bool) {
	v := m.tx_index
	if v == nil {
		return
	}
	return *v, true
}

// OldTxIndex returns the old "tx_index" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldTxIndex(ctx context.Context) (v uint, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTxIndex is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTxIndex requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTxIndex: %w", err)
	}
	return oldValue.TxIndex, nil
}

// AddTxIndex adds u to the "tx_index" field.
func (m *EventMutation) AddTxIndex(u uint) {
	if m.addtx_index != nil {
		*m.addtx_index += u
	} else {
		m.addtx_index = &u
	}
}

// AddedTxIndex returns the value that was added to the "tx_index" field in this mutation.
func (m *EventMutation) AddedTxIndex() (r uint, exists bool) {
	v := m.addtx_index
	if v == nil {
		return
	}
	return *v, true
}

// ResetTxIndex resets all changes to the "tx_index" field.
func (m *EventMutation) ResetTxIndex() {
	m.tx_index = nil
	m.addtx_index = nil
}

// SetBlockHash sets the "block_hash" field.
func (m *EventMutation) SetBlockHash(s string) {
	m.block_hash = &s
}

// BlockHash returns the value of the "block_hash" field in the mutation.
func (m *EventMutation) BlockHash() (r string, exists bool) {
	v := m.block_hash
	if v == nil {
		return
	}
	return *v, true
}

// OldBlockHash returns the old "block_hash" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldBlockHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldBlockHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldBlockHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBlockHash: %w", err)
	}
	return oldValue.BlockHash, nil
}

// ResetBlockHash resets all changes to the "block_hash" field.
func (m *EventMutation) ResetBlockHash() {
	m.block_hash = nil
}

// SetIndex sets the "index" field.
func (m *EventMutation) SetIndex(u uint) {
	m.index = &u
	m.addindex = nil
}

// Index returns the value of the "index" field in the mutation.
func (m *EventMutation) Index() (r uint, exists bool) {
	v := m.index
	if v == nil {
		return
	}
	return *v, true
}

// OldIndex returns the old "index" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldIndex(ctx context.Context) (v uint, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIndex is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIndex requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIndex: %w", err)
	}
	return oldValue.Index, nil
}

// AddIndex adds u to the "index" field.
func (m *EventMutation) AddIndex(u uint) {
	if m.addindex != nil {
		*m.addindex += u
	} else {
		m.addindex = &u
	}
}

// AddedIndex returns the value that was added to the "index" field in this mutation.
func (m *EventMutation) AddedIndex() (r uint, exists bool) {
	v := m.addindex
	if v == nil {
		return
	}
	return *v, true
}

// ResetIndex resets all changes to the "index" field.
func (m *EventMutation) ResetIndex() {
	m.index = nil
	m.addindex = nil
}

// SetIncreaseLiquidityID sets the "increase_liquidity" edge to the UniswapV3IncreaseLiqudity entity by id.
func (m *EventMutation) SetIncreaseLiquidityID(id int) {
	m.increase_liquidity = &id
}

// ClearIncreaseLiquidity clears the "increase_liquidity" edge to the UniswapV3IncreaseLiqudity entity.
func (m *EventMutation) ClearIncreaseLiquidity() {
	m.clearedincrease_liquidity = true
}

// IncreaseLiquidityCleared reports if the "increase_liquidity" edge to the UniswapV3IncreaseLiqudity entity was cleared.
func (m *EventMutation) IncreaseLiquidityCleared() bool {
	return m.clearedincrease_liquidity
}

// IncreaseLiquidityID returns the "increase_liquidity" edge ID in the mutation.
func (m *EventMutation) IncreaseLiquidityID() (id int, exists bool) {
	if m.increase_liquidity != nil {
		return *m.increase_liquidity, true
	}
	return
}

// IncreaseLiquidityIDs returns the "increase_liquidity" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// IncreaseLiquidityID instead. It exists only for internal usage by the builders.
func (m *EventMutation) IncreaseLiquidityIDs() (ids []int) {
	if id := m.increase_liquidity; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetIncreaseLiquidity resets all changes to the "increase_liquidity" edge.
func (m *EventMutation) ResetIncreaseLiquidity() {
	m.increase_liquidity = nil
	m.clearedincrease_liquidity = false
}

// SetDecreaseLiquidityID sets the "decrease_liquidity" edge to the UniswapV3DecreaseLiqudity entity by id.
func (m *EventMutation) SetDecreaseLiquidityID(id int) {
	m.decrease_liquidity = &id
}

// ClearDecreaseLiquidity clears the "decrease_liquidity" edge to the UniswapV3DecreaseLiqudity entity.
func (m *EventMutation) ClearDecreaseLiquidity() {
	m.cleareddecrease_liquidity = true
}

// DecreaseLiquidityCleared reports if the "decrease_liquidity" edge to the UniswapV3DecreaseLiqudity entity was cleared.
func (m *EventMutation) DecreaseLiquidityCleared() bool {
	return m.cleareddecrease_liquidity
}

// DecreaseLiquidityID returns the "decrease_liquidity" edge ID in the mutation.
func (m *EventMutation) DecreaseLiquidityID() (id int, exists bool) {
	if m.decrease_liquidity != nil {
		return *m.decrease_liquidity, true
	}
	return
}

// DecreaseLiquidityIDs returns the "decrease_liquidity" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// DecreaseLiquidityID instead. It exists only for internal usage by the builders.
func (m *EventMutation) DecreaseLiquidityIDs() (ids []int) {
	if id := m.decrease_liquidity; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDecreaseLiquidity resets all changes to the "decrease_liquidity" edge.
func (m *EventMutation) ResetDecreaseLiquidity() {
	m.decrease_liquidity = nil
	m.cleareddecrease_liquidity = false
}

// SetCollectID sets the "collect" edge to the UniswapV3Collect entity by id.
func (m *EventMutation) SetCollectID(id int) {
	m.collect = &id
}

// ClearCollect clears the "collect" edge to the UniswapV3Collect entity.
func (m *EventMutation) ClearCollect() {
	m.clearedcollect = true
}

// CollectCleared reports if the "collect" edge to the UniswapV3Collect entity was cleared.
func (m *EventMutation) CollectCleared() bool {
	return m.clearedcollect
}

// CollectID returns the "collect" edge ID in the mutation.
func (m *EventMutation) CollectID() (id int, exists bool) {
	if m.collect != nil {
		return *m.collect, true
	}
	return
}

// CollectIDs returns the "collect" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CollectID instead. It exists only for internal usage by the builders.
func (m *EventMutation) CollectIDs() (ids []int) {
	if id := m.collect; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCollect resets all changes to the "collect" edge.
func (m *EventMutation) ResetCollect() {
	m.collect = nil
	m.clearedcollect = false
}

// SetTransferID sets the "transfer" edge to the UniswapV3Transfer entity by id.
func (m *EventMutation) SetTransferID(id int) {
	m.transfer = &id
}

// ClearTransfer clears the "transfer" edge to the UniswapV3Transfer entity.
func (m *EventMutation) ClearTransfer() {
	m.clearedtransfer = true
}

// TransferCleared reports if the "transfer" edge to the UniswapV3Transfer entity was cleared.
func (m *EventMutation) TransferCleared() bool {
	return m.clearedtransfer
}

// TransferID returns the "transfer" edge ID in the mutation.
func (m *EventMutation) TransferID() (id int, exists bool) {
	if m.transfer != nil {
		return *m.transfer, true
	}
	return
}

// TransferIDs returns the "transfer" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TransferID instead. It exists only for internal usage by the builders.
func (m *EventMutation) TransferIDs() (ids []int) {
	if id := m.transfer; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTransfer resets all changes to the "transfer" edge.
func (m *EventMutation) ResetTransfer() {
	m.transfer = nil
	m.clearedtransfer = false
}

// SetPoolCreatedID sets the "pool_created" edge to the UniswapV3PoolCreated entity by id.
func (m *EventMutation) SetPoolCreatedID(id int) {
	m.pool_created = &id
}

// ClearPoolCreated clears the "pool_created" edge to the UniswapV3PoolCreated entity.
func (m *EventMutation) ClearPoolCreated() {
	m.clearedpool_created = true
}

// PoolCreatedCleared reports if the "pool_created" edge to the UniswapV3PoolCreated entity was cleared.
func (m *EventMutation) PoolCreatedCleared() bool {
	return m.clearedpool_created
}

// PoolCreatedID returns the "pool_created" edge ID in the mutation.
func (m *EventMutation) PoolCreatedID() (id int, exists bool) {
	if m.pool_created != nil {
		return *m.pool_created, true
	}
	return
}

// PoolCreatedIDs returns the "pool_created" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PoolCreatedID instead. It exists only for internal usage by the builders.
func (m *EventMutation) PoolCreatedIDs() (ids []int) {
	if id := m.pool_created; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPoolCreated resets all changes to the "pool_created" edge.
func (m *EventMutation) ResetPoolCreated() {
	m.pool_created = nil
	m.clearedpool_created = false
}

// SetPoolInitializeID sets the "pool_initialize" edge to the UniswapV3PoolInitialize entity by id.
func (m *EventMutation) SetPoolInitializeID(id int) {
	m.pool_initialize = &id
}

// ClearPoolInitialize clears the "pool_initialize" edge to the UniswapV3PoolInitialize entity.
func (m *EventMutation) ClearPoolInitialize() {
	m.clearedpool_initialize = true
}

// PoolInitializeCleared reports if the "pool_initialize" edge to the UniswapV3PoolInitialize entity was cleared.
func (m *EventMutation) PoolInitializeCleared() bool {
	return m.clearedpool_initialize
}

// PoolInitializeID returns the "pool_initialize" edge ID in the mutation.
func (m *EventMutation) PoolInitializeID() (id int, exists bool) {
	if m.pool_initialize != nil {
		return *m.pool_initialize, true
	}
	return
}

// PoolInitializeIDs returns the "pool_initialize" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PoolInitializeID instead. It exists only for internal usage by the builders.
func (m *EventMutation) PoolInitializeIDs() (ids []int) {
	if id := m.pool_initialize; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPoolInitialize resets all changes to the "pool_initialize" edge.
func (m *EventMutation) ResetPoolInitialize() {
	m.pool_initialize = nil
	m.clearedpool_initialize = false
}

// SetPoolSwapID sets the "pool_swap" edge to the UniswapV3PoolSwap entity by id.
func (m *EventMutation) SetPoolSwapID(id int) {
	m.pool_swap = &id
}

// ClearPoolSwap clears the "pool_swap" edge to the UniswapV3PoolSwap entity.
func (m *EventMutation) ClearPoolSwap() {
	m.clearedpool_swap = true
}

// PoolSwapCleared reports if the "pool_swap" edge to the UniswapV3PoolSwap entity was cleared.
func (m *EventMutation) PoolSwapCleared() bool {
	return m.clearedpool_swap
}

// PoolSwapID returns the "pool_swap" edge ID in the mutation.
func (m *EventMutation) PoolSwapID() (id int, exists bool) {
	if m.pool_swap != nil {
		return *m.pool_swap, true
	}
	return
}

// PoolSwapIDs returns the "pool_swap" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PoolSwapID instead. It exists only for internal usage by the builders.
func (m *EventMutation) PoolSwapIDs() (ids []int) {
	if id := m.pool_swap; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPoolSwap resets all changes to the "pool_swap" edge.
func (m *EventMutation) ResetPoolSwap() {
	m.pool_swap = nil
	m.clearedpool_swap = false
}

// SetPoolMintID sets the "pool_mint" edge to the UniswapV3PoolMint entity by id.
func (m *EventMutation) SetPoolMintID(id int) {
	m.pool_mint = &id
}

// ClearPoolMint clears the "pool_mint" edge to the UniswapV3PoolMint entity.
func (m *EventMutation) ClearPoolMint() {
	m.clearedpool_mint = true
}

// PoolMintCleared reports if the "pool_mint" edge to the UniswapV3PoolMint entity was cleared.
func (m *EventMutation) PoolMintCleared() bool {
	return m.clearedpool_mint
}

// PoolMintID returns the "pool_mint" edge ID in the mutation.
func (m *EventMutation) PoolMintID() (id int, exists bool) {
	if m.pool_mint != nil {
		return *m.pool_mint, true
	}
	return
}

// PoolMintIDs returns the "pool_mint" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PoolMintID instead. It exists only for internal usage by the builders.
func (m *EventMutation) PoolMintIDs() (ids []int) {
	if id := m.pool_mint; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPoolMint resets all changes to the "pool_mint" edge.
func (m *EventMutation) ResetPoolMint() {
	m.pool_mint = nil
	m.clearedpool_mint = false
}

// SetPoolBurnID sets the "pool_burn" edge to the UniswapV3PoolBurn entity by id.
func (m *EventMutation) SetPoolBurnID(id int) {
	m.pool_burn = &id
}

// ClearPoolBurn clears the "pool_burn" edge to the UniswapV3PoolBurn entity.
func (m *EventMutation) ClearPoolBurn() {
	m.clearedpool_burn = true
}

// PoolBurnCleared reports if the "pool_burn" edge to the UniswapV3PoolBurn entity was cleared.
func (m *EventMutation) PoolBurnCleared() bool {
	return m.clearedpool_burn
}

// PoolBurnID returns the "pool_burn" edge ID in the mutation.
func (m *EventMutation) PoolBurnID() (id int, exists bool) {
	if m.pool_burn != nil {
		return *m.pool_burn, true
	}
	return
}

// PoolBurnIDs returns the "pool_burn" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PoolBurnID instead. It exists only for internal usage by the builders.
func (m *EventMutation) PoolBurnIDs() (ids []int) {
	if id := m.pool_burn; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPoolBurn resets all changes to the "pool_burn" edge.
func (m *EventMutation) ResetPoolBurn() {
	m.pool_burn = nil
	m.clearedpool_burn = false
}

// SetPoolFlashID sets the "pool_flash" edge to the UniswapV3PoolFlash entity by id.
func (m *EventMutation) SetPoolFlashID(id int) {
	m.pool_flash = &id
}

// ClearPoolFlash clears the "pool_flash" edge to the UniswapV3PoolFlash entity.
func (m *EventMutation) ClearPoolFlash() {
	m.clearedpool_flash = true
}

// PoolFlashCleared reports if the "pool_flash" edge to the UniswapV3PoolFlash entity was cleared.
func (m *EventMutation) PoolFlashCleared() bool {
	return m.clearedpool_flash
}

// PoolFlashID returns the "pool_flash" edge ID in the mutation.
func (m *EventMutation) PoolFlashID() (id int, exists bool) {
	if m.pool_flash != nil {
		return *m.pool_flash, true
	}
	return
}

// PoolFlashIDs returns the "pool_flash" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PoolFlashID instead. It exists only for internal usage by the builders.
func (m *EventMutation) PoolFlashIDs() (ids []int) {
	if id := m.pool_flash; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPoolFlash resets all changes to the "pool_flash" edge.
func (m *EventMutation) ResetPoolFlash() {
	m.pool_flash = nil
	m.clearedpool_flash = false
}

// Where appends a list predicates to the EventMutation builder.
func (m *EventMutation) Where(ps ...predicate.Event) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *EventMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Event).
func (m *EventMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EventMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.time != nil {
		fields = append(fields, event.FieldTime)
	}
	if m.name != nil {
		fields = append(fields, event.FieldName)
	}
	if m.signature != nil {
		fields = append(fields, event.FieldSignature)
	}
	if m.address != nil {
		fields = append(fields, event.FieldAddress)
	}
	if m.block_number != nil {
		fields = append(fields, event.FieldBlockNumber)
	}
	if m.tx_hash != nil {
		fields = append(fields, event.FieldTxHash)
	}
	if m.tx_index != nil {
		fields = append(fields, event.FieldTxIndex)
	}
	if m.block_hash != nil {
		fields = append(fields, event.FieldBlockHash)
	}
	if m.index != nil {
		fields = append(fields, event.FieldIndex)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EventMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case event.FieldTime:
		return m.Time()
	case event.FieldName:
		return m.Name()
	case event.FieldSignature:
		return m.Signature()
	case event.FieldAddress:
		return m.Address()
	case event.FieldBlockNumber:
		return m.BlockNumber()
	case event.FieldTxHash:
		return m.TxHash()
	case event.FieldTxIndex:
		return m.TxIndex()
	case event.FieldBlockHash:
		return m.BlockHash()
	case event.FieldIndex:
		return m.Index()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EventMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case event.FieldTime:
		return m.OldTime(ctx)
	case event.FieldName:
		return m.OldName(ctx)
	case event.FieldSignature:
		return m.OldSignature(ctx)
	case event.FieldAddress:
		return m.OldAddress(ctx)
	case event.FieldBlockNumber:
		return m.OldBlockNumber(ctx)
	case event.FieldTxHash:
		return m.OldTxHash(ctx)
	case event.FieldTxIndex:
		return m.OldTxIndex(ctx)
	case event.FieldBlockHash:
		return m.OldBlockHash(ctx)
	case event.FieldIndex:
		return m.OldIndex(ctx)
	}
	return nil, fmt.Errorf("unknown Event field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EventMutation) SetField(name string, value ent.Value) error {
	switch name {
	case event.FieldTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTime(v)
		return nil
	case event.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case event.FieldSignature:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSignature(v)
		return nil
	case event.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case event.FieldBlockNumber:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBlockNumber(v)
		return nil
	case event.FieldTxHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTxHash(v)
		return nil
	case event.FieldTxIndex:
		v, ok := value.(uint)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTxIndex(v)
		return nil
	case event.FieldBlockHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBlockHash(v)
		return nil
	case event.FieldIndex:
		v, ok := value.(uint)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIndex(v)
		return nil
	}
	return fmt.Errorf("unknown Event field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EventMutation) AddedFields() []string {
	var fields []string
	if m.addblock_number != nil {
		fields = append(fields, event.FieldBlockNumber)
	}
	if m.addtx_index != nil {
		fields = append(fields, event.FieldTxIndex)
	}
	if m.addindex != nil {
		fields = append(fields, event.FieldIndex)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EventMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case event.FieldBlockNumber:
		return m.AddedBlockNumber()
	case event.FieldTxIndex:
		return m.AddedTxIndex()
	case event.FieldIndex:
		return m.AddedIndex()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EventMutation) AddField(name string, value ent.Value) error {
	switch name {
	case event.FieldBlockNumber:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBlockNumber(v)
		return nil
	case event.FieldTxIndex:
		v, ok := value.(uint)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTxIndex(v)
		return nil
	case event.FieldIndex:
		v, ok := value.(uint)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddIndex(v)
		return nil
	}
	return fmt.Errorf("unknown Event numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EventMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EventMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EventMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Event nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EventMutation) ResetField(name string) error {
	switch name {
	case event.FieldTime:
		m.ResetTime()
		return nil
	case event.FieldName:
		m.ResetName()
		return nil
	case event.FieldSignature:
		m.ResetSignature()
		return nil
	case event.FieldAddress:
		m.ResetAddress()
		return nil
	case event.FieldBlockNumber:
		m.ResetBlockNumber()
		return nil
	case event.FieldTxHash:
		m.ResetTxHash()
		return nil
	case event.FieldTxIndex:
		m.ResetTxIndex()
		return nil
	case event.FieldBlockHash:
		m.ResetBlockHash()
		return nil
	case event.FieldIndex:
		m.ResetIndex()
		return nil
	}
	return fmt.Errorf("unknown Event field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EventMutation) AddedEdges() []string {
	edges := make([]string, 0, 10)
	if m.increase_liquidity != nil {
		edges = append(edges, event.EdgeIncreaseLiquidity)
	}
	if m.decrease_liquidity != nil {
		edges = append(edges, event.EdgeDecreaseLiquidity)
	}
	if m.collect != nil {
		edges = append(edges, event.EdgeCollect)
	}
	if m.transfer != nil {
		edges = append(edges, event.EdgeTransfer)
	}
	if m.pool_created != nil {
		edges = append(edges, event.EdgePoolCreated)
	}
	if m.pool_initialize != nil {
		edges = append(edges, event.EdgePoolInitialize)
	}
	if m.pool_swap != nil {
		edges = append(edges, event.EdgePoolSwap)
	}
	if m.pool_mint != nil {
		edges = append(edges, event.EdgePoolMint)
	}
	if m.pool_burn != nil {
		edges = append(edges, event.EdgePoolBurn)
	}
	if m.pool_flash != nil {
		edges = append(edges, event.EdgePoolFlash)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EventMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case event.EdgeIncreaseLiquidity:
		if id := m.increase_liquidity; id != nil {
			return []ent.Value{*id}
		}
	case event.EdgeDecreaseLiquidity:
		if id := m.decrease_liquidity; id != nil {
			return []ent.Value{*id}
		}
	case event.EdgeCollect:
		if id := m.collect; id != nil {
			return []ent.Value{*id}
		}
	case event.EdgeTransfer:
		if id := m.transfer; id != nil {
			return []ent.Value{*id}
		}
	case event.EdgePoolCreated:
		if id := m.pool_created; id != nil {
			return []ent.Value{*id}
		}
	case event.EdgePoolInitialize:
		if id := m.pool_initialize; id != nil {
			return []ent.Value{*id}
		}
	case event.EdgePoolSwap:
		if id := m.pool_swap; id != nil {
			return []ent.Value{*id}
		}
	case event.EdgePoolMint:
		if id := m.pool_mint; id != nil {
			return []ent.Value{*id}
		}
	case event.EdgePoolBurn:
		if id := m.pool_burn; id != nil {
			return []ent.Value{*id}
		}
	case event.EdgePoolFlash:
		if id := m.pool_flash; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EventMutation) RemovedEdges() []string {
	edges := make([]string, 0, 10)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EventMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EventMutation) ClearedEdges() []string {
	edges := make([]string, 0, 10)
	if m.clearedincrease_liquidity {
		edges = append(edges, event.EdgeIncreaseLiquidity)
	}
	if m.cleareddecrease_liquidity {
		edges = append(edges, event.EdgeDecreaseLiquidity)
	}
	if m.clearedcollect {
		edges = append(edges, event.EdgeCollect)
	}
	if m.clearedtransfer {
		edges = append(edges, event.EdgeTransfer)
	}
	if m.clearedpool_created {
		edges = append(edges, event.EdgePoolCreated)
	}
	if m.clearedpool_initialize {
		edges = append(edges, event.EdgePoolInitialize)
	}
	if m.clearedpool_swap {
		edges = append(edges, event.EdgePoolSwap)
	}
	if m.clearedpool_mint {
		edges = append(edges, event.EdgePoolMint)
	}
	if m.clearedpool_burn {
		edges = append(edges, event.EdgePoolBurn)
	}
	if m.clearedpool_flash {
		edges = append(edges, event.EdgePoolFlash)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EventMutation) EdgeCleared(name string) bool {
	switch name {
	case event.EdgeIncreaseLiquidity:
		return m.clearedincrease_liquidity
	case event.EdgeDecreaseLiquidity:
		return m.cleareddecrease_liquidity
	case event.EdgeCollect:
		return m.clearedcollect
	case event.EdgeTransfer:
		return m.clearedtransfer
	case event.EdgePoolCreated:
		return m.clearedpool_created
	case event.EdgePoolInitialize:
		return m.clearedpool_initialize
	case event.EdgePoolSwap:
		return m.clearedpool_swap
	case event.EdgePoolMint:
		return m.clearedpool_mint
	case event.EdgePoolBurn:
		return m.clearedpool_burn
	case event.EdgePoolFlash:
		return m.clearedpool_flash
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EventMutation) ClearEdge(name string) error {
	switch name {
	case event.EdgeIncreaseLiquidity:
		m.ClearIncreaseLiquidity()
		return nil
	case event.EdgeDecreaseLiquidity:
		m.ClearDecreaseLiquidity()
		return nil
	case event.EdgeCollect:
		m.ClearCollect()
		return nil
	case event.EdgeTransfer:
		m.ClearTransfer()
		return nil
	case event.EdgePoolCreated:
		m.ClearPoolCreated()
		return nil
	case event.EdgePoolInitialize:
		m.ClearPoolInitialize()
		return nil
	case event.EdgePoolSwap:
		m.ClearPoolSwap()
		return nil
	case event.EdgePoolMint:
		m.ClearPoolMint()
		return nil
	case event.EdgePoolBurn:
		m.ClearPoolBurn()
		return nil
	case event.EdgePoolFlash:
		m.ClearPoolFlash()
		return nil
	}
	return fmt.Errorf("unknown Event unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EventMutation) ResetEdge(name string) error {
	switch name {
	case event.EdgeIncreaseLiquidity:
		m.ResetIncreaseLiquidity()
		return nil
	case event.EdgeDecreaseLiquidity:
		m.ResetDecreaseLiquidity()
		return nil
	case event.EdgeCollect:
		m.ResetCollect()
		return nil
	case event.EdgeTransfer:
		m.ResetTransfer()
		return nil
	case event.EdgePoolCreated:
		m.ResetPoolCreated()
		return nil
	case event.EdgePoolInitialize:
		m.ResetPoolInitialize()
		return nil
	case event.EdgePoolSwap:
		m.ResetPoolSwap()
		return nil
	case event.EdgePoolMint:
		m.ResetPoolMint()
		return nil
	case event.EdgePoolBurn:
		m.ResetPoolBurn()
		return nil
	case event.EdgePoolFlash:
		m.ResetPoolFlash()
		return nil
	}
	return fmt.Errorf("unknown Event edge %s", name)
}

// SyncerMutation represents an operation that mutates the Syncer nodes in the graph.
type SyncerMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	start         *uint64
	addstart      *uint64
	finish        *uint64
	addfinish     *uint64
	current       *uint64
	addcurrent    *uint64
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Syncer, error)
	predicates    []predicate.Syncer
}

var _ ent.Mutation = (*SyncerMutation)(nil)

// syncerOption allows management of the mutation configuration using functional options.
type syncerOption func(*SyncerMutation)

// newSyncerMutation creates new mutation for the Syncer entity.
func newSyncerMutation(c config, op Op, opts ...syncerOption) *SyncerMutation {
	m := &SyncerMutation{
		config:        c,
		op:            op,
		typ:           TypeSyncer,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSyncerID sets the ID field of the mutation.
func withSyncerID(id int) syncerOption {
	return func(m *SyncerMutation) {
		var (
			err   error
			once  sync.Once
			value *Syncer
		)
		m.oldValue = func(ctx context.Context) (*Syncer, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Syncer.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSyncer sets the old Syncer of the mutation.
func withSyncer(node *Syncer) syncerOption {
	return func(m *SyncerMutation) {
		m.oldValue = func(context.Context) (*Syncer, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SyncerMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SyncerMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SyncerMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *SyncerMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *SyncerMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Syncer entity.
// If the Syncer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SyncerMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *SyncerMutation) ResetName() {
	m.name = nil
}

// SetStart sets the "start" field.
func (m *SyncerMutation) SetStart(u uint64) {
	m.start = &u
	m.addstart = nil
}

// Start returns the value of the "start" field in the mutation.
func (m *SyncerMutation) Start() (r uint64, exists bool) {
	v := m.start
	if v == nil {
		return
	}
	return *v, true
}

// OldStart returns the old "start" field's value of the Syncer entity.
// If the Syncer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SyncerMutation) OldStart(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStart is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStart requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStart: %w", err)
	}
	return oldValue.Start, nil
}

// AddStart adds u to the "start" field.
func (m *SyncerMutation) AddStart(u uint64) {
	if m.addstart != nil {
		*m.addstart += u
	} else {
		m.addstart = &u
	}
}

// AddedStart returns the value that was added to the "start" field in this mutation.
func (m *SyncerMutation) AddedStart() (r uint64, exists bool) {
	v := m.addstart
	if v == nil {
		return
	}
	return *v, true
}

// ResetStart resets all changes to the "start" field.
func (m *SyncerMutation) ResetStart() {
	m.start = nil
	m.addstart = nil
}

// SetFinish sets the "finish" field.
func (m *SyncerMutation) SetFinish(u uint64) {
	m.finish = &u
	m.addfinish = nil
}

// Finish returns the value of the "finish" field in the mutation.
func (m *SyncerMutation) Finish() (r uint64, exists bool) {
	v := m.finish
	if v == nil {
		return
	}
	return *v, true
}

// OldFinish returns the old "finish" field's value of the Syncer entity.
// If the Syncer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SyncerMutation) OldFinish(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldFinish is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldFinish requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFinish: %w", err)
	}
	return oldValue.Finish, nil
}

// AddFinish adds u to the "finish" field.
func (m *SyncerMutation) AddFinish(u uint64) {
	if m.addfinish != nil {
		*m.addfinish += u
	} else {
		m.addfinish = &u
	}
}

// AddedFinish returns the value that was added to the "finish" field in this mutation.
func (m *SyncerMutation) AddedFinish() (r uint64, exists bool) {
	v := m.addfinish
	if v == nil {
		return
	}
	return *v, true
}

// ResetFinish resets all changes to the "finish" field.
func (m *SyncerMutation) ResetFinish() {
	m.finish = nil
	m.addfinish = nil
}

// SetCurrent sets the "current" field.
func (m *SyncerMutation) SetCurrent(u uint64) {
	m.current = &u
	m.addcurrent = nil
}

// Current returns the value of the "current" field in the mutation.
func (m *SyncerMutation) Current() (r uint64, exists bool) {
	v := m.current
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrent returns the old "current" field's value of the Syncer entity.
// If the Syncer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SyncerMutation) OldCurrent(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCurrent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCurrent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrent: %w", err)
	}
	return oldValue.Current, nil
}

// AddCurrent adds u to the "current" field.
func (m *SyncerMutation) AddCurrent(u uint64) {
	if m.addcurrent != nil {
		*m.addcurrent += u
	} else {
		m.addcurrent = &u
	}
}

// AddedCurrent returns the value that was added to the "current" field in this mutation.
func (m *SyncerMutation) AddedCurrent() (r uint64, exists bool) {
	v := m.addcurrent
	if v == nil {
		return
	}
	return *v, true
}

// ResetCurrent resets all changes to the "current" field.
func (m *SyncerMutation) ResetCurrent() {
	m.current = nil
	m.addcurrent = nil
}

// Where appends a list predicates to the SyncerMutation builder.
func (m *SyncerMutation) Where(ps ...predicate.Syncer) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *SyncerMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Syncer).
func (m *SyncerMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SyncerMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.name != nil {
		fields = append(fields, syncer.FieldName)
	}
	if m.start != nil {
		fields = append(fields, syncer.FieldStart)
	}
	if m.finish != nil {
		fields = append(fields, syncer.FieldFinish)
	}
	if m.current != nil {
		fields = append(fields, syncer.FieldCurrent)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SyncerMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case syncer.FieldName:
		return m.Name()
	case syncer.FieldStart:
		return m.Start()
	case syncer.FieldFinish:
		return m.Finish()
	case syncer.FieldCurrent:
		return m.Current()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SyncerMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case syncer.FieldName:
		return m.OldName(ctx)
	case syncer.FieldStart:
		return m.OldStart(ctx)
	case syncer.FieldFinish:
		return m.OldFinish(ctx)
	case syncer.FieldCurrent:
		return m.OldCurrent(ctx)
	}
	return nil, fmt.Errorf("unknown Syncer field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SyncerMutation) SetField(name string, value ent.Value) error {
	switch name {
	case syncer.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case syncer.FieldStart:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStart(v)
		return nil
	case syncer.FieldFinish:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFinish(v)
		return nil
	case syncer.FieldCurrent:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrent(v)
		return nil
	}
	return fmt.Errorf("unknown Syncer field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SyncerMutation) AddedFields() []string {
	var fields []string
	if m.addstart != nil {
		fields = append(fields, syncer.FieldStart)
	}
	if m.addfinish != nil {
		fields = append(fields, syncer.FieldFinish)
	}
	if m.addcurrent != nil {
		fields = append(fields, syncer.FieldCurrent)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SyncerMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case syncer.FieldStart:
		return m.AddedStart()
	case syncer.FieldFinish:
		return m.AddedFinish()
	case syncer.FieldCurrent:
		return m.AddedCurrent()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SyncerMutation) AddField(name string, value ent.Value) error {
	switch name {
	case syncer.FieldStart:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStart(v)
		return nil
	case syncer.FieldFinish:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFinish(v)
		return nil
	case syncer.FieldCurrent:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCurrent(v)
		return nil
	}
	return fmt.Errorf("unknown Syncer numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SyncerMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SyncerMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SyncerMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Syncer nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SyncerMutation) ResetField(name string) error {
	switch name {
	case syncer.FieldName:
		m.ResetName()
		return nil
	case syncer.FieldStart:
		m.ResetStart()
		return nil
	case syncer.FieldFinish:
		m.ResetFinish()
		return nil
	case syncer.FieldCurrent:
		m.ResetCurrent()
		return nil
	}
	return fmt.Errorf("unknown Syncer field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SyncerMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SyncerMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SyncerMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SyncerMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SyncerMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SyncerMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SyncerMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Syncer unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SyncerMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Syncer edge %s", name)
}

// UniswapV3CollectMutation represents an operation that mutates the UniswapV3Collect nodes in the graph.
type UniswapV3CollectMutation struct {
	config
	op            Op
	typ           string
	id            *int
	token_id      *string
	recipient     *string
	amount0       *string
	amount1       *string
	clearedFields map[string]struct{}
	event         *int
	clearedevent  bool
	done          bool
	oldValue      func(context.Context) (*UniswapV3Collect, error)
	predicates    []predicate.UniswapV3Collect
}

var _ ent.Mutation = (*UniswapV3CollectMutation)(nil)

// uniswapv3collectOption allows management of the mutation configuration using functional options.
type uniswapv3collectOption func(*UniswapV3CollectMutation)

// newUniswapV3CollectMutation creates new mutation for the UniswapV3Collect entity.
func newUniswapV3CollectMutation(c config, op Op, opts ...uniswapv3collectOption) *UniswapV3CollectMutation {
	m := &UniswapV3CollectMutation{
		config:        c,
		op:            op,
		typ:           TypeUniswapV3Collect,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUniswapV3CollectID sets the ID field of the mutation.
func withUniswapV3CollectID(id int) uniswapv3collectOption {
	return func(m *UniswapV3CollectMutation) {
		var (
			err   error
			once  sync.Once
			value *UniswapV3Collect
		)
		m.oldValue = func(ctx context.Context) (*UniswapV3Collect, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UniswapV3Collect.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUniswapV3Collect sets the old UniswapV3Collect of the mutation.
func withUniswapV3Collect(node *UniswapV3Collect) uniswapv3collectOption {
	return func(m *UniswapV3CollectMutation) {
		m.oldValue = func(context.Context) (*UniswapV3Collect, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UniswapV3CollectMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UniswapV3CollectMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UniswapV3CollectMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetTokenID sets the "token_id" field.
func (m *UniswapV3CollectMutation) SetTokenID(s string) {
	m.token_id = &s
}

// TokenID returns the value of the "token_id" field in the mutation.
func (m *UniswapV3CollectMutation) TokenID() (r string, exists bool) {
	v := m.token_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTokenID returns the old "token_id" field's value of the UniswapV3Collect entity.
// If the UniswapV3Collect object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniswapV3CollectMutation) OldTokenID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTokenID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTokenID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTokenID: %w", err)
	}
	return oldValue.TokenID, nil
}

// ResetTokenID resets all changes to the "token_id" field.
func (m *UniswapV3CollectMutation) ResetTokenID() {
	m.token_id = nil
}

// SetRecipient sets the "recipient" field.
func (m *UniswapV3CollectMutation) SetRecipient(s string) {
	m.recipient = &s
}

// Recipient returns the value of the "recipient" field in the mutation.
func (m *UniswapV3CollectMutation) Recipient() (r string, exists bool) {
	v := m.recipient
	if v == nil {
		return
	}
	return *v, true
}

// OldRecipient returns the old "recipient" field's value of the UniswapV3Collect entity.
// If the UniswapV3Collect object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniswapV3CollectMutation) OldRecipient(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRecipient is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRecipient requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRecipient: %w", err)
	}
	return oldValue.Recipient, nil
}

// ResetRecipient resets all changes to the "recipient" field.
func (m *UniswapV3CollectMutation) ResetRecipient() {
	m.recipient = nil
}

// SetAmount0 sets the "amount0" field.
func (m *UniswapV3CollectMutation) SetAmount0(s string) {
	m.amount0 = &s
}

// Amount0 returns the value of the "amount0" field in the mutation.
func (m *UniswapV3CollectMutation) Amount0() (r string, exists bool) {
	v := m.amount0
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount0 returns the old "amount0" field's value of the UniswapV3Collect entity.
// If the UniswapV3Collect object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniswapV3CollectMutation) OldAmount0(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAmount0 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAmount0 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount0: %w", err)
	}
	return oldValue.Amount0, nil
}

// ResetAmount0 resets all changes to the "amount0" field.
func (m *UniswapV3CollectMutation) ResetAmount0() {
	m.amount0 = nil
}

// SetAmount1 sets the "amount1" field.
func (m *UniswapV3CollectMutation) SetAmount1(s string) {
	m.amount1 = &s
}

// Amount1 returns the value of the "amount1" field in the mutation.
func (m *UniswapV3CollectMutation) Amount1() (r string, exists bool) {
	v := m.amount1
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount1 returns the old "amount1" field's value of the UniswapV3Collect entity.
// If the UniswapV3Collect object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniswapV3CollectMutation) OldAmount1(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAmount1 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAmount1 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount1: %w", err)
	}
	return oldValue.Amount1, nil
}

// ResetAmount1 resets all changes to the "amount1" field.
func (m *UniswapV3CollectMutation) ResetAmount1() {
	m.amount1 = nil
}

// SetEventID sets the "event" edge to the Event entity by id.
func (m *UniswapV3CollectMutation) SetEventID(id int) {
	m.event = &id
}

// ClearEvent clears the "event" edge to the Event entity.
func (m *UniswapV3CollectMutation) ClearEvent() {
	m.clearedevent = true
}

// EventCleared reports if the "event" edge to the Event entity was cleared.
func (m *UniswapV3CollectMutation) EventCleared() bool {
	return m.clearedevent
}

// EventID returns the "event" edge ID in the mutation.
func (m *UniswapV3CollectMutation) EventID() (id int, exists bool) {
	if m.event != nil {
		return *m.event, true
	}
	return
}

// EventIDs returns the "event" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EventID instead. It exists only for internal usage by the builders.
func (m *UniswapV3CollectMutation) EventIDs() (ids []int) {
	if id := m.event; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEvent resets all changes to the "event" edge.
func (m *UniswapV3CollectMutation) ResetEvent() {
	m.event = nil
	m.clearedevent = false
}

// Where appends a list predicates to the UniswapV3CollectMutation builder.
func (m *UniswapV3CollectMutation) Where(ps ...predicate.UniswapV3Collect) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UniswapV3CollectMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (UniswapV3Collect).
func (m *UniswapV3CollectMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UniswapV3CollectMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.token_id != nil {
		fields = append(fields, uniswapv3collect.FieldTokenID)
	}
	if m.recipient != nil {
		fields = append(fields, uniswapv3collect.FieldRecipient)
	}
	if m.amount0 != nil {
		fields = append(fields, uniswapv3collect.FieldAmount0)
	}
	if m.amount1 != nil {
		fields = append(fields, uniswapv3collect.FieldAmount1)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UniswapV3CollectMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case uniswapv3collect.FieldTokenID:
		return m.TokenID()
	case uniswapv3collect.FieldRecipient:
		return m.Recipient()
	case uniswapv3collect.FieldAmount0:
		return m.Amount0()
	case uniswapv3collect.FieldAmount1:
		return m.Amount1()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UniswapV3CollectMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case uniswapv3collect.FieldTokenID:
		return m.OldTokenID(ctx)
	case uniswapv3collect.FieldRecipient:
		return m.OldRecipient(ctx)
	case uniswapv3collect.FieldAmount0:
		return m.OldAmount0(ctx)
	case uniswapv3collect.FieldAmount1:
		return m.OldAmount1(ctx)
	}
	return nil, fmt.Errorf("unknown UniswapV3Collect field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UniswapV3CollectMutation) SetField(name string, value ent.Value) error {
	switch name {
	case uniswapv3collect.FieldTokenID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTokenID(v)
		return nil
	case uniswapv3collect.FieldRecipient:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRecipient(v)
		return nil
	case uniswapv3collect.FieldAmount0:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount0(v)
		return nil
	case uniswapv3collect.FieldAmount1:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount1(v)
		return nil
	}
	return fmt.Errorf("unknown UniswapV3Collect field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UniswapV3CollectMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UniswapV3CollectMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UniswapV3CollectMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown UniswapV3Collect numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UniswapV3CollectMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UniswapV3CollectMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UniswapV3CollectMutation) ClearField(name string) error {
	return fmt.Errorf("unknown UniswapV3Collect nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UniswapV3CollectMutation) ResetField(name string) error {
	switch name {
	case uniswapv3collect.FieldTokenID:
		m.ResetTokenID()
		return nil
	case uniswapv3collect.FieldRecipient:
		m.ResetRecipient()
		return nil
	case uniswapv3collect.FieldAmount0:
		m.ResetAmount0()
		return nil
	case uniswapv3collect.FieldAmount1:
		m.ResetAmount1()
		return nil
	}
	return fmt.Errorf("unknown UniswapV3Collect field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UniswapV3CollectMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.event != nil {
		edges = append(edges, uniswapv3collect.EdgeEvent)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UniswapV3CollectMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case uniswapv3collect.EdgeEvent:
		if id := m.event; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UniswapV3CollectMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UniswapV3CollectMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UniswapV3CollectMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedevent {
		edges = append(edges, uniswapv3collect.EdgeEvent)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UniswapV3CollectMutation) EdgeCleared(name string) bool {
	switch name {
	case uniswapv3collect.EdgeEvent:
		return m.clearedevent
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UniswapV3CollectMutation) ClearEdge(name string) error {
	switch name {
	case uniswapv3collect.EdgeEvent:
		m.ClearEvent()
		return nil
	}
	return fmt.Errorf("unknown UniswapV3Collect unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UniswapV3CollectMutation) ResetEdge(name string) error {
	switch name {
	case uniswapv3collect.EdgeEvent:
		m.ResetEvent()
		return nil
	}
	return fmt.Errorf("unknown UniswapV3Collect edge %s", name)
}

// UniswapV3DecreaseLiqudityMutation represents an operation that mutates the UniswapV3DecreaseLiqudity nodes in the graph.
type UniswapV3DecreaseLiqudityMutation struct {
	config
	op            Op
	typ           string
	id            *int
	token_id      *string
	liquidity     *string
	amount0       *string
	amount1       *string
	clearedFields map[string]struct{}
	event         *int
	clearedevent  bool
	done          bool
	oldValue      func(context.Context) (*UniswapV3DecreaseLiqudity, error)
	predicates    []predicate.UniswapV3DecreaseLiqudity
}

var _ ent.Mutation = (*UniswapV3DecreaseLiqudityMutation)(nil)

// uniswapv3decreaseliqudityOption allows management of the mutation configuration using functional options.
type uniswapv3decreaseliqudityOption func(*UniswapV3DecreaseLiqudityMutation)

// newUniswapV3DecreaseLiqudityMutation creates new mutation for the UniswapV3DecreaseLiqudity entity.
func newUniswapV3DecreaseLiqudityMutation(c config, op Op, opts ...uniswapv3decreaseliqudityOption) *UniswapV3DecreaseLiqudityMutation {
	m := &UniswapV3DecreaseLiqudityMutation{
		config:        c,
		op:            op,
		typ:           TypeUniswapV3DecreaseLiqudity,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUniswapV3DecreaseLiqudityID sets the ID field of the mutation.
func withUniswapV3DecreaseLiqudityID(id int) uniswapv3decreaseliqudityOption {
	return func(m *UniswapV3DecreaseLiqudityMutation) {
		var (
			err   error
			once  sync.Once
			value *UniswapV3DecreaseLiqudity
		)
		m.oldValue = func(ctx context.Context) (*UniswapV3DecreaseLiqudity, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UniswapV3DecreaseLiqudity.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUniswapV3DecreaseLiqudity sets the old UniswapV3DecreaseLiqudity of the mutation.
func withUniswapV3DecreaseLiqudity(node *UniswapV3DecreaseLiqudity) uniswapv3decreaseliqudityOption {
	return func(m *UniswapV3DecreaseLiqudityMutation) {
		m.oldValue = func(context.Context) (*UniswapV3DecreaseLiqudity, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UniswapV3DecreaseLiqudityMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UniswapV3DecreaseLiqudityMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UniswapV3DecreaseLiqudityMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetTokenID sets the "token_id" field.
func (m *UniswapV3DecreaseLiqudityMutation) SetTokenID(s string) {
	m.token_id = &s
}

// TokenID returns the value of the "token_id" field in the mutation.
func (m *UniswapV3DecreaseLiqudityMutation) TokenID() (r string, exists bool) {
	v := m.token_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTokenID returns the old "token_id" field's value of the UniswapV3DecreaseLiqudity entity.
// If the UniswapV3DecreaseLiqudity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniswapV3DecreaseLiqudityMutation) OldTokenID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTokenID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTokenID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTokenID: %w", err)
	}
	return oldValue.TokenID, nil
}

// ResetTokenID resets all changes to the "token_id" field.
func (m *UniswapV3DecreaseLiqudityMutation) ResetTokenID() {
	m.token_id = nil
}

// SetLiquidity sets the "liquidity" field.
func (m *UniswapV3DecreaseLiqudityMutation) SetLiquidity(s string) {
	m.liquidity = &s
}

// Liquidity returns the value of the "liquidity" field in the mutation.
func (m *UniswapV3DecreaseLiqudityMutation) Liquidity() (r string, exists bool) {
	v := m.liquidity
	if v == nil {
		return
	}
	return *v, true
}

// OldLiquidity returns the old "liquidity" field's value of the UniswapV3DecreaseLiqudity entity.
// If the UniswapV3DecreaseLiqudity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniswapV3DecreaseLiqudityMutation) OldLiquidity(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLiquidity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLiquidity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLiquidity: %w", err)
	}
	return oldValue.Liquidity, nil
}

// ResetLiquidity resets all changes to the "liquidity" field.
func (m *UniswapV3DecreaseLiqudityMutation) ResetLiquidity() {
	m.liquidity = nil
}

// SetAmount0 sets the "amount0" field.
func (m *UniswapV3DecreaseLiqudityMutation) SetAmount0(s string) {
	m.amount0 = &s
}

// Amount0 returns the value of the "amount0" field in the mutation.
func (m *UniswapV3DecreaseLiqudityMutation) Amount0() (r string, exists bool) {
	v := m.amount0
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount0 returns the old "amount0" field's value of the UniswapV3DecreaseLiqudity entity.
// If the UniswapV3DecreaseLiqudity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniswapV3DecreaseLiqudityMutation) OldAmount0(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAmount0 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAmount0 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount0: %w", err)
	}
	return oldValue.Amount0, nil
}

// ResetAmount0 resets all changes to the "amount0" field.
func (m *UniswapV3DecreaseLiqudityMutation) ResetAmount0() {
	m.amount0 = nil
}

// SetAmount1 sets the "amount1" field.
func (m *UniswapV3DecreaseLiqudityMutation) SetAmount1(s string) {
	m.amount1 = &s
}

// Amount1 returns the value of the "amount1" field in the mutation.
func (m *UniswapV3DecreaseLiqudityMutation) Amount1() (r string, exists bool) {
	v := m.amount1
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount1 returns the old "amount1" field's value of the UniswapV3DecreaseLiqudity entity.
// If the UniswapV3DecreaseLiqudity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniswapV3DecreaseLiqudityMutation) OldAmount1(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAmount1 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAmount1 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount1: %w", err)
	}
	return oldValue.Amount1, nil
}

// ResetAmount1 resets all changes to the "amount1" field.
func (m *UniswapV3DecreaseLiqudityMutation) ResetAmount1() {
	m.amount1 = nil
}

// SetEventID sets the "event" edge to the Event entity by id.
func (m *UniswapV3DecreaseLiqudityMutation) SetEventID(id int) {
	m.event = &id
}

// ClearEvent clears the "event" edge to the Event entity.
func (m *UniswapV3DecreaseLiqudityMutation) ClearEvent() {
	m.clearedevent = true
}

// EventCleared reports if the "event" edge to the Event entity was cleared.
func (m *UniswapV3DecreaseLiqudityMutation) EventCleared() bool {
	return m.clearedevent
}

// EventID returns the "event" edge ID in the mutation.
func (m *UniswapV3DecreaseLiqudityMutation) EventID() (id int, exists bool) {
	if m.event != nil {
		return *m.event, true
	}
	return
}

// EventIDs returns the "event" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EventID instead. It exists only for internal usage by the builders.
func (m *UniswapV3DecreaseLiqudityMutation) EventIDs() (ids []int) {
	if id := m.event; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEvent resets all changes to the "event" edge.
func (m *UniswapV3DecreaseLiqudityMutation) ResetEvent() {
	m.event = nil
	m.clearedevent = false
}

// Where appends a list predicates to the UniswapV3DecreaseLiqudityMutation builder.
func (m *UniswapV3DecreaseLiqudityMutation) Where(ps ...predicate.UniswapV3DecreaseLiqudity) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UniswapV3DecreaseLiqudityMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (UniswapV3DecreaseLiqudity).
func (m *UniswapV3DecreaseLiqudityMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UniswapV3DecreaseLiqudityMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.token_id != nil {
		fields = append(fields, uniswapv3decreaseliqudity.FieldTokenID)
	}
	if m.liquidity != nil {
		fields = append(fields, uniswapv3decreaseliqudity.FieldLiquidity)
	}
	if m.amount0 != nil {
		fields = append(fields, uniswapv3decreaseliqudity.FieldAmount0)
	}
	if m.amount1 != nil {
		fields = append(fields, uniswapv3decreaseliqudity.FieldAmount1)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UniswapV3DecreaseLiqudityMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case uniswapv3decreaseliqudity.FieldTokenID:
		return m.TokenID()
	case uniswapv3decreaseliqudity.FieldLiquidity:
		return m.Liquidity()
	case uniswapv3decreaseliqudity.FieldAmount0:
		return m.Amount0()
	case uniswapv3decreaseliqudity.FieldAmount1:
		return m.Amount1()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UniswapV3DecreaseLiqudityMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case uniswapv3decreaseliqudity.FieldTokenID:
		return m.OldTokenID(ctx)
	case uniswapv3decreaseliqudity.FieldLiquidity:
		return m.OldLiquidity(ctx)
	case uniswapv3decreaseliqudity.FieldAmount0:
		return m.OldAmount0(ctx)
	case uniswapv3decreaseliqudity.FieldAmount1:
		return m.OldAmount1(ctx)
	}
	return nil, fmt.Errorf("unknown UniswapV3DecreaseLiqudity field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UniswapV3DecreaseLiqudityMutation) SetField(name string, value ent.Value) error {
	switch name {
	case uniswapv3decreaseliqudity.FieldTokenID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTokenID(v)
		return nil
	case uniswapv3decreaseliqudity.FieldLiquidity:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLiquidity(v)
		return nil
	case uniswapv3decreaseliqudity.FieldAmount0:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount0(v)
		return nil
	case uniswapv3decreaseliqudity.FieldAmount1:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount1(v)
		return nil
	}
	return fmt.Errorf("unknown UniswapV3DecreaseLiqudity field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UniswapV3DecreaseLiqudityMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UniswapV3DecreaseLiqudityMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UniswapV3DecreaseLiqudityMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown UniswapV3DecreaseLiqudity numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UniswapV3DecreaseLiqudityMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UniswapV3DecreaseLiqudityMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UniswapV3DecreaseLiqudityMutation) ClearField(name string) error {
	return fmt.Errorf("unknown UniswapV3DecreaseLiqudity nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UniswapV3DecreaseLiqudityMutation) ResetField(name string) error {
	switch name {
	case uniswapv3decreaseliqudity.FieldTokenID:
		m.ResetTokenID()
		return nil
	case uniswapv3decreaseliqudity.FieldLiquidity:
		m.ResetLiquidity()
		return nil
	case uniswapv3decreaseliqudity.FieldAmount0:
		m.ResetAmount0()
		return nil
	case uniswapv3decreaseliqudity.FieldAmount1:
		m.ResetAmount1()
		return nil
	}
	return fmt.Errorf("unknown UniswapV3DecreaseLiqudity field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UniswapV3DecreaseLiqudityMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.event != nil {
		edges = append(edges, uniswapv3decreaseliqudity.EdgeEvent)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UniswapV3DecreaseLiqudityMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case uniswapv3decreaseliqudity.EdgeEvent:
		if id := m.event; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UniswapV3DecreaseLiqudityMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UniswapV3DecreaseLiqudityMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UniswapV3DecreaseLiqudityMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedevent {
		edges = append(edges, uniswapv3decreaseliqudity.EdgeEvent)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UniswapV3DecreaseLiqudityMutation) EdgeCleared(name string) bool {
	switch name {
	case uniswapv3decreaseliqudity.EdgeEvent:
		return m.clearedevent
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UniswapV3DecreaseLiqudityMutation) ClearEdge(name string) error {
	switch name {
	case uniswapv3decreaseliqudity.EdgeEvent:
		m.ClearEvent()
		return nil
	}
	return fmt.Errorf("unknown UniswapV3DecreaseLiqudity unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UniswapV3DecreaseLiqudityMutation) ResetEdge(name string) error {
	switch name {
	case uniswapv3decreaseliqudity.EdgeEvent:
		m.ResetEvent()
		return nil
	}
	return fmt.Errorf("unknown UniswapV3DecreaseLiqudity edge %s", name)
}

// UniswapV3IncreaseLiqudityMutation represents an operation that mutates the UniswapV3IncreaseLiqudity nodes in the graph.
type UniswapV3IncreaseLiqudityMutation struct {
	config
	op            Op
	typ           string
	id            *int
	token_id      *string
	liquidity     *string
	amount0       *string
	amount1       *string
	clearedFields map[string]struct{}
	event         *int
	clearedevent  bool
	done          bool
	oldValue      func(context.Context) (*UniswapV3IncreaseLiqudity, error)
	predicates    []predicate.UniswapV3IncreaseLiqudity
}

var _ ent.Mutation = (*UniswapV3IncreaseLiqudityMutation)(nil)

// uniswapv3increaseliqudityOption allows management of the mutation configuration using functional options.
type uniswapv3increaseliqudityOption func(*UniswapV3IncreaseLiqudityMutation)

// newUniswapV3IncreaseLiqudityMutation creates new mutation for the UniswapV3IncreaseLiqudity entity.
func newUniswapV3IncreaseLiqudityMutation(c config, op Op, opts ...uniswapv3increaseliqudityOption) *UniswapV3IncreaseLiqudityMutation {
	m := &UniswapV3IncreaseLiqudityMutation{
		config:        c,
		op:            op,
		typ:           TypeUniswapV3IncreaseLiqudity,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUniswapV3IncreaseLiqudityID sets the ID field of the mutation.
func withUniswapV3IncreaseLiqudityID(id int) uniswapv3increaseliqudityOption {
	return func(m *UniswapV3IncreaseLiqudityMutation) {
		var (
			err   error
			once  sync.Once
			value *UniswapV3IncreaseLiqudity
		)
		m.oldValue = func(ctx context.Context) (*UniswapV3IncreaseLiqudity, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UniswapV3IncreaseLiqudity.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUniswapV3IncreaseLiqudity sets the old UniswapV3IncreaseLiqudity of the mutation.
func withUniswapV3IncreaseLiqudity(node *UniswapV3IncreaseLiqudity) uniswapv3increaseliqudityOption {
	return func(m *UniswapV3IncreaseLiqudityMutation) {
		m.oldValue = func(context.Context) (*UniswapV3IncreaseLiqudity, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UniswapV3IncreaseLiqudityMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UniswapV3IncreaseLiqudityMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UniswapV3IncreaseLiqudityMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetTokenID sets the "token_id" field.
func (m *UniswapV3IncreaseLiqudityMutation) SetTokenID(s string) {
	m.token_id = &s
}

// TokenID returns the value of the "token_id" field in the mutation.
func (m *UniswapV3IncreaseLiqudityMutation) TokenID() (r string, exists bool) {
	v := m.token_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTokenID returns the old "token_id" field's value of the UniswapV3IncreaseLiqudity entity.
// If the UniswapV3IncreaseLiqudity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniswapV3IncreaseLiqudityMutation) OldTokenID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTokenID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTokenID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTokenID: %w", err)
	}
	return oldValue.TokenID, nil
}

// ResetTokenID resets all changes to the "token_id" field.
func (m *UniswapV3IncreaseLiqudityMutation) ResetTokenID() {
	m.token_id = nil
}

// SetLiquidity sets the "liquidity" field.
func (m *UniswapV3IncreaseLiqudityMutation) SetLiquidity(s string) {
	m.liquidity = &s
}

// Liquidity returns the value of the "liquidity" field in the mutation.
func (m *UniswapV3IncreaseLiqudityMutation) Liquidity() (r string, exists bool) {
	v := m.liquidity
	if v == nil {
		return
	}
	return *v, true
}

// OldLiquidity returns the old "liquidity" field's value of the UniswapV3IncreaseLiqudity entity.
// If the UniswapV3IncreaseLiqudity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniswapV3IncreaseLiqudityMutation) OldLiquidity(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLiquidity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLiquidity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLiquidity: %w", err)
	}
	return oldValue.Liquidity, nil
}

// ResetLiquidity resets all changes to the "liquidity" field.
func (m *UniswapV3IncreaseLiqudityMutation) ResetLiquidity() {
	m.liquidity = nil
}

// SetAmount0 sets the "amount0" field.
func (m *UniswapV3IncreaseLiqudityMutation) SetAmount0(s string) {
	m.amount0 = &s
}

// Amount0 returns the value of the "amount0" field in the mutation.
func (m *UniswapV3IncreaseLiqudityMutation) Amount0() (r string, exists bool) {
	v := m.amount0
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount0 returns the old "amount0" field's value of the UniswapV3IncreaseLiqudity entity.
// If the UniswapV3IncreaseLiqudity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniswapV3IncreaseLiqudityMutation) OldAmount0(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAmount0 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAmount0 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount0: %w", err)
	}
	return oldValue.Amount0, nil
}

// ResetAmount0 resets all changes to the "amount0" field.
func (m *UniswapV3IncreaseLiqudityMutation) ResetAmount0() {
	m.amount0 = nil
}

// SetAmount1 sets the "amount1" field.
func (m *UniswapV3IncreaseLiqudityMutation) SetAmount1(s string) {
	m.amount1 = &s
}

// Amount1 returns the value of the "amount1" field in the mutation.
func (m *UniswapV3IncreaseLiqudityMutation) Amount1() (r string, exists bool) {
	v := m.amount1
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount1 returns the old "amount1" field's value of the UniswapV3IncreaseLiqudity entity.
// If the UniswapV3IncreaseLiqudity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniswapV3IncreaseLiqudityMutation) OldAmount1(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAmount1 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAmount1 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount1: %w", err)
	}
	return oldValue.Amount1, nil
}

// ResetAmount1 resets all changes to the "amount1" field.
func (m *UniswapV3IncreaseLiqudityMutation) ResetAmount1() {
	m.amount1 = nil
}

// SetEventID sets the "event" edge to the Event entity by id.
func (m *UniswapV3IncreaseLiqudityMutation) SetEventID(id int) {
	m.event = &id
}

// ClearEvent clears the "event" edge to the Event entity.
func (m *UniswapV3IncreaseLiqudityMutation) ClearEvent() {
	m.clearedevent = true
}

// EventCleared reports if the "event" edge to the Event entity was cleared.
func (m *UniswapV3IncreaseLiqudityMutation) EventCleared() bool {
	return m.clearedevent
}

// EventID returns the "event" edge ID in the mutation.
func (m *UniswapV3IncreaseLiqudityMutation) EventID() (id int, exists bool) {
	if m.event != nil {
		return *m.event, true
	}
	return
}

// EventIDs returns the "event" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EventID instead. It exists only for internal usage by the builders.
func (m *UniswapV3IncreaseLiqudityMutation) EventIDs() (ids []int) {
	if id := m.event; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEvent resets all changes to the "event" edge.
func (m *UniswapV3IncreaseLiqudityMutation) ResetEvent() {
	m.event = nil
	m.clearedevent = false
}

// Where appends a list predicates to the UniswapV3IncreaseLiqudityMutation builder.
func (m *UniswapV3IncreaseLiqudityMutation) Where(ps ...predicate.UniswapV3IncreaseLiqudity) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UniswapV3IncreaseLiqudityMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (UniswapV3IncreaseLiqudity).
func (m *UniswapV3IncreaseLiqudityMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UniswapV3IncreaseLiqudityMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.token_id != nil {
		fields = append(fields, uniswapv3increaseliqudity.FieldTokenID)
	}
	if m.liquidity != nil {
		fields = append(fields, uniswapv3increaseliqudity.FieldLiquidity)
	}
	if m.amount0 != nil {
		fields = append(fields, uniswapv3increaseliqudity.FieldAmount0)
	}
	if m.amount1 != nil {
		fields = append(fields, uniswapv3increaseliqudity.FieldAmount1)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UniswapV3IncreaseLiqudityMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case uniswapv3increaseliqudity.FieldTokenID:
		return m.TokenID()
	case uniswapv3increaseliqudity.FieldLiquidity:
		return m.Liquidity()
	case uniswapv3increaseliqudity.FieldAmount0:
		return m.Amount0()
	case uniswapv3increaseliqudity.FieldAmount1:
		return m.Amount1()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UniswapV3IncreaseLiqudityMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case uniswapv3increaseliqudity.FieldTokenID:
		return m.OldTokenID(ctx)
	case uniswapv3increaseliqudity.FieldLiquidity:
		return m.OldLiquidity(ctx)
	case uniswapv3increaseliqudity.FieldAmount0:
		return m.OldAmount0(ctx)
	case uniswapv3increaseliqudity.FieldAmount1:
		return m.OldAmount1(ctx)
	}
	return nil, fmt.Errorf("unknown UniswapV3IncreaseLiqudity field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UniswapV3IncreaseLiqudityMutation) SetField(name string, value ent.Value) error {
	switch name {
	case uniswapv3increaseliqudity.FieldTokenID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTokenID(v)
		return nil
	case uniswapv3increaseliqudity.FieldLiquidity:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLiquidity(v)
		return nil
	case uniswapv3increaseliqudity.FieldAmount0:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount0(v)
		return nil
	case uniswapv3increaseliqudity.FieldAmount1:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount1(v)
		return nil
	}
	return fmt.Errorf("unknown UniswapV3IncreaseLiqudity field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UniswapV3IncreaseLiqudityMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UniswapV3IncreaseLiqudityMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UniswapV3IncreaseLiqudityMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown UniswapV3IncreaseLiqudity numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UniswapV3IncreaseLiqudityMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UniswapV3IncreaseLiqudityMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UniswapV3IncreaseLiqudityMutation) ClearField(name string) error {
	return fmt.Errorf("unknown UniswapV3IncreaseLiqudity nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UniswapV3IncreaseLiqudityMutation) ResetField(name string) error {
	switch name {
	case uniswapv3increaseliqudity.FieldTokenID:
		m.ResetTokenID()
		return nil
	case uniswapv3increaseliqudity.FieldLiquidity:
		m.ResetLiquidity()
		return nil
	case uniswapv3increaseliqudity.FieldAmount0:
		m.ResetAmount0()
		return nil
	case uniswapv3increaseliqudity.FieldAmount1:
		m.ResetAmount1()
		return nil
	}
	return fmt.Errorf("unknown UniswapV3IncreaseLiqudity field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UniswapV3IncreaseLiqudityMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.event != nil {
		edges = append(edges, uniswapv3increaseliqudity.EdgeEvent)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UniswapV3IncreaseLiqudityMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case uniswapv3increaseliqudity.EdgeEvent:
		if id := m.event; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UniswapV3IncreaseLiqudityMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UniswapV3IncreaseLiqudityMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UniswapV3IncreaseLiqudityMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedevent {
		edges = append(edges, uniswapv3increaseliqudity.EdgeEvent)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UniswapV3IncreaseLiqudityMutation) EdgeCleared(name string) bool {
	switch name {
	case uniswapv3increaseliqudity.EdgeEvent:
		return m.clearedevent
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UniswapV3IncreaseLiqudityMutation) ClearEdge(name string) error {
	switch name {
	case uniswapv3increaseliqudity.EdgeEvent:
		m.ClearEvent()
		return nil
	}
	return fmt.Errorf("unknown UniswapV3IncreaseLiqudity unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UniswapV3IncreaseLiqudityMutation) ResetEdge(name string) error {
	switch name {
	case uniswapv3increaseliqudity.EdgeEvent:
		m.ResetEvent()
		return nil
	}
	return fmt.Errorf("unknown UniswapV3IncreaseLiqudity edge %s", name)
}

// UniswapV3PoolBurnMutation represents an operation that mutates the UniswapV3PoolBurn nodes in the graph.
type UniswapV3PoolBurnMutation struct {
	config
	op            Op
	typ           string
	id            *int
	owner         *string
	tick_lower    *string
	tick_upper    *string
	amount        *string
	amount0       *string
	amount1       *string
	clearedFields map[string]struct{}
	event         *int
	clearedevent  bool
	done          bool
	oldValue      func(context.Context) (*UniswapV3PoolBurn, error)
	predicates    []predicate.UniswapV3PoolBurn
}

var _ ent.Mutation = (*UniswapV3PoolBurnMutation)(nil)

// uniswapv3poolburnOption allows management of the mutation configuration using functional options.
type uniswapv3poolburnOption func(*UniswapV3PoolBurnMutation)

// newUniswapV3PoolBurnMutation creates new mutation for the UniswapV3PoolBurn entity.
func newUniswapV3PoolBurnMutation(c config, op Op, opts ...uniswapv3poolburnOption) *UniswapV3PoolBurnMutation {
	m := &UniswapV3PoolBurnMutation{
		config:        c,
		op:            op,
		typ:           TypeUniswapV3PoolBurn,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUniswapV3PoolBurnID sets the ID field of the mutation.
func withUniswapV3PoolBurnID(id int) uniswapv3poolburnOption {
	return func(m *UniswapV3PoolBurnMutation) {
		var (
			err   error
			once  sync.Once
			value *UniswapV3PoolBurn
		)
		m.oldValue = func(ctx context.Context) (*UniswapV3PoolBurn, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UniswapV3PoolBurn.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUniswapV3PoolBurn sets the old UniswapV3PoolBurn of the mutation.
func withUniswapV3PoolBurn(node *UniswapV3PoolBurn) uniswapv3poolburnOption {
	return func(m *UniswapV3PoolBurnMutation) {
		m.oldValue = func(context.Context) (*UniswapV3PoolBurn, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UniswapV3PoolBurnMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UniswapV3PoolBurnMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UniswapV3PoolBurnMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetOwner sets the "owner" field.
func (m *UniswapV3PoolBurnMutation) SetOwner(s string) {
	m.owner = &s
}

// Owner returns the value of the "owner" field in the mutation.
func (m *UniswapV3PoolBurnMutation) Owner() (r string, exists bool) {
	v := m.owner
	if v == nil {
		return
	}
	return *v, true
}

// OldOwner returns the old "owner" field's value of the UniswapV3PoolBurn entity.
// If the UniswapV3PoolBurn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniswapV3PoolBurnMutation) OldOwner(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldOwner is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldOwner requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOwner: %w", err)
	}
	return oldValue.Owner, nil
}

// ResetOwner resets all changes to the "owner" field.
func (m *UniswapV3PoolBurnMutation) ResetOwner() {
	m.owner = nil
}

// SetTickLower sets the "tick_lower" field.
func (m *UniswapV3PoolBurnMutation) SetTickLower(s string) {
	m.tick_lower = &s
}

// TickLower returns the value of the "tick_lower" field in the mutation.
func (m *UniswapV3PoolBurnMutation) TickLower() (r string, exists bool) {
	v := m.tick_lower
	if v == nil {
		return
	}
	return *v, true
}

// OldTickLower returns the old "tick_lower" field's value of the UniswapV3PoolBurn entity.
// If the UniswapV3PoolBurn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniswapV3PoolBurnMutation) OldTickLower(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTickLower is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTickLower requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTickLower: %w", err)
	}
	return oldValue.TickLower, nil
}

// ResetTickLower resets all changes to the "tick_lower" field.
func (m *UniswapV3PoolBurnMutation) ResetTickLower() {
	m.tick_lower = nil
}

// SetTickUpper sets the "tick_upper" field.
func (m *UniswapV3PoolBurnMutation) SetTickUpper(s string) {
	m.tick_upper = &s
}

// TickUpper returns the value of the "tick_upper" field in the mutation.
func (m *UniswapV3PoolBurnMutation) TickUpper() (r string, exists bool) {
	v := m.tick_upper
	if v == nil {
		return
	}
	return *v, true
}

// OldTickUpper returns the old "tick_upper" field's value of the UniswapV3PoolBurn entity.
// If the UniswapV3PoolBurn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniswapV3PoolBurnMutation) OldTickUpper(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTickUpper is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTickUpper requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTickUpper: %w", err)
	}
	return oldValue.TickUpper, nil
}

// ResetTickUpper resets all changes to the "tick_upper" field.
func (m *UniswapV3PoolBurnMutation) ResetTickUpper() {
	m.tick_upper = nil
}

// SetAmount sets the "amount" field.
func (m *UniswapV3PoolBurnMutation) SetAmount(s string) {
	m.amount = &s
}

// Amount returns the value of the "amount" field in the mutation.
func (m *UniswapV3PoolBurnMutation) Amount() (r string, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the UniswapV3PoolBurn entity.
// If the UniswapV3PoolBurn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniswapV3PoolBurnMutation) OldAmount(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// ResetAmount resets all changes to the "amount" field.
func (m *UniswapV3PoolBurnMutation) ResetAmount() {
	m.amount = nil
}

// SetAmount0 sets the "amount0" field.
func (m *UniswapV3PoolBurnMutation) SetAmount0(s string) {
	m.amount0 = &s
}

// Amount0 returns the value of the "amount0" field in the mutation.
func (m *UniswapV3PoolBurnMutation) Amount0() (r string, exists bool) {
	v := m.amount0
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount0 returns the old "amount0" field's value of the UniswapV3PoolBurn entity.
// If the UniswapV3PoolBurn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniswapV3PoolBurnMutation) OldAmount0(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAmount0 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAmount0 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount0: %w", err)
	}
	return oldValue.Amount0, nil
}

// ResetAmount0 resets all changes to the "amount0" field.
func (m *UniswapV3PoolBurnMutation) ResetAmount0() {
	m.amount0 = nil
}

// SetAmount1 sets the "amount1" field.
func (m *UniswapV3PoolBurnMutation) SetAmount1(s string) {
	m.amount1 = &s
}

// Amount1 returns the value of the "amount1" field in the mutation.
func (m *UniswapV3PoolBurnMutation) Amount1() (r string, exists bool) {
	v := m.amount1
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount1 returns the old "amount1" field's value of the UniswapV3PoolBurn entity.
// If the UniswapV3PoolBurn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniswapV3PoolBurnMutation) OldAmount1(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAmount1 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAmount1 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount1: %w", err)
	}
	return oldValue.Amount1, nil
}

// ResetAmount1 resets all changes to the "amount1" field.
func (m *UniswapV3PoolBurnMutation) ResetAmount1() {
	m.amount1 = nil
}

// SetEventID sets the "event" edge to the Event entity by id.
func (m *UniswapV3PoolBurnMutation) SetEventID(id int) {
	m.event = &id
}

// ClearEvent clears the "event" edge to the Event entity.
func (m *UniswapV3PoolBurnMutation) ClearEvent() {
	m.clearedevent = true
}

// EventCleared reports if the "event" edge to the Event entity was cleared.
func (m *UniswapV3PoolBurnMutation) EventCleared() bool {
	return m.clearedevent
}

// EventID returns the "event" edge ID in the mutation.
func (m *UniswapV3PoolBurnMutation) EventID() (id int, exists bool) {
	if m.event != nil {
		return *m.event, true
	}
	return
}

// EventIDs returns the "event" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EventID instead. It exists only for internal usage by the builders.
func (m *UniswapV3PoolBurnMutation) EventIDs() (ids []int) {
	if id := m.event; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEvent resets all changes to the "event" edge.
func (m *UniswapV3PoolBurnMutation) ResetEvent() {
	m.event = nil
	m.clearedevent = false
}

// Where appends a list predicates to the UniswapV3PoolBurnMutation builder.
func (m *UniswapV3PoolBurnMutation) Where(ps ...predicate.UniswapV3PoolBurn) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UniswapV3PoolBurnMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (UniswapV3PoolBurn).
func (m *UniswapV3PoolBurnMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UniswapV3PoolBurnMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.owner != nil {
		fields = append(fields, uniswapv3poolburn.FieldOwner)
	}
	if m.tick_lower != nil {
		fields = append(fields, uniswapv3poolburn.FieldTickLower)
	}
	if m.tick_upper != nil {
		fields = append(fields, uniswapv3poolburn.FieldTickUpper)
	}
	if m.amount != nil {
		fields = append(fields, uniswapv3poolburn.FieldAmount)
	}
	if m.amount0 != nil {
		fields = append(fields, uniswapv3poolburn.FieldAmount0)
	}
	if m.amount1 != nil {
		fields = append(fields, uniswapv3poolburn.FieldAmount1)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UniswapV3PoolBurnMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case uniswapv3poolburn.FieldOwner:
		return m.Owner()
	case uniswapv3poolburn.FieldTickLower:
		return m.TickLower()
	case uniswapv3poolburn.FieldTickUpper:
		return m.TickUpper()
	case uniswapv3poolburn.FieldAmount:
		return m.Amount()
	case uniswapv3poolburn.FieldAmount0:
		return m.Amount0()
	case uniswapv3poolburn.FieldAmount1:
		return m.Amount1()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UniswapV3PoolBurnMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case uniswapv3poolburn.FieldOwner:
		return m.OldOwner(ctx)
	case uniswapv3poolburn.FieldTickLower:
		return m.OldTickLower(ctx)
	case uniswapv3poolburn.FieldTickUpper:
		return m.OldTickUpper(ctx)
	case uniswapv3poolburn.FieldAmount:
		return m.OldAmount(ctx)
	case uniswapv3poolburn.FieldAmount0:
		return m.OldAmount0(ctx)
	case uniswapv3poolburn.FieldAmount1:
		return m.OldAmount1(ctx)
	}
	return nil, fmt.Errorf("unknown UniswapV3PoolBurn field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UniswapV3PoolBurnMutation) SetField(name string, value ent.Value) error {
	switch name {
	case uniswapv3poolburn.FieldOwner:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOwner(v)
		return nil
	case uniswapv3poolburn.FieldTickLower:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTickLower(v)
		return nil
	case uniswapv3poolburn.FieldTickUpper:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTickUpper(v)
		return nil
	case uniswapv3poolburn.FieldAmount:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case uniswapv3poolburn.FieldAmount0:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount0(v)
		return nil
	case uniswapv3poolburn.FieldAmount1:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount1(v)
		return nil
	}
	return fmt.Errorf("unknown UniswapV3PoolBurn field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UniswapV3PoolBurnMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UniswapV3PoolBurnMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UniswapV3PoolBurnMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown UniswapV3PoolBurn numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UniswapV3PoolBurnMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UniswapV3PoolBurnMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UniswapV3PoolBurnMutation) ClearField(name string) error {
	return fmt.Errorf("unknown UniswapV3PoolBurn nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UniswapV3PoolBurnMutation) ResetField(name string) error {
	switch name {
	case uniswapv3poolburn.FieldOwner:
		m.ResetOwner()
		return nil
	case uniswapv3poolburn.FieldTickLower:
		m.ResetTickLower()
		return nil
	case uniswapv3poolburn.FieldTickUpper:
		m.ResetTickUpper()
		return nil
	case uniswapv3poolburn.FieldAmount:
		m.ResetAmount()
		return nil
	case uniswapv3poolburn.FieldAmount0:
		m.ResetAmount0()
		return nil
	case uniswapv3poolburn.FieldAmount1:
		m.ResetAmount1()
		return nil
	}
	return fmt.Errorf("unknown UniswapV3PoolBurn field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UniswapV3PoolBurnMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.event != nil {
		edges = append(edges, uniswapv3poolburn.EdgeEvent)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UniswapV3PoolBurnMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case uniswapv3poolburn.EdgeEvent:
		if id := m.event; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UniswapV3PoolBurnMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UniswapV3PoolBurnMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UniswapV3PoolBurnMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedevent {
		edges = append(edges, uniswapv3poolburn.EdgeEvent)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UniswapV3PoolBurnMutation) EdgeCleared(name string) bool {
	switch name {
	case uniswapv3poolburn.EdgeEvent:
		return m.clearedevent
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UniswapV3PoolBurnMutation) ClearEdge(name string) error {
	switch name {
	case uniswapv3poolburn.EdgeEvent:
		m.ClearEvent()
		return nil
	}
	return fmt.Errorf("unknown UniswapV3PoolBurn unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UniswapV3PoolBurnMutation) ResetEdge(name string) error {
	switch name {
	case uniswapv3poolburn.EdgeEvent:
		m.ResetEvent()
		return nil
	}
	return fmt.Errorf("unknown UniswapV3PoolBurn edge %s", name)
}

// UniswapV3PoolCreatedMutation represents an operation that mutates the UniswapV3PoolCreated nodes in the graph.
type UniswapV3PoolCreatedMutation struct {
	config
	op            Op
	typ           string
	id            *int
	token0        *string
	token1        *string
	fee           *string
	tick_spacing  *string
	pool          *string
	clearedFields map[string]struct{}
	event         *int
	clearedevent  bool
	done          bool
	oldValue      func(context.Context) (*UniswapV3PoolCreated, error)
	predicates    []predicate.UniswapV3PoolCreated
}

var _ ent.Mutation = (*UniswapV3PoolCreatedMutation)(nil)

// uniswapv3poolcreatedOption allows management of the mutation configuration using functional options.
type uniswapv3poolcreatedOption func(*UniswapV3PoolCreatedMutation)

// newUniswapV3PoolCreatedMutation creates new mutation for the UniswapV3PoolCreated entity.
func newUniswapV3PoolCreatedMutation(c config, op Op, opts ...uniswapv3poolcreatedOption) *UniswapV3PoolCreatedMutation {
	m := &UniswapV3PoolCreatedMutation{
		config:        c,
		op:            op,
		typ:           TypeUniswapV3PoolCreated,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUniswapV3PoolCreatedID sets the ID field of the mutation.
func withUniswapV3PoolCreatedID(id int) uniswapv3poolcreatedOption {
	return func(m *UniswapV3PoolCreatedMutation) {
		var (
			err   error
			once  sync.Once
			value *UniswapV3PoolCreated
		)
		m.oldValue = func(ctx context.Context) (*UniswapV3PoolCreated, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UniswapV3PoolCreated.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUniswapV3PoolCreated sets the old UniswapV3PoolCreated of the mutation.
func withUniswapV3PoolCreated(node *UniswapV3PoolCreated) uniswapv3poolcreatedOption {
	return func(m *UniswapV3PoolCreatedMutation) {
		m.oldValue = func(context.Context) (*UniswapV3PoolCreated, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UniswapV3PoolCreatedMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UniswapV3PoolCreatedMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UniswapV3PoolCreatedMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetToken0 sets the "token0" field.
func (m *UniswapV3PoolCreatedMutation) SetToken0(s string) {
	m.token0 = &s
}

// Token0 returns the value of the "token0" field in the mutation.
func (m *UniswapV3PoolCreatedMutation) Token0() (r string, exists bool) {
	v := m.token0
	if v == nil {
		return
	}
	return *v, true
}

// OldToken0 returns the old "token0" field's value of the UniswapV3PoolCreated entity.
// If the UniswapV3PoolCreated object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniswapV3PoolCreatedMutation) OldToken0(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldToken0 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldToken0 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldToken0: %w", err)
	}
	return oldValue.Token0, nil
}

// ResetToken0 resets all changes to the "token0" field.
func (m *UniswapV3PoolCreatedMutation) ResetToken0() {
	m.token0 = nil
}

// SetToken1 sets the "token1" field.
func (m *UniswapV3PoolCreatedMutation) SetToken1(s string) {
	m.token1 = &s
}

// Token1 returns the value of the "token1" field in the mutation.
func (m *UniswapV3PoolCreatedMutation) Token1() (r string, exists bool) {
	v := m.token1
	if v == nil {
		return
	}
	return *v, true
}

// OldToken1 returns the old "token1" field's value of the UniswapV3PoolCreated entity.
// If the UniswapV3PoolCreated object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniswapV3PoolCreatedMutation) OldToken1(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldToken1 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldToken1 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldToken1: %w", err)
	}
	return oldValue.Token1, nil
}

// ResetToken1 resets all changes to the "token1" field.
func (m *UniswapV3PoolCreatedMutation) ResetToken1() {
	m.token1 = nil
}

// SetFee sets the "fee" field.
func (m *UniswapV3PoolCreatedMutation) SetFee(s string) {
	m.fee = &s
}

// Fee returns the value of the "fee" field in the mutation.
func (m *UniswapV3PoolCreatedMutation) Fee() (r string, exists bool) {
	v := m.fee
	if v == nil {
		return
	}
	return *v, true
}

// OldFee returns the old "fee" field's value of the UniswapV3PoolCreated entity.
// If the UniswapV3PoolCreated object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniswapV3PoolCreatedMutation) OldFee(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldFee is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldFee requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFee: %w", err)
	}
	return oldValue.Fee, nil
}

// ResetFee resets all changes to the "fee" field.
func (m *UniswapV3PoolCreatedMutation) ResetFee() {
	m.fee = nil
}

// SetTickSpacing sets the "tick_spacing" field.
func (m *UniswapV3PoolCreatedMutation) SetTickSpacing(s string) {
	m.tick_spacing = &s
}

// TickSpacing returns the value of the "tick_spacing" field in the mutation.
func (m *UniswapV3PoolCreatedMutation) TickSpacing() (r string, exists bool) {
	v := m.tick_spacing
	if v == nil {
		return
	}
	return *v, true
}

// OldTickSpacing returns the old "tick_spacing" field's value of the UniswapV3PoolCreated entity.
// If the UniswapV3PoolCreated object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniswapV3PoolCreatedMutation) OldTickSpacing(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTickSpacing is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTickSpacing requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTickSpacing: %w", err)
	}
	return oldValue.TickSpacing, nil
}

// ResetTickSpacing resets all changes to the "tick_spacing" field.
func (m *UniswapV3PoolCreatedMutation) ResetTickSpacing() {
	m.tick_spacing = nil
}

// SetPool sets the "pool" field.
func (m *UniswapV3PoolCreatedMutation) SetPool(s string) {
	m.pool = &s
}

// Pool returns the value of the "pool" field in the mutation.
func (m *UniswapV3PoolCreatedMutation) Pool() (r string, exists bool) {
	v := m.pool
	if v == nil {
		return
	}
	return *v, true
}

// OldPool returns the old "pool" field's value of the UniswapV3PoolCreated entity.
// If the UniswapV3PoolCreated object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniswapV3PoolCreatedMutation) OldPool(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPool is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPool requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPool: %w", err)
	}
	return oldValue.Pool, nil
}

// ResetPool resets all changes to the "pool" field.
func (m *UniswapV3PoolCreatedMutation) ResetPool() {
	m.pool = nil
}

// SetEventID sets the "event" edge to the Event entity by id.
func (m *UniswapV3PoolCreatedMutation) SetEventID(id int) {
	m.event = &id
}

// ClearEvent clears the "event" edge to the Event entity.
func (m *UniswapV3PoolCreatedMutation) ClearEvent() {
	m.clearedevent = true
}

// EventCleared reports if the "event" edge to the Event entity was cleared.
func (m *UniswapV3PoolCreatedMutation) EventCleared() bool {
	return m.clearedevent
}

// EventID returns the "event" edge ID in the mutation.
func (m *UniswapV3PoolCreatedMutation) EventID() (id int, exists bool) {
	if m.event != nil {
		return *m.event, true
	}
	return
}

// EventIDs returns the "event" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EventID instead. It exists only for internal usage by the builders.
func (m *UniswapV3PoolCreatedMutation) EventIDs() (ids []int) {
	if id := m.event; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEvent resets all changes to the "event" edge.
func (m *UniswapV3PoolCreatedMutation) ResetEvent() {
	m.event = nil
	m.clearedevent = false
}

// Where appends a list predicates to the UniswapV3PoolCreatedMutation builder.
func (m *UniswapV3PoolCreatedMutation) Where(ps ...predicate.UniswapV3PoolCreated) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UniswapV3PoolCreatedMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (UniswapV3PoolCreated).
func (m *UniswapV3PoolCreatedMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UniswapV3PoolCreatedMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.token0 != nil {
		fields = append(fields, uniswapv3poolcreated.FieldToken0)
	}
	if m.token1 != nil {
		fields = append(fields, uniswapv3poolcreated.FieldToken1)
	}
	if m.fee != nil {
		fields = append(fields, uniswapv3poolcreated.FieldFee)
	}
	if m.tick_spacing != nil {
		fields = append(fields, uniswapv3poolcreated.FieldTickSpacing)
	}
	if m.pool != nil {
		fields = append(fields, uniswapv3poolcreated.FieldPool)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UniswapV3PoolCreatedMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case uniswapv3poolcreated.FieldToken0:
		return m.Token0()
	case uniswapv3poolcreated.FieldToken1:
		return m.Token1()
	case uniswapv3poolcreated.FieldFee:
		return m.Fee()
	case uniswapv3poolcreated.FieldTickSpacing:
		return m.TickSpacing()
	case uniswapv3poolcreated.FieldPool:
		return m.Pool()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UniswapV3PoolCreatedMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case uniswapv3poolcreated.FieldToken0:
		return m.OldToken0(ctx)
	case uniswapv3poolcreated.FieldToken1:
		return m.OldToken1(ctx)
	case uniswapv3poolcreated.FieldFee:
		return m.OldFee(ctx)
	case uniswapv3poolcreated.FieldTickSpacing:
		return m.OldTickSpacing(ctx)
	case uniswapv3poolcreated.FieldPool:
		return m.OldPool(ctx)
	}
	return nil, fmt.Errorf("unknown UniswapV3PoolCreated field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UniswapV3PoolCreatedMutation) SetField(name string, value ent.Value) error {
	switch name {
	case uniswapv3poolcreated.FieldToken0:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetToken0(v)
		return nil
	case uniswapv3poolcreated.FieldToken1:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetToken1(v)
		return nil
	case uniswapv3poolcreated.FieldFee:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFee(v)
		return nil
	case uniswapv3poolcreated.FieldTickSpacing:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTickSpacing(v)
		return nil
	case uniswapv3poolcreated.FieldPool:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPool(v)
		return nil
	}
	return fmt.Errorf("unknown UniswapV3PoolCreated field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UniswapV3PoolCreatedMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UniswapV3PoolCreatedMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UniswapV3PoolCreatedMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown UniswapV3PoolCreated numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UniswapV3PoolCreatedMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UniswapV3PoolCreatedMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UniswapV3PoolCreatedMutation) ClearField(name string) error {
	return fmt.Errorf("unknown UniswapV3PoolCreated nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UniswapV3PoolCreatedMutation) ResetField(name string) error {
	switch name {
	case uniswapv3poolcreated.FieldToken0:
		m.ResetToken0()
		return nil
	case uniswapv3poolcreated.FieldToken1:
		m.ResetToken1()
		return nil
	case uniswapv3poolcreated.FieldFee:
		m.ResetFee()
		return nil
	case uniswapv3poolcreated.FieldTickSpacing:
		m.ResetTickSpacing()
		return nil
	case uniswapv3poolcreated.FieldPool:
		m.ResetPool()
		return nil
	}
	return fmt.Errorf("unknown UniswapV3PoolCreated field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UniswapV3PoolCreatedMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.event != nil {
		edges = append(edges, uniswapv3poolcreated.EdgeEvent)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UniswapV3PoolCreatedMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case uniswapv3poolcreated.EdgeEvent:
		if id := m.event; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UniswapV3PoolCreatedMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UniswapV3PoolCreatedMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UniswapV3PoolCreatedMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedevent {
		edges = append(edges, uniswapv3poolcreated.EdgeEvent)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UniswapV3PoolCreatedMutation) EdgeCleared(name string) bool {
	switch name {
	case uniswapv3poolcreated.EdgeEvent:
		return m.clearedevent
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UniswapV3PoolCreatedMutation) ClearEdge(name string) error {
	switch name {
	case uniswapv3poolcreated.EdgeEvent:
		m.ClearEvent()
		return nil
	}
	return fmt.Errorf("unknown UniswapV3PoolCreated unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UniswapV3PoolCreatedMutation) ResetEdge(name string) error {
	switch name {
	case uniswapv3poolcreated.EdgeEvent:
		m.ResetEvent()
		return nil
	}
	return fmt.Errorf("unknown UniswapV3PoolCreated edge %s", name)
}

// UniswapV3PoolFlashMutation represents an operation that mutates the UniswapV3PoolFlash nodes in the graph.
type UniswapV3PoolFlashMutation struct {
	config
	op            Op
	typ           string
	id            *int
	sender        *string
	recipient     *string
	amount0       *string
	amount1       *string
	paid0         *string
	paid1         *string
	clearedFields map[string]struct{}
	event         *int
	clearedevent  bool
	done          bool
	oldValue      func(context.Context) (*UniswapV3PoolFlash, error)
	predicates    []predicate.UniswapV3PoolFlash
}

var _ ent.Mutation = (*UniswapV3PoolFlashMutation)(nil)

// uniswapv3poolflashOption allows management of the mutation configuration using functional options.
type uniswapv3poolflashOption func(*UniswapV3PoolFlashMutation)

// newUniswapV3PoolFlashMutation creates new mutation for the UniswapV3PoolFlash entity.
func newUniswapV3PoolFlashMutation(c config, op Op, opts ...uniswapv3poolflashOption) *UniswapV3PoolFlashMutation {
	m := &UniswapV3PoolFlashMutation{
		config:        c,
		op:            op,
		typ:           TypeUniswapV3PoolFlash,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUniswapV3PoolFlashID sets the ID field of the mutation.
func withUniswapV3PoolFlashID(id int) uniswapv3poolflashOption {
	return func(m *UniswapV3PoolFlashMutation) {
		var (
			err   error
			once  sync.Once
			value *UniswapV3PoolFlash
		)
		m.oldValue = func(ctx context.Context) (*UniswapV3PoolFlash, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UniswapV3PoolFlash.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUniswapV3PoolFlash sets the old UniswapV3PoolFlash of the mutation.
func withUniswapV3PoolFlash(node *UniswapV3PoolFlash) uniswapv3poolflashOption {
	return func(m *UniswapV3PoolFlashMutation) {
		m.oldValue = func(context.Context) (*UniswapV3PoolFlash, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UniswapV3PoolFlashMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UniswapV3PoolFlashMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UniswapV3PoolFlashMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetSender sets the "sender" field.
func (m *UniswapV3PoolFlashMutation) SetSender(s string) {
	m.sender = &s
}

// Sender returns the value of the "sender" field in the mutation.
func (m *UniswapV3PoolFlashMutation) Sender() (r string, exists bool) {
	v := m.sender
	if v == nil {
		return
	}
	return *v, true
}

// OldSender returns the old "sender" field's value of the UniswapV3PoolFlash entity.
// If the UniswapV3PoolFlash object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniswapV3PoolFlashMutation) OldSender(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSender is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSender requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSender: %w", err)
	}
	return oldValue.Sender, nil
}

// ResetSender resets all changes to the "sender" field.
func (m *UniswapV3PoolFlashMutation) ResetSender() {
	m.sender = nil
}

// SetRecipient sets the "recipient" field.
func (m *UniswapV3PoolFlashMutation) SetRecipient(s string) {
	m.recipient = &s
}

// Recipient returns the value of the "recipient" field in the mutation.
func (m *UniswapV3PoolFlashMutation) Recipient() (r string, exists bool) {
	v := m.recipient
	if v == nil {
		return
	}
	return *v, true
}

// OldRecipient returns the old "recipient" field's value of the UniswapV3PoolFlash entity.
// If the UniswapV3PoolFlash object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniswapV3PoolFlashMutation) OldRecipient(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRecipient is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRecipient requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRecipient: %w", err)
	}
	return oldValue.Recipient, nil
}

// ResetRecipient resets all changes to the "recipient" field.
func (m *UniswapV3PoolFlashMutation) ResetRecipient() {
	m.recipient = nil
}

// SetAmount0 sets the "amount0" field.
func (m *UniswapV3PoolFlashMutation) SetAmount0(s string) {
	m.amount0 = &s
}

// Amount0 returns the value of the "amount0" field in the mutation.
func (m *UniswapV3PoolFlashMutation) Amount0() (r string, exists bool) {
	v := m.amount0
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount0 returns the old "amount0" field's value of the UniswapV3PoolFlash entity.
// If the UniswapV3PoolFlash object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniswapV3PoolFlashMutation) OldAmount0(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAmount0 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAmount0 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount0: %w", err)
	}
	return oldValue.Amount0, nil
}

// ResetAmount0 resets all changes to the "amount0" field.
func (m *UniswapV3PoolFlashMutation) ResetAmount0() {
	m.amount0 = nil
}

// SetAmount1 sets the "amount1" field.
func (m *UniswapV3PoolFlashMutation) SetAmount1(s string) {
	m.amount1 = &s
}

// Amount1 returns the value of the "amount1" field in the mutation.
func (m *UniswapV3PoolFlashMutation) Amount1() (r string, exists bool) {
	v := m.amount1
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount1 returns the old "amount1" field's value of the UniswapV3PoolFlash entity.
// If the UniswapV3PoolFlash object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniswapV3PoolFlashMutation) OldAmount1(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAmount1 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAmount1 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount1: %w", err)
	}
	return oldValue.Amount1, nil
}

// ResetAmount1 resets all changes to the "amount1" field.
func (m *UniswapV3PoolFlashMutation) ResetAmount1() {
	m.amount1 = nil
}

// SetPaid0 sets the "paid0" field.
func (m *UniswapV3PoolFlashMutation) SetPaid0(s string) {
	m.paid0 = &s
}

// Paid0 returns the value of the "paid0" field in the mutation.
func (m *UniswapV3PoolFlashMutation) Paid0() (r string, exists bool) {
	v := m.paid0
	if v == nil {
		return
	}
	return *v, true
}

// OldPaid0 returns the old "paid0" field's value of the UniswapV3PoolFlash entity.
// If the UniswapV3PoolFlash object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniswapV3PoolFlashMutation) OldPaid0(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPaid0 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPaid0 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaid0: %w", err)
	}
	return oldValue.Paid0, nil
}

// ResetPaid0 resets all changes to the "paid0" field.
func (m *UniswapV3PoolFlashMutation) ResetPaid0() {
	m.paid0 = nil
}

// SetPaid1 sets the "paid1" field.
func (m *UniswapV3PoolFlashMutation) SetPaid1(s string) {
	m.paid1 = &s
}

// Paid1 returns the value of the "paid1" field in the mutation.
func (m *UniswapV3PoolFlashMutation) Paid1() (r string, exists bool) {
	v := m.paid1
	if v == nil {
		return
	}
	return *v, true
}

// OldPaid1 returns the old "paid1" field's value of the UniswapV3PoolFlash entity.
// If the UniswapV3PoolFlash object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniswapV3PoolFlashMutation) OldPaid1(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPaid1 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPaid1 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaid1: %w", err)
	}
	return oldValue.Paid1, nil
}

// ResetPaid1 resets all changes to the "paid1" field.
func (m *UniswapV3PoolFlashMutation) ResetPaid1() {
	m.paid1 = nil
}

// SetEventID sets the "event" edge to the Event entity by id.
func (m *UniswapV3PoolFlashMutation) SetEventID(id int) {
	m.event = &id
}

// ClearEvent clears the "event" edge to the Event entity.
func (m *UniswapV3PoolFlashMutation) ClearEvent() {
	m.clearedevent = true
}

// EventCleared reports if the "event" edge to the Event entity was cleared.
func (m *UniswapV3PoolFlashMutation) EventCleared() bool {
	return m.clearedevent
}

// EventID returns the "event" edge ID in the mutation.
func (m *UniswapV3PoolFlashMutation) EventID() (id int, exists bool) {
	if m.event != nil {
		return *m.event, true
	}
	return
}

// EventIDs returns the "event" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EventID instead. It exists only for internal usage by the builders.
func (m *UniswapV3PoolFlashMutation) EventIDs() (ids []int) {
	if id := m.event; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEvent resets all changes to the "event" edge.
func (m *UniswapV3PoolFlashMutation) ResetEvent() {
	m.event = nil
	m.clearedevent = false
}

// Where appends a list predicates to the UniswapV3PoolFlashMutation builder.
func (m *UniswapV3PoolFlashMutation) Where(ps ...predicate.UniswapV3PoolFlash) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UniswapV3PoolFlashMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (UniswapV3PoolFlash).
func (m *UniswapV3PoolFlashMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UniswapV3PoolFlashMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.sender != nil {
		fields = append(fields, uniswapv3poolflash.FieldSender)
	}
	if m.recipient != nil {
		fields = append(fields, uniswapv3poolflash.FieldRecipient)
	}
	if m.amount0 != nil {
		fields = append(fields, uniswapv3poolflash.FieldAmount0)
	}
	if m.amount1 != nil {
		fields = append(fields, uniswapv3poolflash.FieldAmount1)
	}
	if m.paid0 != nil {
		fields = append(fields, uniswapv3poolflash.FieldPaid0)
	}
	if m.paid1 != nil {
		fields = append(fields, uniswapv3poolflash.FieldPaid1)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UniswapV3PoolFlashMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case uniswapv3poolflash.FieldSender:
		return m.Sender()
	case uniswapv3poolflash.FieldRecipient:
		return m.Recipient()
	case uniswapv3poolflash.FieldAmount0:
		return m.Amount0()
	case uniswapv3poolflash.FieldAmount1:
		return m.Amount1()
	case uniswapv3poolflash.FieldPaid0:
		return m.Paid0()
	case uniswapv3poolflash.FieldPaid1:
		return m.Paid1()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UniswapV3PoolFlashMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case uniswapv3poolflash.FieldSender:
		return m.OldSender(ctx)
	case uniswapv3poolflash.FieldRecipient:
		return m.OldRecipient(ctx)
	case uniswapv3poolflash.FieldAmount0:
		return m.OldAmount0(ctx)
	case uniswapv3poolflash.FieldAmount1:
		return m.OldAmount1(ctx)
	case uniswapv3poolflash.FieldPaid0:
		return m.OldPaid0(ctx)
	case uniswapv3poolflash.FieldPaid1:
		return m.OldPaid1(ctx)
	}
	return nil, fmt.Errorf("unknown UniswapV3PoolFlash field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UniswapV3PoolFlashMutation) SetField(name string, value ent.Value) error {
	switch name {
	case uniswapv3poolflash.FieldSender:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSender(v)
		return nil
	case uniswapv3poolflash.FieldRecipient:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRecipient(v)
		return nil
	case uniswapv3poolflash.FieldAmount0:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount0(v)
		return nil
	case uniswapv3poolflash.FieldAmount1:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount1(v)
		return nil
	case uniswapv3poolflash.FieldPaid0:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaid0(v)
		return nil
	case uniswapv3poolflash.FieldPaid1:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaid1(v)
		return nil
	}
	return fmt.Errorf("unknown UniswapV3PoolFlash field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UniswapV3PoolFlashMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UniswapV3PoolFlashMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UniswapV3PoolFlashMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown UniswapV3PoolFlash numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UniswapV3PoolFlashMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UniswapV3PoolFlashMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UniswapV3PoolFlashMutation) ClearField(name string) error {
	return fmt.Errorf("unknown UniswapV3PoolFlash nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UniswapV3PoolFlashMutation) ResetField(name string) error {
	switch name {
	case uniswapv3poolflash.FieldSender:
		m.ResetSender()
		return nil
	case uniswapv3poolflash.FieldRecipient:
		m.ResetRecipient()
		return nil
	case uniswapv3poolflash.FieldAmount0:
		m.ResetAmount0()
		return nil
	case uniswapv3poolflash.FieldAmount1:
		m.ResetAmount1()
		return nil
	case uniswapv3poolflash.FieldPaid0:
		m.ResetPaid0()
		return nil
	case uniswapv3poolflash.FieldPaid1:
		m.ResetPaid1()
		return nil
	}
	return fmt.Errorf("unknown UniswapV3PoolFlash field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UniswapV3PoolFlashMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.event != nil {
		edges = append(edges, uniswapv3poolflash.EdgeEvent)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UniswapV3PoolFlashMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case uniswapv3poolflash.EdgeEvent:
		if id := m.event; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UniswapV3PoolFlashMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UniswapV3PoolFlashMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UniswapV3PoolFlashMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedevent {
		edges = append(edges, uniswapv3poolflash.EdgeEvent)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UniswapV3PoolFlashMutation) EdgeCleared(name string) bool {
	switch name {
	case uniswapv3poolflash.EdgeEvent:
		return m.clearedevent
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UniswapV3PoolFlashMutation) ClearEdge(name string) error {
	switch name {
	case uniswapv3poolflash.EdgeEvent:
		m.ClearEvent()
		return nil
	}
	return fmt.Errorf("unknown UniswapV3PoolFlash unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UniswapV3PoolFlashMutation) ResetEdge(name string) error {
	switch name {
	case uniswapv3poolflash.EdgeEvent:
		m.ResetEvent()
		return nil
	}
	return fmt.Errorf("unknown UniswapV3PoolFlash edge %s", name)
}

// UniswapV3PoolInitializeMutation represents an operation that mutates the UniswapV3PoolInitialize nodes in the graph.
type UniswapV3PoolInitializeMutation struct {
	config
	op             Op
	typ            string
	id             *int
	sqrt_price_x96 *string
	tick           *string
	clearedFields  map[string]struct{}
	event          *int
	clearedevent   bool
	done           bool
	oldValue       func(context.Context) (*UniswapV3PoolInitialize, error)
	predicates     []predicate.UniswapV3PoolInitialize
}

var _ ent.Mutation = (*UniswapV3PoolInitializeMutation)(nil)

// uniswapv3poolinitializeOption allows management of the mutation configuration using functional options.
type uniswapv3poolinitializeOption func(*UniswapV3PoolInitializeMutation)

// newUniswapV3PoolInitializeMutation creates new mutation for the UniswapV3PoolInitialize entity.
func newUniswapV3PoolInitializeMutation(c config, op Op, opts ...uniswapv3poolinitializeOption) *UniswapV3PoolInitializeMutation {
	m := &UniswapV3PoolInitializeMutation{
		config:        c,
		op:            op,
		typ:           TypeUniswapV3PoolInitialize,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUniswapV3PoolInitializeID sets the ID field of the mutation.
func withUniswapV3PoolInitializeID(id int) uniswapv3poolinitializeOption {
	return func(m *UniswapV3PoolInitializeMutation) {
		var (
			err   error
			once  sync.Once
			value *UniswapV3PoolInitialize
		)
		m.oldValue = func(ctx context.Context) (*UniswapV3PoolInitialize, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UniswapV3PoolInitialize.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUniswapV3PoolInitialize sets the old UniswapV3PoolInitialize of the mutation.
func withUniswapV3PoolInitialize(node *UniswapV3PoolInitialize) uniswapv3poolinitializeOption {
	return func(m *UniswapV3PoolInitializeMutation) {
		m.oldValue = func(context.Context) (*UniswapV3PoolInitialize, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UniswapV3PoolInitializeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UniswapV3PoolInitializeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UniswapV3PoolInitializeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetSqrtPriceX96 sets the "sqrt_price_x96" field.
func (m *UniswapV3PoolInitializeMutation) SetSqrtPriceX96(s string) {
	m.sqrt_price_x96 = &s
}

// SqrtPriceX96 returns the value of the "sqrt_price_x96" field in the mutation.
func (m *UniswapV3PoolInitializeMutation) SqrtPriceX96() (r string, exists bool) {
	v := m.sqrt_price_x96
	if v == nil {
		return
	}
	return *v, true
}

// OldSqrtPriceX96 returns the old "sqrt_price_x96" field's value of the UniswapV3PoolInitialize entity.
// If the UniswapV3PoolInitialize object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniswapV3PoolInitializeMutation) OldSqrtPriceX96(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSqrtPriceX96 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSqrtPriceX96 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSqrtPriceX96: %w", err)
	}
	return oldValue.SqrtPriceX96, nil
}

// ResetSqrtPriceX96 resets all changes to the "sqrt_price_x96" field.
func (m *UniswapV3PoolInitializeMutation) ResetSqrtPriceX96() {
	m.sqrt_price_x96 = nil
}

// SetTick sets the "tick" field.
func (m *UniswapV3PoolInitializeMutation) SetTick(s string) {
	m.tick = &s
}

// Tick returns the value of the "tick" field in the mutation.
func (m *UniswapV3PoolInitializeMutation) Tick() (r string, exists bool) {
	v := m.tick
	if v == nil {
		return
	}
	return *v, true
}

// OldTick returns the old "tick" field's value of the UniswapV3PoolInitialize entity.
// If the UniswapV3PoolInitialize object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniswapV3PoolInitializeMutation) OldTick(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTick is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTick requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTick: %w", err)
	}
	return oldValue.Tick, nil
}

// ResetTick resets all changes to the "tick" field.
func (m *UniswapV3PoolInitializeMutation) ResetTick() {
	m.tick = nil
}

// SetEventID sets the "event" edge to the Event entity by id.
func (m *UniswapV3PoolInitializeMutation) SetEventID(id int) {
	m.event = &id
}

// ClearEvent clears the "event" edge to the Event entity.
func (m *UniswapV3PoolInitializeMutation) ClearEvent() {
	m.clearedevent = true
}

// EventCleared reports if the "event" edge to the Event entity was cleared.
func (m *UniswapV3PoolInitializeMutation) EventCleared() bool {
	return m.clearedevent
}

// EventID returns the "event" edge ID in the mutation.
func (m *UniswapV3PoolInitializeMutation) EventID() (id int, exists bool) {
	if m.event != nil {
		return *m.event, true
	}
	return
}

// EventIDs returns the "event" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EventID instead. It exists only for internal usage by the builders.
func (m *UniswapV3PoolInitializeMutation) EventIDs() (ids []int) {
	if id := m.event; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEvent resets all changes to the "event" edge.
func (m *UniswapV3PoolInitializeMutation) ResetEvent() {
	m.event = nil
	m.clearedevent = false
}

// Where appends a list predicates to the UniswapV3PoolInitializeMutation builder.
func (m *UniswapV3PoolInitializeMutation) Where(ps ...predicate.UniswapV3PoolInitialize) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UniswapV3PoolInitializeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (UniswapV3PoolInitialize).
func (m *UniswapV3PoolInitializeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UniswapV3PoolInitializeMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.sqrt_price_x96 != nil {
		fields = append(fields, uniswapv3poolinitialize.FieldSqrtPriceX96)
	}
	if m.tick != nil {
		fields = append(fields, uniswapv3poolinitialize.FieldTick)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UniswapV3PoolInitializeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case uniswapv3poolinitialize.FieldSqrtPriceX96:
		return m.SqrtPriceX96()
	case uniswapv3poolinitialize.FieldTick:
		return m.Tick()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UniswapV3PoolInitializeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case uniswapv3poolinitialize.FieldSqrtPriceX96:
		return m.OldSqrtPriceX96(ctx)
	case uniswapv3poolinitialize.FieldTick:
		return m.OldTick(ctx)
	}
	return nil, fmt.Errorf("unknown UniswapV3PoolInitialize field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UniswapV3PoolInitializeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case uniswapv3poolinitialize.FieldSqrtPriceX96:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSqrtPriceX96(v)
		return nil
	case uniswapv3poolinitialize.FieldTick:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTick(v)
		return nil
	}
	return fmt.Errorf("unknown UniswapV3PoolInitialize field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UniswapV3PoolInitializeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UniswapV3PoolInitializeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UniswapV3PoolInitializeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown UniswapV3PoolInitialize numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UniswapV3PoolInitializeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UniswapV3PoolInitializeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UniswapV3PoolInitializeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown UniswapV3PoolInitialize nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UniswapV3PoolInitializeMutation) ResetField(name string) error {
	switch name {
	case uniswapv3poolinitialize.FieldSqrtPriceX96:
		m.ResetSqrtPriceX96()
		return nil
	case uniswapv3poolinitialize.FieldTick:
		m.ResetTick()
		return nil
	}
	return fmt.Errorf("unknown UniswapV3PoolInitialize field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UniswapV3PoolInitializeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.event != nil {
		edges = append(edges, uniswapv3poolinitialize.EdgeEvent)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UniswapV3PoolInitializeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case uniswapv3poolinitialize.EdgeEvent:
		if id := m.event; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UniswapV3PoolInitializeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UniswapV3PoolInitializeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UniswapV3PoolInitializeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedevent {
		edges = append(edges, uniswapv3poolinitialize.EdgeEvent)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UniswapV3PoolInitializeMutation) EdgeCleared(name string) bool {
	switch name {
	case uniswapv3poolinitialize.EdgeEvent:
		return m.clearedevent
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UniswapV3PoolInitializeMutation) ClearEdge(name string) error {
	switch name {
	case uniswapv3poolinitialize.EdgeEvent:
		m.ClearEvent()
		return nil
	}
	return fmt.Errorf("unknown UniswapV3PoolInitialize unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UniswapV3PoolInitializeMutation) ResetEdge(name string) error {
	switch name {
	case uniswapv3poolinitialize.EdgeEvent:
		m.ResetEvent()
		return nil
	}
	return fmt.Errorf("unknown UniswapV3PoolInitialize edge %s", name)
}

// UniswapV3PoolMintMutation represents an operation that mutates the UniswapV3PoolMint nodes in the graph.
type UniswapV3PoolMintMutation struct {
	config
	op            Op
	typ           string
	id            *int
	sender        *string
	owner         *string
	tick_lower    *string
	tick_upper    *string
	amount        *string
	amount0       *string
	amount1       *string
	clearedFields map[string]struct{}
	event         *int
	clearedevent  bool
	done          bool
	oldValue      func(context.Context) (*UniswapV3PoolMint, error)
	predicates    []predicate.UniswapV3PoolMint
}

var _ ent.Mutation = (*UniswapV3PoolMintMutation)(nil)

// uniswapv3poolmintOption allows management of the mutation configuration using functional options.
type uniswapv3poolmintOption func(*UniswapV3PoolMintMutation)

// newUniswapV3PoolMintMutation creates new mutation for the UniswapV3PoolMint entity.
func newUniswapV3PoolMintMutation(c config, op Op, opts ...uniswapv3poolmintOption) *UniswapV3PoolMintMutation {
	m := &UniswapV3PoolMintMutation{
		config:        c,
		op:            op,
		typ:           TypeUniswapV3PoolMint,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUniswapV3PoolMintID sets the ID field of the mutation.
func withUniswapV3PoolMintID(id int) uniswapv3poolmintOption {
	return func(m *UniswapV3PoolMintMutation) {
		var (
			err   error
			once  sync.Once
			value *UniswapV3PoolMint
		)
		m.oldValue = func(ctx context.Context) (*UniswapV3PoolMint, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UniswapV3PoolMint.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUniswapV3PoolMint sets the old UniswapV3PoolMint of the mutation.
func withUniswapV3PoolMint(node *UniswapV3PoolMint) uniswapv3poolmintOption {
	return func(m *UniswapV3PoolMintMutation) {
		m.oldValue = func(context.Context) (*UniswapV3PoolMint, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UniswapV3PoolMintMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UniswapV3PoolMintMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UniswapV3PoolMintMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetSender sets the "sender" field.
func (m *UniswapV3PoolMintMutation) SetSender(s string) {
	m.sender = &s
}

// Sender returns the value of the "sender" field in the mutation.
func (m *UniswapV3PoolMintMutation) Sender() (r string, exists bool) {
	v := m.sender
	if v == nil {
		return
	}
	return *v, true
}

// OldSender returns the old "sender" field's value of the UniswapV3PoolMint entity.
// If the UniswapV3PoolMint object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniswapV3PoolMintMutation) OldSender(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSender is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSender requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSender: %w", err)
	}
	return oldValue.Sender, nil
}

// ClearSender clears the value of the "sender" field.
func (m *UniswapV3PoolMintMutation) ClearSender() {
	m.sender = nil
	m.clearedFields[uniswapv3poolmint.FieldSender] = struct{}{}
}

// SenderCleared returns if the "sender" field was cleared in this mutation.
func (m *UniswapV3PoolMintMutation) SenderCleared() bool {
	_, ok := m.clearedFields[uniswapv3poolmint.FieldSender]
	return ok
}

// ResetSender resets all changes to the "sender" field.
func (m *UniswapV3PoolMintMutation) ResetSender() {
	m.sender = nil
	delete(m.clearedFields, uniswapv3poolmint.FieldSender)
}

// SetOwner sets the "owner" field.
func (m *UniswapV3PoolMintMutation) SetOwner(s string) {
	m.owner = &s
}

// Owner returns the value of the "owner" field in the mutation.
func (m *UniswapV3PoolMintMutation) Owner() (r string, exists bool) {
	v := m.owner
	if v == nil {
		return
	}
	return *v, true
}

// OldOwner returns the old "owner" field's value of the UniswapV3PoolMint entity.
// If the UniswapV3PoolMint object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniswapV3PoolMintMutation) OldOwner(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldOwner is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldOwner requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOwner: %w", err)
	}
	return oldValue.Owner, nil
}

// ResetOwner resets all changes to the "owner" field.
func (m *UniswapV3PoolMintMutation) ResetOwner() {
	m.owner = nil
}

// SetTickLower sets the "tick_lower" field.
func (m *UniswapV3PoolMintMutation) SetTickLower(s string) {
	m.tick_lower = &s
}

// TickLower returns the value of the "tick_lower" field in the mutation.
func (m *UniswapV3PoolMintMutation) TickLower() (r string, exists bool) {
	v := m.tick_lower
	if v == nil {
		return
	}
	return *v, true
}

// OldTickLower returns the old "tick_lower" field's value of the UniswapV3PoolMint entity.
// If the UniswapV3PoolMint object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniswapV3PoolMintMutation) OldTickLower(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTickLower is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTickLower requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTickLower: %w", err)
	}
	return oldValue.TickLower, nil
}

// ResetTickLower resets all changes to the "tick_lower" field.
func (m *UniswapV3PoolMintMutation) ResetTickLower() {
	m.tick_lower = nil
}

// SetTickUpper sets the "tick_upper" field.
func (m *UniswapV3PoolMintMutation) SetTickUpper(s string) {
	m.tick_upper = &s
}

// TickUpper returns the value of the "tick_upper" field in the mutation.
func (m *UniswapV3PoolMintMutation) TickUpper() (r string, exists bool) {
	v := m.tick_upper
	if v == nil {
		return
	}
	return *v, true
}

// OldTickUpper returns the old "tick_upper" field's value of the UniswapV3PoolMint entity.
// If the UniswapV3PoolMint object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniswapV3PoolMintMutation) OldTickUpper(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTickUpper is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTickUpper requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTickUpper: %w", err)
	}
	return oldValue.TickUpper, nil
}

// ResetTickUpper resets all changes to the "tick_upper" field.
func (m *UniswapV3PoolMintMutation) ResetTickUpper() {
	m.tick_upper = nil
}

// SetAmount sets the "amount" field.
func (m *UniswapV3PoolMintMutation) SetAmount(s string) {
	m.amount = &s
}

// Amount returns the value of the "amount" field in the mutation.
func (m *UniswapV3PoolMintMutation) Amount() (r string, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the UniswapV3PoolMint entity.
// If the UniswapV3PoolMint object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniswapV3PoolMintMutation) OldAmount(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// ResetAmount resets all changes to the "amount" field.
func (m *UniswapV3PoolMintMutation) ResetAmount() {
	m.amount = nil
}

// SetAmount0 sets the "amount0" field.
func (m *UniswapV3PoolMintMutation) SetAmount0(s string) {
	m.amount0 = &s
}

// Amount0 returns the value of the "amount0" field in the mutation.
func (m *UniswapV3PoolMintMutation) Amount0() (r string, exists bool) {
	v := m.amount0
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount0 returns the old "amount0" field's value of the UniswapV3PoolMint entity.
// If the UniswapV3PoolMint object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniswapV3PoolMintMutation) OldAmount0(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAmount0 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAmount0 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount0: %w", err)
	}
	return oldValue.Amount0, nil
}

// ResetAmount0 resets all changes to the "amount0" field.
func (m *UniswapV3PoolMintMutation) ResetAmount0() {
	m.amount0 = nil
}

// SetAmount1 sets the "amount1" field.
func (m *UniswapV3PoolMintMutation) SetAmount1(s string) {
	m.amount1 = &s
}

// Amount1 returns the value of the "amount1" field in the mutation.
func (m *UniswapV3PoolMintMutation) Amount1() (r string, exists bool) {
	v := m.amount1
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount1 returns the old "amount1" field's value of the UniswapV3PoolMint entity.
// If the UniswapV3PoolMint object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniswapV3PoolMintMutation) OldAmount1(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAmount1 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAmount1 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount1: %w", err)
	}
	return oldValue.Amount1, nil
}

// ResetAmount1 resets all changes to the "amount1" field.
func (m *UniswapV3PoolMintMutation) ResetAmount1() {
	m.amount1 = nil
}

// SetEventID sets the "event" edge to the Event entity by id.
func (m *UniswapV3PoolMintMutation) SetEventID(id int) {
	m.event = &id
}

// ClearEvent clears the "event" edge to the Event entity.
func (m *UniswapV3PoolMintMutation) ClearEvent() {
	m.clearedevent = true
}

// EventCleared reports if the "event" edge to the Event entity was cleared.
func (m *UniswapV3PoolMintMutation) EventCleared() bool {
	return m.clearedevent
}

// EventID returns the "event" edge ID in the mutation.
func (m *UniswapV3PoolMintMutation) EventID() (id int, exists bool) {
	if m.event != nil {
		return *m.event, true
	}
	return
}

// EventIDs returns the "event" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EventID instead. It exists only for internal usage by the builders.
func (m *UniswapV3PoolMintMutation) EventIDs() (ids []int) {
	if id := m.event; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEvent resets all changes to the "event" edge.
func (m *UniswapV3PoolMintMutation) ResetEvent() {
	m.event = nil
	m.clearedevent = false
}

// Where appends a list predicates to the UniswapV3PoolMintMutation builder.
func (m *UniswapV3PoolMintMutation) Where(ps ...predicate.UniswapV3PoolMint) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UniswapV3PoolMintMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (UniswapV3PoolMint).
func (m *UniswapV3PoolMintMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UniswapV3PoolMintMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.sender != nil {
		fields = append(fields, uniswapv3poolmint.FieldSender)
	}
	if m.owner != nil {
		fields = append(fields, uniswapv3poolmint.FieldOwner)
	}
	if m.tick_lower != nil {
		fields = append(fields, uniswapv3poolmint.FieldTickLower)
	}
	if m.tick_upper != nil {
		fields = append(fields, uniswapv3poolmint.FieldTickUpper)
	}
	if m.amount != nil {
		fields = append(fields, uniswapv3poolmint.FieldAmount)
	}
	if m.amount0 != nil {
		fields = append(fields, uniswapv3poolmint.FieldAmount0)
	}
	if m.amount1 != nil {
		fields = append(fields, uniswapv3poolmint.FieldAmount1)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UniswapV3PoolMintMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case uniswapv3poolmint.FieldSender:
		return m.Sender()
	case uniswapv3poolmint.FieldOwner:
		return m.Owner()
	case uniswapv3poolmint.FieldTickLower:
		return m.TickLower()
	case uniswapv3poolmint.FieldTickUpper:
		return m.TickUpper()
	case uniswapv3poolmint.FieldAmount:
		return m.Amount()
	case uniswapv3poolmint.FieldAmount0:
		return m.Amount0()
	case uniswapv3poolmint.FieldAmount1:
		return m.Amount1()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UniswapV3PoolMintMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case uniswapv3poolmint.FieldSender:
		return m.OldSender(ctx)
	case uniswapv3poolmint.FieldOwner:
		return m.OldOwner(ctx)
	case uniswapv3poolmint.FieldTickLower:
		return m.OldTickLower(ctx)
	case uniswapv3poolmint.FieldTickUpper:
		return m.OldTickUpper(ctx)
	case uniswapv3poolmint.FieldAmount:
		return m.OldAmount(ctx)
	case uniswapv3poolmint.FieldAmount0:
		return m.OldAmount0(ctx)
	case uniswapv3poolmint.FieldAmount1:
		return m.OldAmount1(ctx)
	}
	return nil, fmt.Errorf("unknown UniswapV3PoolMint field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UniswapV3PoolMintMutation) SetField(name string, value ent.Value) error {
	switch name {
	case uniswapv3poolmint.FieldSender:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSender(v)
		return nil
	case uniswapv3poolmint.FieldOwner:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOwner(v)
		return nil
	case uniswapv3poolmint.FieldTickLower:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTickLower(v)
		return nil
	case uniswapv3poolmint.FieldTickUpper:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTickUpper(v)
		return nil
	case uniswapv3poolmint.FieldAmount:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case uniswapv3poolmint.FieldAmount0:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount0(v)
		return nil
	case uniswapv3poolmint.FieldAmount1:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount1(v)
		return nil
	}
	return fmt.Errorf("unknown UniswapV3PoolMint field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UniswapV3PoolMintMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UniswapV3PoolMintMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UniswapV3PoolMintMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown UniswapV3PoolMint numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UniswapV3PoolMintMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(uniswapv3poolmint.FieldSender) {
		fields = append(fields, uniswapv3poolmint.FieldSender)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UniswapV3PoolMintMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UniswapV3PoolMintMutation) ClearField(name string) error {
	switch name {
	case uniswapv3poolmint.FieldSender:
		m.ClearSender()
		return nil
	}
	return fmt.Errorf("unknown UniswapV3PoolMint nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UniswapV3PoolMintMutation) ResetField(name string) error {
	switch name {
	case uniswapv3poolmint.FieldSender:
		m.ResetSender()
		return nil
	case uniswapv3poolmint.FieldOwner:
		m.ResetOwner()
		return nil
	case uniswapv3poolmint.FieldTickLower:
		m.ResetTickLower()
		return nil
	case uniswapv3poolmint.FieldTickUpper:
		m.ResetTickUpper()
		return nil
	case uniswapv3poolmint.FieldAmount:
		m.ResetAmount()
		return nil
	case uniswapv3poolmint.FieldAmount0:
		m.ResetAmount0()
		return nil
	case uniswapv3poolmint.FieldAmount1:
		m.ResetAmount1()
		return nil
	}
	return fmt.Errorf("unknown UniswapV3PoolMint field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UniswapV3PoolMintMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.event != nil {
		edges = append(edges, uniswapv3poolmint.EdgeEvent)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UniswapV3PoolMintMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case uniswapv3poolmint.EdgeEvent:
		if id := m.event; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UniswapV3PoolMintMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UniswapV3PoolMintMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UniswapV3PoolMintMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedevent {
		edges = append(edges, uniswapv3poolmint.EdgeEvent)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UniswapV3PoolMintMutation) EdgeCleared(name string) bool {
	switch name {
	case uniswapv3poolmint.EdgeEvent:
		return m.clearedevent
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UniswapV3PoolMintMutation) ClearEdge(name string) error {
	switch name {
	case uniswapv3poolmint.EdgeEvent:
		m.ClearEvent()
		return nil
	}
	return fmt.Errorf("unknown UniswapV3PoolMint unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UniswapV3PoolMintMutation) ResetEdge(name string) error {
	switch name {
	case uniswapv3poolmint.EdgeEvent:
		m.ResetEvent()
		return nil
	}
	return fmt.Errorf("unknown UniswapV3PoolMint edge %s", name)
}

// UniswapV3PoolSwapMutation represents an operation that mutates the UniswapV3PoolSwap nodes in the graph.
type UniswapV3PoolSwapMutation struct {
	config
	op             Op
	typ            string
	id             *int
	sender         *string
	recipient      *string
	amount0        *string
	amount1        *string
	sqrt_price_x96 *string
	liquidity      *string
	tick           *string
	clearedFields  map[string]struct{}
	event          *int
	clearedevent   bool
	done           bool
	oldValue       func(context.Context) (*UniswapV3PoolSwap, error)
	predicates     []predicate.UniswapV3PoolSwap
}

var _ ent.Mutation = (*UniswapV3PoolSwapMutation)(nil)

// uniswapv3poolswapOption allows management of the mutation configuration using functional options.
type uniswapv3poolswapOption func(*UniswapV3PoolSwapMutation)

// newUniswapV3PoolSwapMutation creates new mutation for the UniswapV3PoolSwap entity.
func newUniswapV3PoolSwapMutation(c config, op Op, opts ...uniswapv3poolswapOption) *UniswapV3PoolSwapMutation {
	m := &UniswapV3PoolSwapMutation{
		config:        c,
		op:            op,
		typ:           TypeUniswapV3PoolSwap,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUniswapV3PoolSwapID sets the ID field of the mutation.
func withUniswapV3PoolSwapID(id int) uniswapv3poolswapOption {
	return func(m *UniswapV3PoolSwapMutation) {
		var (
			err   error
			once  sync.Once
			value *UniswapV3PoolSwap
		)
		m.oldValue = func(ctx context.Context) (*UniswapV3PoolSwap, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UniswapV3PoolSwap.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUniswapV3PoolSwap sets the old UniswapV3PoolSwap of the mutation.
func withUniswapV3PoolSwap(node *UniswapV3PoolSwap) uniswapv3poolswapOption {
	return func(m *UniswapV3PoolSwapMutation) {
		m.oldValue = func(context.Context) (*UniswapV3PoolSwap, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UniswapV3PoolSwapMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UniswapV3PoolSwapMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UniswapV3PoolSwapMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetSender sets the "sender" field.
func (m *UniswapV3PoolSwapMutation) SetSender(s string) {
	m.sender = &s
}

// Sender returns the value of the "sender" field in the mutation.
func (m *UniswapV3PoolSwapMutation) Sender() (r string, exists bool) {
	v := m.sender
	if v == nil {
		return
	}
	return *v, true
}

// OldSender returns the old "sender" field's value of the UniswapV3PoolSwap entity.
// If the UniswapV3PoolSwap object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniswapV3PoolSwapMutation) OldSender(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSender is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSender requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSender: %w", err)
	}
	return oldValue.Sender, nil
}

// ResetSender resets all changes to the "sender" field.
func (m *UniswapV3PoolSwapMutation) ResetSender() {
	m.sender = nil
}

// SetRecipient sets the "recipient" field.
func (m *UniswapV3PoolSwapMutation) SetRecipient(s string) {
	m.recipient = &s
}

// Recipient returns the value of the "recipient" field in the mutation.
func (m *UniswapV3PoolSwapMutation) Recipient() (r string, exists bool) {
	v := m.recipient
	if v == nil {
		return
	}
	return *v, true
}

// OldRecipient returns the old "recipient" field's value of the UniswapV3PoolSwap entity.
// If the UniswapV3PoolSwap object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniswapV3PoolSwapMutation) OldRecipient(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRecipient is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRecipient requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRecipient: %w", err)
	}
	return oldValue.Recipient, nil
}

// ResetRecipient resets all changes to the "recipient" field.
func (m *UniswapV3PoolSwapMutation) ResetRecipient() {
	m.recipient = nil
}

// SetAmount0 sets the "amount0" field.
func (m *UniswapV3PoolSwapMutation) SetAmount0(s string) {
	m.amount0 = &s
}

// Amount0 returns the value of the "amount0" field in the mutation.
func (m *UniswapV3PoolSwapMutation) Amount0() (r string, exists bool) {
	v := m.amount0
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount0 returns the old "amount0" field's value of the UniswapV3PoolSwap entity.
// If the UniswapV3PoolSwap object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniswapV3PoolSwapMutation) OldAmount0(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAmount0 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAmount0 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount0: %w", err)
	}
	return oldValue.Amount0, nil
}

// ResetAmount0 resets all changes to the "amount0" field.
func (m *UniswapV3PoolSwapMutation) ResetAmount0() {
	m.amount0 = nil
}

// SetAmount1 sets the "amount1" field.
func (m *UniswapV3PoolSwapMutation) SetAmount1(s string) {
	m.amount1 = &s
}

// Amount1 returns the value of the "amount1" field in the mutation.
func (m *UniswapV3PoolSwapMutation) Amount1() (r string, exists bool) {
	v := m.amount1
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount1 returns the old "amount1" field's value of the UniswapV3PoolSwap entity.
// If the UniswapV3PoolSwap object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniswapV3PoolSwapMutation) OldAmount1(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAmount1 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAmount1 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount1: %w", err)
	}
	return oldValue.Amount1, nil
}

// ResetAmount1 resets all changes to the "amount1" field.
func (m *UniswapV3PoolSwapMutation) ResetAmount1() {
	m.amount1 = nil
}

// SetSqrtPriceX96 sets the "sqrt_price_x96" field.
func (m *UniswapV3PoolSwapMutation) SetSqrtPriceX96(s string) {
	m.sqrt_price_x96 = &s
}

// SqrtPriceX96 returns the value of the "sqrt_price_x96" field in the mutation.
func (m *UniswapV3PoolSwapMutation) SqrtPriceX96() (r string, exists bool) {
	v := m.sqrt_price_x96
	if v == nil {
		return
	}
	return *v, true
}

// OldSqrtPriceX96 returns the old "sqrt_price_x96" field's value of the UniswapV3PoolSwap entity.
// If the UniswapV3PoolSwap object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniswapV3PoolSwapMutation) OldSqrtPriceX96(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSqrtPriceX96 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSqrtPriceX96 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSqrtPriceX96: %w", err)
	}
	return oldValue.SqrtPriceX96, nil
}

// ResetSqrtPriceX96 resets all changes to the "sqrt_price_x96" field.
func (m *UniswapV3PoolSwapMutation) ResetSqrtPriceX96() {
	m.sqrt_price_x96 = nil
}

// SetLiquidity sets the "liquidity" field.
func (m *UniswapV3PoolSwapMutation) SetLiquidity(s string) {
	m.liquidity = &s
}

// Liquidity returns the value of the "liquidity" field in the mutation.
func (m *UniswapV3PoolSwapMutation) Liquidity() (r string, exists bool) {
	v := m.liquidity
	if v == nil {
		return
	}
	return *v, true
}

// OldLiquidity returns the old "liquidity" field's value of the UniswapV3PoolSwap entity.
// If the UniswapV3PoolSwap object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniswapV3PoolSwapMutation) OldLiquidity(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLiquidity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLiquidity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLiquidity: %w", err)
	}
	return oldValue.Liquidity, nil
}

// ResetLiquidity resets all changes to the "liquidity" field.
func (m *UniswapV3PoolSwapMutation) ResetLiquidity() {
	m.liquidity = nil
}

// SetTick sets the "tick" field.
func (m *UniswapV3PoolSwapMutation) SetTick(s string) {
	m.tick = &s
}

// Tick returns the value of the "tick" field in the mutation.
func (m *UniswapV3PoolSwapMutation) Tick() (r string, exists bool) {
	v := m.tick
	if v == nil {
		return
	}
	return *v, true
}

// OldTick returns the old "tick" field's value of the UniswapV3PoolSwap entity.
// If the UniswapV3PoolSwap object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniswapV3PoolSwapMutation) OldTick(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTick is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTick requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTick: %w", err)
	}
	return oldValue.Tick, nil
}

// ResetTick resets all changes to the "tick" field.
func (m *UniswapV3PoolSwapMutation) ResetTick() {
	m.tick = nil
}

// SetEventID sets the "event" edge to the Event entity by id.
func (m *UniswapV3PoolSwapMutation) SetEventID(id int) {
	m.event = &id
}

// ClearEvent clears the "event" edge to the Event entity.
func (m *UniswapV3PoolSwapMutation) ClearEvent() {
	m.clearedevent = true
}

// EventCleared reports if the "event" edge to the Event entity was cleared.
func (m *UniswapV3PoolSwapMutation) EventCleared() bool {
	return m.clearedevent
}

// EventID returns the "event" edge ID in the mutation.
func (m *UniswapV3PoolSwapMutation) EventID() (id int, exists bool) {
	if m.event != nil {
		return *m.event, true
	}
	return
}

// EventIDs returns the "event" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EventID instead. It exists only for internal usage by the builders.
func (m *UniswapV3PoolSwapMutation) EventIDs() (ids []int) {
	if id := m.event; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEvent resets all changes to the "event" edge.
func (m *UniswapV3PoolSwapMutation) ResetEvent() {
	m.event = nil
	m.clearedevent = false
}

// Where appends a list predicates to the UniswapV3PoolSwapMutation builder.
func (m *UniswapV3PoolSwapMutation) Where(ps ...predicate.UniswapV3PoolSwap) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UniswapV3PoolSwapMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (UniswapV3PoolSwap).
func (m *UniswapV3PoolSwapMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UniswapV3PoolSwapMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.sender != nil {
		fields = append(fields, uniswapv3poolswap.FieldSender)
	}
	if m.recipient != nil {
		fields = append(fields, uniswapv3poolswap.FieldRecipient)
	}
	if m.amount0 != nil {
		fields = append(fields, uniswapv3poolswap.FieldAmount0)
	}
	if m.amount1 != nil {
		fields = append(fields, uniswapv3poolswap.FieldAmount1)
	}
	if m.sqrt_price_x96 != nil {
		fields = append(fields, uniswapv3poolswap.FieldSqrtPriceX96)
	}
	if m.liquidity != nil {
		fields = append(fields, uniswapv3poolswap.FieldLiquidity)
	}
	if m.tick != nil {
		fields = append(fields, uniswapv3poolswap.FieldTick)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UniswapV3PoolSwapMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case uniswapv3poolswap.FieldSender:
		return m.Sender()
	case uniswapv3poolswap.FieldRecipient:
		return m.Recipient()
	case uniswapv3poolswap.FieldAmount0:
		return m.Amount0()
	case uniswapv3poolswap.FieldAmount1:
		return m.Amount1()
	case uniswapv3poolswap.FieldSqrtPriceX96:
		return m.SqrtPriceX96()
	case uniswapv3poolswap.FieldLiquidity:
		return m.Liquidity()
	case uniswapv3poolswap.FieldTick:
		return m.Tick()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UniswapV3PoolSwapMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case uniswapv3poolswap.FieldSender:
		return m.OldSender(ctx)
	case uniswapv3poolswap.FieldRecipient:
		return m.OldRecipient(ctx)
	case uniswapv3poolswap.FieldAmount0:
		return m.OldAmount0(ctx)
	case uniswapv3poolswap.FieldAmount1:
		return m.OldAmount1(ctx)
	case uniswapv3poolswap.FieldSqrtPriceX96:
		return m.OldSqrtPriceX96(ctx)
	case uniswapv3poolswap.FieldLiquidity:
		return m.OldLiquidity(ctx)
	case uniswapv3poolswap.FieldTick:
		return m.OldTick(ctx)
	}
	return nil, fmt.Errorf("unknown UniswapV3PoolSwap field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UniswapV3PoolSwapMutation) SetField(name string, value ent.Value) error {
	switch name {
	case uniswapv3poolswap.FieldSender:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSender(v)
		return nil
	case uniswapv3poolswap.FieldRecipient:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRecipient(v)
		return nil
	case uniswapv3poolswap.FieldAmount0:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount0(v)
		return nil
	case uniswapv3poolswap.FieldAmount1:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount1(v)
		return nil
	case uniswapv3poolswap.FieldSqrtPriceX96:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSqrtPriceX96(v)
		return nil
	case uniswapv3poolswap.FieldLiquidity:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLiquidity(v)
		return nil
	case uniswapv3poolswap.FieldTick:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTick(v)
		return nil
	}
	return fmt.Errorf("unknown UniswapV3PoolSwap field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UniswapV3PoolSwapMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UniswapV3PoolSwapMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UniswapV3PoolSwapMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown UniswapV3PoolSwap numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UniswapV3PoolSwapMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UniswapV3PoolSwapMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UniswapV3PoolSwapMutation) ClearField(name string) error {
	return fmt.Errorf("unknown UniswapV3PoolSwap nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UniswapV3PoolSwapMutation) ResetField(name string) error {
	switch name {
	case uniswapv3poolswap.FieldSender:
		m.ResetSender()
		return nil
	case uniswapv3poolswap.FieldRecipient:
		m.ResetRecipient()
		return nil
	case uniswapv3poolswap.FieldAmount0:
		m.ResetAmount0()
		return nil
	case uniswapv3poolswap.FieldAmount1:
		m.ResetAmount1()
		return nil
	case uniswapv3poolswap.FieldSqrtPriceX96:
		m.ResetSqrtPriceX96()
		return nil
	case uniswapv3poolswap.FieldLiquidity:
		m.ResetLiquidity()
		return nil
	case uniswapv3poolswap.FieldTick:
		m.ResetTick()
		return nil
	}
	return fmt.Errorf("unknown UniswapV3PoolSwap field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UniswapV3PoolSwapMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.event != nil {
		edges = append(edges, uniswapv3poolswap.EdgeEvent)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UniswapV3PoolSwapMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case uniswapv3poolswap.EdgeEvent:
		if id := m.event; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UniswapV3PoolSwapMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UniswapV3PoolSwapMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UniswapV3PoolSwapMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedevent {
		edges = append(edges, uniswapv3poolswap.EdgeEvent)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UniswapV3PoolSwapMutation) EdgeCleared(name string) bool {
	switch name {
	case uniswapv3poolswap.EdgeEvent:
		return m.clearedevent
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UniswapV3PoolSwapMutation) ClearEdge(name string) error {
	switch name {
	case uniswapv3poolswap.EdgeEvent:
		m.ClearEvent()
		return nil
	}
	return fmt.Errorf("unknown UniswapV3PoolSwap unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UniswapV3PoolSwapMutation) ResetEdge(name string) error {
	switch name {
	case uniswapv3poolswap.EdgeEvent:
		m.ResetEvent()
		return nil
	}
	return fmt.Errorf("unknown UniswapV3PoolSwap edge %s", name)
}

// UniswapV3TransferMutation represents an operation that mutates the UniswapV3Transfer nodes in the graph.
type UniswapV3TransferMutation struct {
	config
	op            Op
	typ           string
	id            *int
	token_id      *string
	from          *string
	to            *string
	clearedFields map[string]struct{}
	event         *int
	clearedevent  bool
	done          bool
	oldValue      func(context.Context) (*UniswapV3Transfer, error)
	predicates    []predicate.UniswapV3Transfer
}

var _ ent.Mutation = (*UniswapV3TransferMutation)(nil)

// uniswapv3transferOption allows management of the mutation configuration using functional options.
type uniswapv3transferOption func(*UniswapV3TransferMutation)

// newUniswapV3TransferMutation creates new mutation for the UniswapV3Transfer entity.
func newUniswapV3TransferMutation(c config, op Op, opts ...uniswapv3transferOption) *UniswapV3TransferMutation {
	m := &UniswapV3TransferMutation{
		config:        c,
		op:            op,
		typ:           TypeUniswapV3Transfer,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUniswapV3TransferID sets the ID field of the mutation.
func withUniswapV3TransferID(id int) uniswapv3transferOption {
	return func(m *UniswapV3TransferMutation) {
		var (
			err   error
			once  sync.Once
			value *UniswapV3Transfer
		)
		m.oldValue = func(ctx context.Context) (*UniswapV3Transfer, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UniswapV3Transfer.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUniswapV3Transfer sets the old UniswapV3Transfer of the mutation.
func withUniswapV3Transfer(node *UniswapV3Transfer) uniswapv3transferOption {
	return func(m *UniswapV3TransferMutation) {
		m.oldValue = func(context.Context) (*UniswapV3Transfer, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UniswapV3TransferMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UniswapV3TransferMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UniswapV3TransferMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetTokenID sets the "token_id" field.
func (m *UniswapV3TransferMutation) SetTokenID(s string) {
	m.token_id = &s
}

// TokenID returns the value of the "token_id" field in the mutation.
func (m *UniswapV3TransferMutation) TokenID() (r string, exists bool) {
	v := m.token_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTokenID returns the old "token_id" field's value of the UniswapV3Transfer entity.
// If the UniswapV3Transfer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniswapV3TransferMutation) OldTokenID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTokenID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTokenID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTokenID: %w", err)
	}
	return oldValue.TokenID, nil
}

// ResetTokenID resets all changes to the "token_id" field.
func (m *UniswapV3TransferMutation) ResetTokenID() {
	m.token_id = nil
}

// SetFrom sets the "from" field.
func (m *UniswapV3TransferMutation) SetFrom(s string) {
	m.from = &s
}

// From returns the value of the "from" field in the mutation.
func (m *UniswapV3TransferMutation) From() (r string, exists bool) {
	v := m.from
	if v == nil {
		return
	}
	return *v, true
}

// OldFrom returns the old "from" field's value of the UniswapV3Transfer entity.
// If the UniswapV3Transfer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniswapV3TransferMutation) OldFrom(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldFrom is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldFrom requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFrom: %w", err)
	}
	return oldValue.From, nil
}

// ResetFrom resets all changes to the "from" field.
func (m *UniswapV3TransferMutation) ResetFrom() {
	m.from = nil
}

// SetTo sets the "to" field.
func (m *UniswapV3TransferMutation) SetTo(s string) {
	m.to = &s
}

// To returns the value of the "to" field in the mutation.
func (m *UniswapV3TransferMutation) To() (r string, exists bool) {
	v := m.to
	if v == nil {
		return
	}
	return *v, true
}

// OldTo returns the old "to" field's value of the UniswapV3Transfer entity.
// If the UniswapV3Transfer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniswapV3TransferMutation) OldTo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTo: %w", err)
	}
	return oldValue.To, nil
}

// ResetTo resets all changes to the "to" field.
func (m *UniswapV3TransferMutation) ResetTo() {
	m.to = nil
}

// SetEventID sets the "event" edge to the Event entity by id.
func (m *UniswapV3TransferMutation) SetEventID(id int) {
	m.event = &id
}

// ClearEvent clears the "event" edge to the Event entity.
func (m *UniswapV3TransferMutation) ClearEvent() {
	m.clearedevent = true
}

// EventCleared reports if the "event" edge to the Event entity was cleared.
func (m *UniswapV3TransferMutation) EventCleared() bool {
	return m.clearedevent
}

// EventID returns the "event" edge ID in the mutation.
func (m *UniswapV3TransferMutation) EventID() (id int, exists bool) {
	if m.event != nil {
		return *m.event, true
	}
	return
}

// EventIDs returns the "event" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EventID instead. It exists only for internal usage by the builders.
func (m *UniswapV3TransferMutation) EventIDs() (ids []int) {
	if id := m.event; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEvent resets all changes to the "event" edge.
func (m *UniswapV3TransferMutation) ResetEvent() {
	m.event = nil
	m.clearedevent = false
}

// Where appends a list predicates to the UniswapV3TransferMutation builder.
func (m *UniswapV3TransferMutation) Where(ps ...predicate.UniswapV3Transfer) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UniswapV3TransferMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (UniswapV3Transfer).
func (m *UniswapV3TransferMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UniswapV3TransferMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.token_id != nil {
		fields = append(fields, uniswapv3transfer.FieldTokenID)
	}
	if m.from != nil {
		fields = append(fields, uniswapv3transfer.FieldFrom)
	}
	if m.to != nil {
		fields = append(fields, uniswapv3transfer.FieldTo)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UniswapV3TransferMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case uniswapv3transfer.FieldTokenID:
		return m.TokenID()
	case uniswapv3transfer.FieldFrom:
		return m.From()
	case uniswapv3transfer.FieldTo:
		return m.To()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UniswapV3TransferMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case uniswapv3transfer.FieldTokenID:
		return m.OldTokenID(ctx)
	case uniswapv3transfer.FieldFrom:
		return m.OldFrom(ctx)
	case uniswapv3transfer.FieldTo:
		return m.OldTo(ctx)
	}
	return nil, fmt.Errorf("unknown UniswapV3Transfer field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UniswapV3TransferMutation) SetField(name string, value ent.Value) error {
	switch name {
	case uniswapv3transfer.FieldTokenID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTokenID(v)
		return nil
	case uniswapv3transfer.FieldFrom:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFrom(v)
		return nil
	case uniswapv3transfer.FieldTo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTo(v)
		return nil
	}
	return fmt.Errorf("unknown UniswapV3Transfer field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UniswapV3TransferMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UniswapV3TransferMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UniswapV3TransferMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown UniswapV3Transfer numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UniswapV3TransferMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UniswapV3TransferMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UniswapV3TransferMutation) ClearField(name string) error {
	return fmt.Errorf("unknown UniswapV3Transfer nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UniswapV3TransferMutation) ResetField(name string) error {
	switch name {
	case uniswapv3transfer.FieldTokenID:
		m.ResetTokenID()
		return nil
	case uniswapv3transfer.FieldFrom:
		m.ResetFrom()
		return nil
	case uniswapv3transfer.FieldTo:
		m.ResetTo()
		return nil
	}
	return fmt.Errorf("unknown UniswapV3Transfer field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UniswapV3TransferMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.event != nil {
		edges = append(edges, uniswapv3transfer.EdgeEvent)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UniswapV3TransferMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case uniswapv3transfer.EdgeEvent:
		if id := m.event; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UniswapV3TransferMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UniswapV3TransferMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UniswapV3TransferMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedevent {
		edges = append(edges, uniswapv3transfer.EdgeEvent)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UniswapV3TransferMutation) EdgeCleared(name string) bool {
	switch name {
	case uniswapv3transfer.EdgeEvent:
		return m.clearedevent
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UniswapV3TransferMutation) ClearEdge(name string) error {
	switch name {
	case uniswapv3transfer.EdgeEvent:
		m.ClearEvent()
		return nil
	}
	return fmt.Errorf("unknown UniswapV3Transfer unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UniswapV3TransferMutation) ResetEdge(name string) error {
	switch name {
	case uniswapv3transfer.EdgeEvent:
		m.ResetEvent()
		return nil
	}
	return fmt.Errorf("unknown UniswapV3Transfer edge %s", name)
}
