// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"

	"github.com/artmisxyz/blockinspector/ent/event"
	"github.com/artmisxyz/blockinspector/ent/position"
	"github.com/artmisxyz/blockinspector/ent/predicate"
	"github.com/artmisxyz/blockinspector/ent/schema"
	"github.com/artmisxyz/blockinspector/ent/uniswapv3collect"
	"github.com/artmisxyz/blockinspector/ent/uniswapv3decreaseliqudity"
	"github.com/artmisxyz/blockinspector/ent/uniswapv3increaseliqudity"
	"github.com/artmisxyz/blockinspector/ent/uniswapv3transfer"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeEvent                     = "Event"
	TypePosition                  = "Position"
	TypeUniswapV3Collect          = "UniswapV3Collect"
	TypeUniswapV3DecreaseLiqudity = "UniswapV3DecreaseLiqudity"
	TypeUniswapV3IncreaseLiqudity = "UniswapV3IncreaseLiqudity"
	TypeUniswapV3Transfer         = "UniswapV3Transfer"
)

// EventMutation represents an operation that mutates the Event nodes in the graph.
type EventMutation struct {
	config
	op                        Op
	typ                       string
	id                        *int
	name                      *string
	signature                 *string
	address                   *string
	block_number              *uint64
	addblock_number           *uint64
	tx_hash                   *string
	tx_index                  *uint
	addtx_index               *uint
	block_hash                *string
	index                     *uint
	addindex                  *uint
	hash                      *string
	clearedFields             map[string]struct{}
	increase_liquidity        map[int]struct{}
	removedincrease_liquidity map[int]struct{}
	clearedincrease_liquidity bool
	decrease_liquidity        map[int]struct{}
	removeddecrease_liquidity map[int]struct{}
	cleareddecrease_liquidity bool
	collect                   map[int]struct{}
	removedcollect            map[int]struct{}
	clearedcollect            bool
	transfer                  map[int]struct{}
	removedtransfer           map[int]struct{}
	clearedtransfer           bool
	done                      bool
	oldValue                  func(context.Context) (*Event, error)
	predicates                []predicate.Event
}

var _ ent.Mutation = (*EventMutation)(nil)

// eventOption allows management of the mutation configuration using functional options.
type eventOption func(*EventMutation)

// newEventMutation creates new mutation for the Event entity.
func newEventMutation(c config, op Op, opts ...eventOption) *EventMutation {
	m := &EventMutation{
		config:        c,
		op:            op,
		typ:           TypeEvent,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEventID sets the ID field of the mutation.
func withEventID(id int) eventOption {
	return func(m *EventMutation) {
		var (
			err   error
			once  sync.Once
			value *Event
		)
		m.oldValue = func(ctx context.Context) (*Event, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Event.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEvent sets the old Event of the mutation.
func withEvent(node *Event) eventOption {
	return func(m *EventMutation) {
		m.oldValue = func(context.Context) (*Event, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EventMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EventMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EventMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *EventMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *EventMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *EventMutation) ResetName() {
	m.name = nil
}

// SetSignature sets the "signature" field.
func (m *EventMutation) SetSignature(s string) {
	m.signature = &s
}

// Signature returns the value of the "signature" field in the mutation.
func (m *EventMutation) Signature() (r string, exists bool) {
	v := m.signature
	if v == nil {
		return
	}
	return *v, true
}

// OldSignature returns the old "signature" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldSignature(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSignature is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSignature requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSignature: %w", err)
	}
	return oldValue.Signature, nil
}

// ResetSignature resets all changes to the "signature" field.
func (m *EventMutation) ResetSignature() {
	m.signature = nil
}

// SetAddress sets the "address" field.
func (m *EventMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *EventMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ResetAddress resets all changes to the "address" field.
func (m *EventMutation) ResetAddress() {
	m.address = nil
}

// SetBlockNumber sets the "block_number" field.
func (m *EventMutation) SetBlockNumber(u uint64) {
	m.block_number = &u
	m.addblock_number = nil
}

// BlockNumber returns the value of the "block_number" field in the mutation.
func (m *EventMutation) BlockNumber() (r uint64, exists bool) {
	v := m.block_number
	if v == nil {
		return
	}
	return *v, true
}

// OldBlockNumber returns the old "block_number" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldBlockNumber(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldBlockNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldBlockNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBlockNumber: %w", err)
	}
	return oldValue.BlockNumber, nil
}

// AddBlockNumber adds u to the "block_number" field.
func (m *EventMutation) AddBlockNumber(u uint64) {
	if m.addblock_number != nil {
		*m.addblock_number += u
	} else {
		m.addblock_number = &u
	}
}

// AddedBlockNumber returns the value that was added to the "block_number" field in this mutation.
func (m *EventMutation) AddedBlockNumber() (r uint64, exists bool) {
	v := m.addblock_number
	if v == nil {
		return
	}
	return *v, true
}

// ResetBlockNumber resets all changes to the "block_number" field.
func (m *EventMutation) ResetBlockNumber() {
	m.block_number = nil
	m.addblock_number = nil
}

// SetTxHash sets the "tx_hash" field.
func (m *EventMutation) SetTxHash(s string) {
	m.tx_hash = &s
}

// TxHash returns the value of the "tx_hash" field in the mutation.
func (m *EventMutation) TxHash() (r string, exists bool) {
	v := m.tx_hash
	if v == nil {
		return
	}
	return *v, true
}

// OldTxHash returns the old "tx_hash" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldTxHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTxHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTxHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTxHash: %w", err)
	}
	return oldValue.TxHash, nil
}

// ResetTxHash resets all changes to the "tx_hash" field.
func (m *EventMutation) ResetTxHash() {
	m.tx_hash = nil
}

// SetTxIndex sets the "tx_index" field.
func (m *EventMutation) SetTxIndex(u uint) {
	m.tx_index = &u
	m.addtx_index = nil
}

// TxIndex returns the value of the "tx_index" field in the mutation.
func (m *EventMutation) TxIndex() (r uint, exists bool) {
	v := m.tx_index
	if v == nil {
		return
	}
	return *v, true
}

// OldTxIndex returns the old "tx_index" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldTxIndex(ctx context.Context) (v uint, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTxIndex is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTxIndex requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTxIndex: %w", err)
	}
	return oldValue.TxIndex, nil
}

// AddTxIndex adds u to the "tx_index" field.
func (m *EventMutation) AddTxIndex(u uint) {
	if m.addtx_index != nil {
		*m.addtx_index += u
	} else {
		m.addtx_index = &u
	}
}

// AddedTxIndex returns the value that was added to the "tx_index" field in this mutation.
func (m *EventMutation) AddedTxIndex() (r uint, exists bool) {
	v := m.addtx_index
	if v == nil {
		return
	}
	return *v, true
}

// ResetTxIndex resets all changes to the "tx_index" field.
func (m *EventMutation) ResetTxIndex() {
	m.tx_index = nil
	m.addtx_index = nil
}

// SetBlockHash sets the "block_hash" field.
func (m *EventMutation) SetBlockHash(s string) {
	m.block_hash = &s
}

// BlockHash returns the value of the "block_hash" field in the mutation.
func (m *EventMutation) BlockHash() (r string, exists bool) {
	v := m.block_hash
	if v == nil {
		return
	}
	return *v, true
}

// OldBlockHash returns the old "block_hash" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldBlockHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldBlockHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldBlockHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBlockHash: %w", err)
	}
	return oldValue.BlockHash, nil
}

// ResetBlockHash resets all changes to the "block_hash" field.
func (m *EventMutation) ResetBlockHash() {
	m.block_hash = nil
}

// SetIndex sets the "index" field.
func (m *EventMutation) SetIndex(u uint) {
	m.index = &u
	m.addindex = nil
}

// Index returns the value of the "index" field in the mutation.
func (m *EventMutation) Index() (r uint, exists bool) {
	v := m.index
	if v == nil {
		return
	}
	return *v, true
}

// OldIndex returns the old "index" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldIndex(ctx context.Context) (v uint, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIndex is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIndex requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIndex: %w", err)
	}
	return oldValue.Index, nil
}

// AddIndex adds u to the "index" field.
func (m *EventMutation) AddIndex(u uint) {
	if m.addindex != nil {
		*m.addindex += u
	} else {
		m.addindex = &u
	}
}

// AddedIndex returns the value that was added to the "index" field in this mutation.
func (m *EventMutation) AddedIndex() (r uint, exists bool) {
	v := m.addindex
	if v == nil {
		return
	}
	return *v, true
}

// ResetIndex resets all changes to the "index" field.
func (m *EventMutation) ResetIndex() {
	m.index = nil
	m.addindex = nil
}

// SetHash sets the "hash" field.
func (m *EventMutation) SetHash(s string) {
	m.hash = &s
}

// Hash returns the value of the "hash" field in the mutation.
func (m *EventMutation) Hash() (r string, exists bool) {
	v := m.hash
	if v == nil {
		return
	}
	return *v, true
}

// OldHash returns the old "hash" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHash: %w", err)
	}
	return oldValue.Hash, nil
}

// ResetHash resets all changes to the "hash" field.
func (m *EventMutation) ResetHash() {
	m.hash = nil
}

// AddIncreaseLiquidityIDs adds the "increase_liquidity" edge to the UniswapV3IncreaseLiqudity entity by ids.
func (m *EventMutation) AddIncreaseLiquidityIDs(ids ...int) {
	if m.increase_liquidity == nil {
		m.increase_liquidity = make(map[int]struct{})
	}
	for i := range ids {
		m.increase_liquidity[ids[i]] = struct{}{}
	}
}

// ClearIncreaseLiquidity clears the "increase_liquidity" edge to the UniswapV3IncreaseLiqudity entity.
func (m *EventMutation) ClearIncreaseLiquidity() {
	m.clearedincrease_liquidity = true
}

// IncreaseLiquidityCleared reports if the "increase_liquidity" edge to the UniswapV3IncreaseLiqudity entity was cleared.
func (m *EventMutation) IncreaseLiquidityCleared() bool {
	return m.clearedincrease_liquidity
}

// RemoveIncreaseLiquidityIDs removes the "increase_liquidity" edge to the UniswapV3IncreaseLiqudity entity by IDs.
func (m *EventMutation) RemoveIncreaseLiquidityIDs(ids ...int) {
	if m.removedincrease_liquidity == nil {
		m.removedincrease_liquidity = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.increase_liquidity, ids[i])
		m.removedincrease_liquidity[ids[i]] = struct{}{}
	}
}

// RemovedIncreaseLiquidity returns the removed IDs of the "increase_liquidity" edge to the UniswapV3IncreaseLiqudity entity.
func (m *EventMutation) RemovedIncreaseLiquidityIDs() (ids []int) {
	for id := range m.removedincrease_liquidity {
		ids = append(ids, id)
	}
	return
}

// IncreaseLiquidityIDs returns the "increase_liquidity" edge IDs in the mutation.
func (m *EventMutation) IncreaseLiquidityIDs() (ids []int) {
	for id := range m.increase_liquidity {
		ids = append(ids, id)
	}
	return
}

// ResetIncreaseLiquidity resets all changes to the "increase_liquidity" edge.
func (m *EventMutation) ResetIncreaseLiquidity() {
	m.increase_liquidity = nil
	m.clearedincrease_liquidity = false
	m.removedincrease_liquidity = nil
}

// AddDecreaseLiquidityIDs adds the "decrease_liquidity" edge to the UniswapV3DecreaseLiqudity entity by ids.
func (m *EventMutation) AddDecreaseLiquidityIDs(ids ...int) {
	if m.decrease_liquidity == nil {
		m.decrease_liquidity = make(map[int]struct{})
	}
	for i := range ids {
		m.decrease_liquidity[ids[i]] = struct{}{}
	}
}

// ClearDecreaseLiquidity clears the "decrease_liquidity" edge to the UniswapV3DecreaseLiqudity entity.
func (m *EventMutation) ClearDecreaseLiquidity() {
	m.cleareddecrease_liquidity = true
}

// DecreaseLiquidityCleared reports if the "decrease_liquidity" edge to the UniswapV3DecreaseLiqudity entity was cleared.
func (m *EventMutation) DecreaseLiquidityCleared() bool {
	return m.cleareddecrease_liquidity
}

// RemoveDecreaseLiquidityIDs removes the "decrease_liquidity" edge to the UniswapV3DecreaseLiqudity entity by IDs.
func (m *EventMutation) RemoveDecreaseLiquidityIDs(ids ...int) {
	if m.removeddecrease_liquidity == nil {
		m.removeddecrease_liquidity = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.decrease_liquidity, ids[i])
		m.removeddecrease_liquidity[ids[i]] = struct{}{}
	}
}

// RemovedDecreaseLiquidity returns the removed IDs of the "decrease_liquidity" edge to the UniswapV3DecreaseLiqudity entity.
func (m *EventMutation) RemovedDecreaseLiquidityIDs() (ids []int) {
	for id := range m.removeddecrease_liquidity {
		ids = append(ids, id)
	}
	return
}

// DecreaseLiquidityIDs returns the "decrease_liquidity" edge IDs in the mutation.
func (m *EventMutation) DecreaseLiquidityIDs() (ids []int) {
	for id := range m.decrease_liquidity {
		ids = append(ids, id)
	}
	return
}

// ResetDecreaseLiquidity resets all changes to the "decrease_liquidity" edge.
func (m *EventMutation) ResetDecreaseLiquidity() {
	m.decrease_liquidity = nil
	m.cleareddecrease_liquidity = false
	m.removeddecrease_liquidity = nil
}

// AddCollectIDs adds the "collect" edge to the UniswapV3Collect entity by ids.
func (m *EventMutation) AddCollectIDs(ids ...int) {
	if m.collect == nil {
		m.collect = make(map[int]struct{})
	}
	for i := range ids {
		m.collect[ids[i]] = struct{}{}
	}
}

// ClearCollect clears the "collect" edge to the UniswapV3Collect entity.
func (m *EventMutation) ClearCollect() {
	m.clearedcollect = true
}

// CollectCleared reports if the "collect" edge to the UniswapV3Collect entity was cleared.
func (m *EventMutation) CollectCleared() bool {
	return m.clearedcollect
}

// RemoveCollectIDs removes the "collect" edge to the UniswapV3Collect entity by IDs.
func (m *EventMutation) RemoveCollectIDs(ids ...int) {
	if m.removedcollect == nil {
		m.removedcollect = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.collect, ids[i])
		m.removedcollect[ids[i]] = struct{}{}
	}
}

// RemovedCollect returns the removed IDs of the "collect" edge to the UniswapV3Collect entity.
func (m *EventMutation) RemovedCollectIDs() (ids []int) {
	for id := range m.removedcollect {
		ids = append(ids, id)
	}
	return
}

// CollectIDs returns the "collect" edge IDs in the mutation.
func (m *EventMutation) CollectIDs() (ids []int) {
	for id := range m.collect {
		ids = append(ids, id)
	}
	return
}

// ResetCollect resets all changes to the "collect" edge.
func (m *EventMutation) ResetCollect() {
	m.collect = nil
	m.clearedcollect = false
	m.removedcollect = nil
}

// AddTransferIDs adds the "transfer" edge to the UniswapV3Transfer entity by ids.
func (m *EventMutation) AddTransferIDs(ids ...int) {
	if m.transfer == nil {
		m.transfer = make(map[int]struct{})
	}
	for i := range ids {
		m.transfer[ids[i]] = struct{}{}
	}
}

// ClearTransfer clears the "transfer" edge to the UniswapV3Transfer entity.
func (m *EventMutation) ClearTransfer() {
	m.clearedtransfer = true
}

// TransferCleared reports if the "transfer" edge to the UniswapV3Transfer entity was cleared.
func (m *EventMutation) TransferCleared() bool {
	return m.clearedtransfer
}

// RemoveTransferIDs removes the "transfer" edge to the UniswapV3Transfer entity by IDs.
func (m *EventMutation) RemoveTransferIDs(ids ...int) {
	if m.removedtransfer == nil {
		m.removedtransfer = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.transfer, ids[i])
		m.removedtransfer[ids[i]] = struct{}{}
	}
}

// RemovedTransfer returns the removed IDs of the "transfer" edge to the UniswapV3Transfer entity.
func (m *EventMutation) RemovedTransferIDs() (ids []int) {
	for id := range m.removedtransfer {
		ids = append(ids, id)
	}
	return
}

// TransferIDs returns the "transfer" edge IDs in the mutation.
func (m *EventMutation) TransferIDs() (ids []int) {
	for id := range m.transfer {
		ids = append(ids, id)
	}
	return
}

// ResetTransfer resets all changes to the "transfer" edge.
func (m *EventMutation) ResetTransfer() {
	m.transfer = nil
	m.clearedtransfer = false
	m.removedtransfer = nil
}

// Where appends a list predicates to the EventMutation builder.
func (m *EventMutation) Where(ps ...predicate.Event) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *EventMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Event).
func (m *EventMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EventMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.name != nil {
		fields = append(fields, event.FieldName)
	}
	if m.signature != nil {
		fields = append(fields, event.FieldSignature)
	}
	if m.address != nil {
		fields = append(fields, event.FieldAddress)
	}
	if m.block_number != nil {
		fields = append(fields, event.FieldBlockNumber)
	}
	if m.tx_hash != nil {
		fields = append(fields, event.FieldTxHash)
	}
	if m.tx_index != nil {
		fields = append(fields, event.FieldTxIndex)
	}
	if m.block_hash != nil {
		fields = append(fields, event.FieldBlockHash)
	}
	if m.index != nil {
		fields = append(fields, event.FieldIndex)
	}
	if m.hash != nil {
		fields = append(fields, event.FieldHash)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EventMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case event.FieldName:
		return m.Name()
	case event.FieldSignature:
		return m.Signature()
	case event.FieldAddress:
		return m.Address()
	case event.FieldBlockNumber:
		return m.BlockNumber()
	case event.FieldTxHash:
		return m.TxHash()
	case event.FieldTxIndex:
		return m.TxIndex()
	case event.FieldBlockHash:
		return m.BlockHash()
	case event.FieldIndex:
		return m.Index()
	case event.FieldHash:
		return m.Hash()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EventMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case event.FieldName:
		return m.OldName(ctx)
	case event.FieldSignature:
		return m.OldSignature(ctx)
	case event.FieldAddress:
		return m.OldAddress(ctx)
	case event.FieldBlockNumber:
		return m.OldBlockNumber(ctx)
	case event.FieldTxHash:
		return m.OldTxHash(ctx)
	case event.FieldTxIndex:
		return m.OldTxIndex(ctx)
	case event.FieldBlockHash:
		return m.OldBlockHash(ctx)
	case event.FieldIndex:
		return m.OldIndex(ctx)
	case event.FieldHash:
		return m.OldHash(ctx)
	}
	return nil, fmt.Errorf("unknown Event field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EventMutation) SetField(name string, value ent.Value) error {
	switch name {
	case event.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case event.FieldSignature:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSignature(v)
		return nil
	case event.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case event.FieldBlockNumber:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBlockNumber(v)
		return nil
	case event.FieldTxHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTxHash(v)
		return nil
	case event.FieldTxIndex:
		v, ok := value.(uint)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTxIndex(v)
		return nil
	case event.FieldBlockHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBlockHash(v)
		return nil
	case event.FieldIndex:
		v, ok := value.(uint)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIndex(v)
		return nil
	case event.FieldHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHash(v)
		return nil
	}
	return fmt.Errorf("unknown Event field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EventMutation) AddedFields() []string {
	var fields []string
	if m.addblock_number != nil {
		fields = append(fields, event.FieldBlockNumber)
	}
	if m.addtx_index != nil {
		fields = append(fields, event.FieldTxIndex)
	}
	if m.addindex != nil {
		fields = append(fields, event.FieldIndex)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EventMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case event.FieldBlockNumber:
		return m.AddedBlockNumber()
	case event.FieldTxIndex:
		return m.AddedTxIndex()
	case event.FieldIndex:
		return m.AddedIndex()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EventMutation) AddField(name string, value ent.Value) error {
	switch name {
	case event.FieldBlockNumber:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBlockNumber(v)
		return nil
	case event.FieldTxIndex:
		v, ok := value.(uint)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTxIndex(v)
		return nil
	case event.FieldIndex:
		v, ok := value.(uint)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddIndex(v)
		return nil
	}
	return fmt.Errorf("unknown Event numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EventMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EventMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EventMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Event nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EventMutation) ResetField(name string) error {
	switch name {
	case event.FieldName:
		m.ResetName()
		return nil
	case event.FieldSignature:
		m.ResetSignature()
		return nil
	case event.FieldAddress:
		m.ResetAddress()
		return nil
	case event.FieldBlockNumber:
		m.ResetBlockNumber()
		return nil
	case event.FieldTxHash:
		m.ResetTxHash()
		return nil
	case event.FieldTxIndex:
		m.ResetTxIndex()
		return nil
	case event.FieldBlockHash:
		m.ResetBlockHash()
		return nil
	case event.FieldIndex:
		m.ResetIndex()
		return nil
	case event.FieldHash:
		m.ResetHash()
		return nil
	}
	return fmt.Errorf("unknown Event field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EventMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.increase_liquidity != nil {
		edges = append(edges, event.EdgeIncreaseLiquidity)
	}
	if m.decrease_liquidity != nil {
		edges = append(edges, event.EdgeDecreaseLiquidity)
	}
	if m.collect != nil {
		edges = append(edges, event.EdgeCollect)
	}
	if m.transfer != nil {
		edges = append(edges, event.EdgeTransfer)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EventMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case event.EdgeIncreaseLiquidity:
		ids := make([]ent.Value, 0, len(m.increase_liquidity))
		for id := range m.increase_liquidity {
			ids = append(ids, id)
		}
		return ids
	case event.EdgeDecreaseLiquidity:
		ids := make([]ent.Value, 0, len(m.decrease_liquidity))
		for id := range m.decrease_liquidity {
			ids = append(ids, id)
		}
		return ids
	case event.EdgeCollect:
		ids := make([]ent.Value, 0, len(m.collect))
		for id := range m.collect {
			ids = append(ids, id)
		}
		return ids
	case event.EdgeTransfer:
		ids := make([]ent.Value, 0, len(m.transfer))
		for id := range m.transfer {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EventMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedincrease_liquidity != nil {
		edges = append(edges, event.EdgeIncreaseLiquidity)
	}
	if m.removeddecrease_liquidity != nil {
		edges = append(edges, event.EdgeDecreaseLiquidity)
	}
	if m.removedcollect != nil {
		edges = append(edges, event.EdgeCollect)
	}
	if m.removedtransfer != nil {
		edges = append(edges, event.EdgeTransfer)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EventMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case event.EdgeIncreaseLiquidity:
		ids := make([]ent.Value, 0, len(m.removedincrease_liquidity))
		for id := range m.removedincrease_liquidity {
			ids = append(ids, id)
		}
		return ids
	case event.EdgeDecreaseLiquidity:
		ids := make([]ent.Value, 0, len(m.removeddecrease_liquidity))
		for id := range m.removeddecrease_liquidity {
			ids = append(ids, id)
		}
		return ids
	case event.EdgeCollect:
		ids := make([]ent.Value, 0, len(m.removedcollect))
		for id := range m.removedcollect {
			ids = append(ids, id)
		}
		return ids
	case event.EdgeTransfer:
		ids := make([]ent.Value, 0, len(m.removedtransfer))
		for id := range m.removedtransfer {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EventMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedincrease_liquidity {
		edges = append(edges, event.EdgeIncreaseLiquidity)
	}
	if m.cleareddecrease_liquidity {
		edges = append(edges, event.EdgeDecreaseLiquidity)
	}
	if m.clearedcollect {
		edges = append(edges, event.EdgeCollect)
	}
	if m.clearedtransfer {
		edges = append(edges, event.EdgeTransfer)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EventMutation) EdgeCleared(name string) bool {
	switch name {
	case event.EdgeIncreaseLiquidity:
		return m.clearedincrease_liquidity
	case event.EdgeDecreaseLiquidity:
		return m.cleareddecrease_liquidity
	case event.EdgeCollect:
		return m.clearedcollect
	case event.EdgeTransfer:
		return m.clearedtransfer
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EventMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Event unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EventMutation) ResetEdge(name string) error {
	switch name {
	case event.EdgeIncreaseLiquidity:
		m.ResetIncreaseLiquidity()
		return nil
	case event.EdgeDecreaseLiquidity:
		m.ResetDecreaseLiquidity()
		return nil
	case event.EdgeCollect:
		m.ResetCollect()
		return nil
	case event.EdgeTransfer:
		m.ResetTransfer()
		return nil
	}
	return fmt.Errorf("unknown Event edge %s", name)
}

// PositionMutation represents an operation that mutates the Position nodes in the graph.
type PositionMutation struct {
	config
	op                       Op
	typ                      string
	id                       **schema.BigInt
	owner                    *[]byte
	pool                     *[]byte
	token0                   *[]byte
	token1                   *[]byte
	tickLower                **schema.BigInt
	tickUpper                **schema.BigInt
	liquidity                **schema.BigInt
	depositedToken0          **schema.BigInt
	depositedToken1          **schema.BigInt
	withdrawnToken0          **schema.BigInt
	withdrawnToken1          **schema.BigInt
	collectedToken0          **schema.BigInt
	collectedToken1          **schema.BigInt
	collectedFeesToken0      **schema.BigInt
	collectedFeesToken1      **schema.BigInt
	feeGrowthInside0LastX128 **schema.BigInt
	feeGrowthInside1LastX128 **schema.BigInt
	clearedFields            map[string]struct{}
	done                     bool
	oldValue                 func(context.Context) (*Position, error)
	predicates               []predicate.Position
}

var _ ent.Mutation = (*PositionMutation)(nil)

// positionOption allows management of the mutation configuration using functional options.
type positionOption func(*PositionMutation)

// newPositionMutation creates new mutation for the Position entity.
func newPositionMutation(c config, op Op, opts ...positionOption) *PositionMutation {
	m := &PositionMutation{
		config:        c,
		op:            op,
		typ:           TypePosition,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPositionID sets the ID field of the mutation.
func withPositionID(id *schema.BigInt) positionOption {
	return func(m *PositionMutation) {
		var (
			err   error
			once  sync.Once
			value *Position
		)
		m.oldValue = func(ctx context.Context) (*Position, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Position.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPosition sets the old Position of the mutation.
func withPosition(node *Position) positionOption {
	return func(m *PositionMutation) {
		m.oldValue = func(context.Context) (*Position, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PositionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PositionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Position entities.
func (m *PositionMutation) SetID(id *schema.BigInt) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PositionMutation) ID() (id *schema.BigInt, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetOwner sets the "owner" field.
func (m *PositionMutation) SetOwner(b []byte) {
	m.owner = &b
}

// Owner returns the value of the "owner" field in the mutation.
func (m *PositionMutation) Owner() (r []byte, exists bool) {
	v := m.owner
	if v == nil {
		return
	}
	return *v, true
}

// OldOwner returns the old "owner" field's value of the Position entity.
// If the Position object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PositionMutation) OldOwner(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldOwner is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldOwner requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOwner: %w", err)
	}
	return oldValue.Owner, nil
}

// ResetOwner resets all changes to the "owner" field.
func (m *PositionMutation) ResetOwner() {
	m.owner = nil
}

// SetPool sets the "pool" field.
func (m *PositionMutation) SetPool(b []byte) {
	m.pool = &b
}

// Pool returns the value of the "pool" field in the mutation.
func (m *PositionMutation) Pool() (r []byte, exists bool) {
	v := m.pool
	if v == nil {
		return
	}
	return *v, true
}

// OldPool returns the old "pool" field's value of the Position entity.
// If the Position object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PositionMutation) OldPool(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPool is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPool requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPool: %w", err)
	}
	return oldValue.Pool, nil
}

// ResetPool resets all changes to the "pool" field.
func (m *PositionMutation) ResetPool() {
	m.pool = nil
}

// SetToken0 sets the "token0" field.
func (m *PositionMutation) SetToken0(b []byte) {
	m.token0 = &b
}

// Token0 returns the value of the "token0" field in the mutation.
func (m *PositionMutation) Token0() (r []byte, exists bool) {
	v := m.token0
	if v == nil {
		return
	}
	return *v, true
}

// OldToken0 returns the old "token0" field's value of the Position entity.
// If the Position object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PositionMutation) OldToken0(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldToken0 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldToken0 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldToken0: %w", err)
	}
	return oldValue.Token0, nil
}

// ResetToken0 resets all changes to the "token0" field.
func (m *PositionMutation) ResetToken0() {
	m.token0 = nil
}

// SetToken1 sets the "token1" field.
func (m *PositionMutation) SetToken1(b []byte) {
	m.token1 = &b
}

// Token1 returns the value of the "token1" field in the mutation.
func (m *PositionMutation) Token1() (r []byte, exists bool) {
	v := m.token1
	if v == nil {
		return
	}
	return *v, true
}

// OldToken1 returns the old "token1" field's value of the Position entity.
// If the Position object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PositionMutation) OldToken1(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldToken1 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldToken1 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldToken1: %w", err)
	}
	return oldValue.Token1, nil
}

// ResetToken1 resets all changes to the "token1" field.
func (m *PositionMutation) ResetToken1() {
	m.token1 = nil
}

// SetTickLower sets the "tickLower" field.
func (m *PositionMutation) SetTickLower(si *schema.BigInt) {
	m.tickLower = &si
}

// TickLower returns the value of the "tickLower" field in the mutation.
func (m *PositionMutation) TickLower() (r *schema.BigInt, exists bool) {
	v := m.tickLower
	if v == nil {
		return
	}
	return *v, true
}

// OldTickLower returns the old "tickLower" field's value of the Position entity.
// If the Position object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PositionMutation) OldTickLower(ctx context.Context) (v *schema.BigInt, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTickLower is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTickLower requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTickLower: %w", err)
	}
	return oldValue.TickLower, nil
}

// ResetTickLower resets all changes to the "tickLower" field.
func (m *PositionMutation) ResetTickLower() {
	m.tickLower = nil
}

// SetTickUpper sets the "tickUpper" field.
func (m *PositionMutation) SetTickUpper(si *schema.BigInt) {
	m.tickUpper = &si
}

// TickUpper returns the value of the "tickUpper" field in the mutation.
func (m *PositionMutation) TickUpper() (r *schema.BigInt, exists bool) {
	v := m.tickUpper
	if v == nil {
		return
	}
	return *v, true
}

// OldTickUpper returns the old "tickUpper" field's value of the Position entity.
// If the Position object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PositionMutation) OldTickUpper(ctx context.Context) (v *schema.BigInt, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTickUpper is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTickUpper requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTickUpper: %w", err)
	}
	return oldValue.TickUpper, nil
}

// ResetTickUpper resets all changes to the "tickUpper" field.
func (m *PositionMutation) ResetTickUpper() {
	m.tickUpper = nil
}

// SetLiquidity sets the "liquidity" field.
func (m *PositionMutation) SetLiquidity(si *schema.BigInt) {
	m.liquidity = &si
}

// Liquidity returns the value of the "liquidity" field in the mutation.
func (m *PositionMutation) Liquidity() (r *schema.BigInt, exists bool) {
	v := m.liquidity
	if v == nil {
		return
	}
	return *v, true
}

// OldLiquidity returns the old "liquidity" field's value of the Position entity.
// If the Position object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PositionMutation) OldLiquidity(ctx context.Context) (v *schema.BigInt, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLiquidity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLiquidity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLiquidity: %w", err)
	}
	return oldValue.Liquidity, nil
}

// ResetLiquidity resets all changes to the "liquidity" field.
func (m *PositionMutation) ResetLiquidity() {
	m.liquidity = nil
}

// SetDepositedToken0 sets the "depositedToken0" field.
func (m *PositionMutation) SetDepositedToken0(si *schema.BigInt) {
	m.depositedToken0 = &si
}

// DepositedToken0 returns the value of the "depositedToken0" field in the mutation.
func (m *PositionMutation) DepositedToken0() (r *schema.BigInt, exists bool) {
	v := m.depositedToken0
	if v == nil {
		return
	}
	return *v, true
}

// OldDepositedToken0 returns the old "depositedToken0" field's value of the Position entity.
// If the Position object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PositionMutation) OldDepositedToken0(ctx context.Context) (v *schema.BigInt, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDepositedToken0 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDepositedToken0 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDepositedToken0: %w", err)
	}
	return oldValue.DepositedToken0, nil
}

// ResetDepositedToken0 resets all changes to the "depositedToken0" field.
func (m *PositionMutation) ResetDepositedToken0() {
	m.depositedToken0 = nil
}

// SetDepositedToken1 sets the "depositedToken1" field.
func (m *PositionMutation) SetDepositedToken1(si *schema.BigInt) {
	m.depositedToken1 = &si
}

// DepositedToken1 returns the value of the "depositedToken1" field in the mutation.
func (m *PositionMutation) DepositedToken1() (r *schema.BigInt, exists bool) {
	v := m.depositedToken1
	if v == nil {
		return
	}
	return *v, true
}

// OldDepositedToken1 returns the old "depositedToken1" field's value of the Position entity.
// If the Position object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PositionMutation) OldDepositedToken1(ctx context.Context) (v *schema.BigInt, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDepositedToken1 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDepositedToken1 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDepositedToken1: %w", err)
	}
	return oldValue.DepositedToken1, nil
}

// ResetDepositedToken1 resets all changes to the "depositedToken1" field.
func (m *PositionMutation) ResetDepositedToken1() {
	m.depositedToken1 = nil
}

// SetWithdrawnToken0 sets the "withdrawnToken0" field.
func (m *PositionMutation) SetWithdrawnToken0(si *schema.BigInt) {
	m.withdrawnToken0 = &si
}

// WithdrawnToken0 returns the value of the "withdrawnToken0" field in the mutation.
func (m *PositionMutation) WithdrawnToken0() (r *schema.BigInt, exists bool) {
	v := m.withdrawnToken0
	if v == nil {
		return
	}
	return *v, true
}

// OldWithdrawnToken0 returns the old "withdrawnToken0" field's value of the Position entity.
// If the Position object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PositionMutation) OldWithdrawnToken0(ctx context.Context) (v *schema.BigInt, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldWithdrawnToken0 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldWithdrawnToken0 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWithdrawnToken0: %w", err)
	}
	return oldValue.WithdrawnToken0, nil
}

// ResetWithdrawnToken0 resets all changes to the "withdrawnToken0" field.
func (m *PositionMutation) ResetWithdrawnToken0() {
	m.withdrawnToken0 = nil
}

// SetWithdrawnToken1 sets the "withdrawnToken1" field.
func (m *PositionMutation) SetWithdrawnToken1(si *schema.BigInt) {
	m.withdrawnToken1 = &si
}

// WithdrawnToken1 returns the value of the "withdrawnToken1" field in the mutation.
func (m *PositionMutation) WithdrawnToken1() (r *schema.BigInt, exists bool) {
	v := m.withdrawnToken1
	if v == nil {
		return
	}
	return *v, true
}

// OldWithdrawnToken1 returns the old "withdrawnToken1" field's value of the Position entity.
// If the Position object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PositionMutation) OldWithdrawnToken1(ctx context.Context) (v *schema.BigInt, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldWithdrawnToken1 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldWithdrawnToken1 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWithdrawnToken1: %w", err)
	}
	return oldValue.WithdrawnToken1, nil
}

// ResetWithdrawnToken1 resets all changes to the "withdrawnToken1" field.
func (m *PositionMutation) ResetWithdrawnToken1() {
	m.withdrawnToken1 = nil
}

// SetCollectedToken0 sets the "collectedToken0" field.
func (m *PositionMutation) SetCollectedToken0(si *schema.BigInt) {
	m.collectedToken0 = &si
}

// CollectedToken0 returns the value of the "collectedToken0" field in the mutation.
func (m *PositionMutation) CollectedToken0() (r *schema.BigInt, exists bool) {
	v := m.collectedToken0
	if v == nil {
		return
	}
	return *v, true
}

// OldCollectedToken0 returns the old "collectedToken0" field's value of the Position entity.
// If the Position object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PositionMutation) OldCollectedToken0(ctx context.Context) (v *schema.BigInt, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCollectedToken0 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCollectedToken0 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCollectedToken0: %w", err)
	}
	return oldValue.CollectedToken0, nil
}

// ResetCollectedToken0 resets all changes to the "collectedToken0" field.
func (m *PositionMutation) ResetCollectedToken0() {
	m.collectedToken0 = nil
}

// SetCollectedToken1 sets the "collectedToken1" field.
func (m *PositionMutation) SetCollectedToken1(si *schema.BigInt) {
	m.collectedToken1 = &si
}

// CollectedToken1 returns the value of the "collectedToken1" field in the mutation.
func (m *PositionMutation) CollectedToken1() (r *schema.BigInt, exists bool) {
	v := m.collectedToken1
	if v == nil {
		return
	}
	return *v, true
}

// OldCollectedToken1 returns the old "collectedToken1" field's value of the Position entity.
// If the Position object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PositionMutation) OldCollectedToken1(ctx context.Context) (v *schema.BigInt, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCollectedToken1 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCollectedToken1 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCollectedToken1: %w", err)
	}
	return oldValue.CollectedToken1, nil
}

// ResetCollectedToken1 resets all changes to the "collectedToken1" field.
func (m *PositionMutation) ResetCollectedToken1() {
	m.collectedToken1 = nil
}

// SetCollectedFeesToken0 sets the "collectedFeesToken0" field.
func (m *PositionMutation) SetCollectedFeesToken0(si *schema.BigInt) {
	m.collectedFeesToken0 = &si
}

// CollectedFeesToken0 returns the value of the "collectedFeesToken0" field in the mutation.
func (m *PositionMutation) CollectedFeesToken0() (r *schema.BigInt, exists bool) {
	v := m.collectedFeesToken0
	if v == nil {
		return
	}
	return *v, true
}

// OldCollectedFeesToken0 returns the old "collectedFeesToken0" field's value of the Position entity.
// If the Position object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PositionMutation) OldCollectedFeesToken0(ctx context.Context) (v *schema.BigInt, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCollectedFeesToken0 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCollectedFeesToken0 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCollectedFeesToken0: %w", err)
	}
	return oldValue.CollectedFeesToken0, nil
}

// ResetCollectedFeesToken0 resets all changes to the "collectedFeesToken0" field.
func (m *PositionMutation) ResetCollectedFeesToken0() {
	m.collectedFeesToken0 = nil
}

// SetCollectedFeesToken1 sets the "collectedFeesToken1" field.
func (m *PositionMutation) SetCollectedFeesToken1(si *schema.BigInt) {
	m.collectedFeesToken1 = &si
}

// CollectedFeesToken1 returns the value of the "collectedFeesToken1" field in the mutation.
func (m *PositionMutation) CollectedFeesToken1() (r *schema.BigInt, exists bool) {
	v := m.collectedFeesToken1
	if v == nil {
		return
	}
	return *v, true
}

// OldCollectedFeesToken1 returns the old "collectedFeesToken1" field's value of the Position entity.
// If the Position object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PositionMutation) OldCollectedFeesToken1(ctx context.Context) (v *schema.BigInt, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCollectedFeesToken1 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCollectedFeesToken1 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCollectedFeesToken1: %w", err)
	}
	return oldValue.CollectedFeesToken1, nil
}

// ResetCollectedFeesToken1 resets all changes to the "collectedFeesToken1" field.
func (m *PositionMutation) ResetCollectedFeesToken1() {
	m.collectedFeesToken1 = nil
}

// SetFeeGrowthInside0LastX128 sets the "feeGrowthInside0LastX128" field.
func (m *PositionMutation) SetFeeGrowthInside0LastX128(si *schema.BigInt) {
	m.feeGrowthInside0LastX128 = &si
}

// FeeGrowthInside0LastX128 returns the value of the "feeGrowthInside0LastX128" field in the mutation.
func (m *PositionMutation) FeeGrowthInside0LastX128() (r *schema.BigInt, exists bool) {
	v := m.feeGrowthInside0LastX128
	if v == nil {
		return
	}
	return *v, true
}

// OldFeeGrowthInside0LastX128 returns the old "feeGrowthInside0LastX128" field's value of the Position entity.
// If the Position object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PositionMutation) OldFeeGrowthInside0LastX128(ctx context.Context) (v *schema.BigInt, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldFeeGrowthInside0LastX128 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldFeeGrowthInside0LastX128 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFeeGrowthInside0LastX128: %w", err)
	}
	return oldValue.FeeGrowthInside0LastX128, nil
}

// ResetFeeGrowthInside0LastX128 resets all changes to the "feeGrowthInside0LastX128" field.
func (m *PositionMutation) ResetFeeGrowthInside0LastX128() {
	m.feeGrowthInside0LastX128 = nil
}

// SetFeeGrowthInside1LastX128 sets the "feeGrowthInside1LastX128" field.
func (m *PositionMutation) SetFeeGrowthInside1LastX128(si *schema.BigInt) {
	m.feeGrowthInside1LastX128 = &si
}

// FeeGrowthInside1LastX128 returns the value of the "feeGrowthInside1LastX128" field in the mutation.
func (m *PositionMutation) FeeGrowthInside1LastX128() (r *schema.BigInt, exists bool) {
	v := m.feeGrowthInside1LastX128
	if v == nil {
		return
	}
	return *v, true
}

// OldFeeGrowthInside1LastX128 returns the old "feeGrowthInside1LastX128" field's value of the Position entity.
// If the Position object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PositionMutation) OldFeeGrowthInside1LastX128(ctx context.Context) (v *schema.BigInt, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldFeeGrowthInside1LastX128 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldFeeGrowthInside1LastX128 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFeeGrowthInside1LastX128: %w", err)
	}
	return oldValue.FeeGrowthInside1LastX128, nil
}

// ResetFeeGrowthInside1LastX128 resets all changes to the "feeGrowthInside1LastX128" field.
func (m *PositionMutation) ResetFeeGrowthInside1LastX128() {
	m.feeGrowthInside1LastX128 = nil
}

// Where appends a list predicates to the PositionMutation builder.
func (m *PositionMutation) Where(ps ...predicate.Position) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *PositionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Position).
func (m *PositionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PositionMutation) Fields() []string {
	fields := make([]string, 0, 17)
	if m.owner != nil {
		fields = append(fields, position.FieldOwner)
	}
	if m.pool != nil {
		fields = append(fields, position.FieldPool)
	}
	if m.token0 != nil {
		fields = append(fields, position.FieldToken0)
	}
	if m.token1 != nil {
		fields = append(fields, position.FieldToken1)
	}
	if m.tickLower != nil {
		fields = append(fields, position.FieldTickLower)
	}
	if m.tickUpper != nil {
		fields = append(fields, position.FieldTickUpper)
	}
	if m.liquidity != nil {
		fields = append(fields, position.FieldLiquidity)
	}
	if m.depositedToken0 != nil {
		fields = append(fields, position.FieldDepositedToken0)
	}
	if m.depositedToken1 != nil {
		fields = append(fields, position.FieldDepositedToken1)
	}
	if m.withdrawnToken0 != nil {
		fields = append(fields, position.FieldWithdrawnToken0)
	}
	if m.withdrawnToken1 != nil {
		fields = append(fields, position.FieldWithdrawnToken1)
	}
	if m.collectedToken0 != nil {
		fields = append(fields, position.FieldCollectedToken0)
	}
	if m.collectedToken1 != nil {
		fields = append(fields, position.FieldCollectedToken1)
	}
	if m.collectedFeesToken0 != nil {
		fields = append(fields, position.FieldCollectedFeesToken0)
	}
	if m.collectedFeesToken1 != nil {
		fields = append(fields, position.FieldCollectedFeesToken1)
	}
	if m.feeGrowthInside0LastX128 != nil {
		fields = append(fields, position.FieldFeeGrowthInside0LastX128)
	}
	if m.feeGrowthInside1LastX128 != nil {
		fields = append(fields, position.FieldFeeGrowthInside1LastX128)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PositionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case position.FieldOwner:
		return m.Owner()
	case position.FieldPool:
		return m.Pool()
	case position.FieldToken0:
		return m.Token0()
	case position.FieldToken1:
		return m.Token1()
	case position.FieldTickLower:
		return m.TickLower()
	case position.FieldTickUpper:
		return m.TickUpper()
	case position.FieldLiquidity:
		return m.Liquidity()
	case position.FieldDepositedToken0:
		return m.DepositedToken0()
	case position.FieldDepositedToken1:
		return m.DepositedToken1()
	case position.FieldWithdrawnToken0:
		return m.WithdrawnToken0()
	case position.FieldWithdrawnToken1:
		return m.WithdrawnToken1()
	case position.FieldCollectedToken0:
		return m.CollectedToken0()
	case position.FieldCollectedToken1:
		return m.CollectedToken1()
	case position.FieldCollectedFeesToken0:
		return m.CollectedFeesToken0()
	case position.FieldCollectedFeesToken1:
		return m.CollectedFeesToken1()
	case position.FieldFeeGrowthInside0LastX128:
		return m.FeeGrowthInside0LastX128()
	case position.FieldFeeGrowthInside1LastX128:
		return m.FeeGrowthInside1LastX128()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PositionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case position.FieldOwner:
		return m.OldOwner(ctx)
	case position.FieldPool:
		return m.OldPool(ctx)
	case position.FieldToken0:
		return m.OldToken0(ctx)
	case position.FieldToken1:
		return m.OldToken1(ctx)
	case position.FieldTickLower:
		return m.OldTickLower(ctx)
	case position.FieldTickUpper:
		return m.OldTickUpper(ctx)
	case position.FieldLiquidity:
		return m.OldLiquidity(ctx)
	case position.FieldDepositedToken0:
		return m.OldDepositedToken0(ctx)
	case position.FieldDepositedToken1:
		return m.OldDepositedToken1(ctx)
	case position.FieldWithdrawnToken0:
		return m.OldWithdrawnToken0(ctx)
	case position.FieldWithdrawnToken1:
		return m.OldWithdrawnToken1(ctx)
	case position.FieldCollectedToken0:
		return m.OldCollectedToken0(ctx)
	case position.FieldCollectedToken1:
		return m.OldCollectedToken1(ctx)
	case position.FieldCollectedFeesToken0:
		return m.OldCollectedFeesToken0(ctx)
	case position.FieldCollectedFeesToken1:
		return m.OldCollectedFeesToken1(ctx)
	case position.FieldFeeGrowthInside0LastX128:
		return m.OldFeeGrowthInside0LastX128(ctx)
	case position.FieldFeeGrowthInside1LastX128:
		return m.OldFeeGrowthInside1LastX128(ctx)
	}
	return nil, fmt.Errorf("unknown Position field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PositionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case position.FieldOwner:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOwner(v)
		return nil
	case position.FieldPool:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPool(v)
		return nil
	case position.FieldToken0:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetToken0(v)
		return nil
	case position.FieldToken1:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetToken1(v)
		return nil
	case position.FieldTickLower:
		v, ok := value.(*schema.BigInt)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTickLower(v)
		return nil
	case position.FieldTickUpper:
		v, ok := value.(*schema.BigInt)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTickUpper(v)
		return nil
	case position.FieldLiquidity:
		v, ok := value.(*schema.BigInt)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLiquidity(v)
		return nil
	case position.FieldDepositedToken0:
		v, ok := value.(*schema.BigInt)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDepositedToken0(v)
		return nil
	case position.FieldDepositedToken1:
		v, ok := value.(*schema.BigInt)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDepositedToken1(v)
		return nil
	case position.FieldWithdrawnToken0:
		v, ok := value.(*schema.BigInt)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWithdrawnToken0(v)
		return nil
	case position.FieldWithdrawnToken1:
		v, ok := value.(*schema.BigInt)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWithdrawnToken1(v)
		return nil
	case position.FieldCollectedToken0:
		v, ok := value.(*schema.BigInt)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCollectedToken0(v)
		return nil
	case position.FieldCollectedToken1:
		v, ok := value.(*schema.BigInt)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCollectedToken1(v)
		return nil
	case position.FieldCollectedFeesToken0:
		v, ok := value.(*schema.BigInt)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCollectedFeesToken0(v)
		return nil
	case position.FieldCollectedFeesToken1:
		v, ok := value.(*schema.BigInt)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCollectedFeesToken1(v)
		return nil
	case position.FieldFeeGrowthInside0LastX128:
		v, ok := value.(*schema.BigInt)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFeeGrowthInside0LastX128(v)
		return nil
	case position.FieldFeeGrowthInside1LastX128:
		v, ok := value.(*schema.BigInt)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFeeGrowthInside1LastX128(v)
		return nil
	}
	return fmt.Errorf("unknown Position field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PositionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PositionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PositionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Position numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PositionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PositionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PositionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Position nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PositionMutation) ResetField(name string) error {
	switch name {
	case position.FieldOwner:
		m.ResetOwner()
		return nil
	case position.FieldPool:
		m.ResetPool()
		return nil
	case position.FieldToken0:
		m.ResetToken0()
		return nil
	case position.FieldToken1:
		m.ResetToken1()
		return nil
	case position.FieldTickLower:
		m.ResetTickLower()
		return nil
	case position.FieldTickUpper:
		m.ResetTickUpper()
		return nil
	case position.FieldLiquidity:
		m.ResetLiquidity()
		return nil
	case position.FieldDepositedToken0:
		m.ResetDepositedToken0()
		return nil
	case position.FieldDepositedToken1:
		m.ResetDepositedToken1()
		return nil
	case position.FieldWithdrawnToken0:
		m.ResetWithdrawnToken0()
		return nil
	case position.FieldWithdrawnToken1:
		m.ResetWithdrawnToken1()
		return nil
	case position.FieldCollectedToken0:
		m.ResetCollectedToken0()
		return nil
	case position.FieldCollectedToken1:
		m.ResetCollectedToken1()
		return nil
	case position.FieldCollectedFeesToken0:
		m.ResetCollectedFeesToken0()
		return nil
	case position.FieldCollectedFeesToken1:
		m.ResetCollectedFeesToken1()
		return nil
	case position.FieldFeeGrowthInside0LastX128:
		m.ResetFeeGrowthInside0LastX128()
		return nil
	case position.FieldFeeGrowthInside1LastX128:
		m.ResetFeeGrowthInside1LastX128()
		return nil
	}
	return fmt.Errorf("unknown Position field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PositionMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PositionMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PositionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PositionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PositionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PositionMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PositionMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Position unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PositionMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Position edge %s", name)
}

// UniswapV3CollectMutation represents an operation that mutates the UniswapV3Collect nodes in the graph.
type UniswapV3CollectMutation struct {
	config
	op            Op
	typ           string
	id            *int
	token_id      **schema.BigInt
	recipient     *string
	amount0       **schema.BigInt
	amount1       **schema.BigInt
	clearedFields map[string]struct{}
	event         *int
	clearedevent  bool
	done          bool
	oldValue      func(context.Context) (*UniswapV3Collect, error)
	predicates    []predicate.UniswapV3Collect
}

var _ ent.Mutation = (*UniswapV3CollectMutation)(nil)

// uniswapv3collectOption allows management of the mutation configuration using functional options.
type uniswapv3collectOption func(*UniswapV3CollectMutation)

// newUniswapV3CollectMutation creates new mutation for the UniswapV3Collect entity.
func newUniswapV3CollectMutation(c config, op Op, opts ...uniswapv3collectOption) *UniswapV3CollectMutation {
	m := &UniswapV3CollectMutation{
		config:        c,
		op:            op,
		typ:           TypeUniswapV3Collect,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUniswapV3CollectID sets the ID field of the mutation.
func withUniswapV3CollectID(id int) uniswapv3collectOption {
	return func(m *UniswapV3CollectMutation) {
		var (
			err   error
			once  sync.Once
			value *UniswapV3Collect
		)
		m.oldValue = func(ctx context.Context) (*UniswapV3Collect, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UniswapV3Collect.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUniswapV3Collect sets the old UniswapV3Collect of the mutation.
func withUniswapV3Collect(node *UniswapV3Collect) uniswapv3collectOption {
	return func(m *UniswapV3CollectMutation) {
		m.oldValue = func(context.Context) (*UniswapV3Collect, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UniswapV3CollectMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UniswapV3CollectMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UniswapV3CollectMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetTokenID sets the "token_id" field.
func (m *UniswapV3CollectMutation) SetTokenID(si *schema.BigInt) {
	m.token_id = &si
}

// TokenID returns the value of the "token_id" field in the mutation.
func (m *UniswapV3CollectMutation) TokenID() (r *schema.BigInt, exists bool) {
	v := m.token_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTokenID returns the old "token_id" field's value of the UniswapV3Collect entity.
// If the UniswapV3Collect object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniswapV3CollectMutation) OldTokenID(ctx context.Context) (v *schema.BigInt, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTokenID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTokenID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTokenID: %w", err)
	}
	return oldValue.TokenID, nil
}

// ResetTokenID resets all changes to the "token_id" field.
func (m *UniswapV3CollectMutation) ResetTokenID() {
	m.token_id = nil
}

// SetRecipient sets the "recipient" field.
func (m *UniswapV3CollectMutation) SetRecipient(s string) {
	m.recipient = &s
}

// Recipient returns the value of the "recipient" field in the mutation.
func (m *UniswapV3CollectMutation) Recipient() (r string, exists bool) {
	v := m.recipient
	if v == nil {
		return
	}
	return *v, true
}

// OldRecipient returns the old "recipient" field's value of the UniswapV3Collect entity.
// If the UniswapV3Collect object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniswapV3CollectMutation) OldRecipient(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRecipient is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRecipient requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRecipient: %w", err)
	}
	return oldValue.Recipient, nil
}

// ResetRecipient resets all changes to the "recipient" field.
func (m *UniswapV3CollectMutation) ResetRecipient() {
	m.recipient = nil
}

// SetAmount0 sets the "amount0" field.
func (m *UniswapV3CollectMutation) SetAmount0(si *schema.BigInt) {
	m.amount0 = &si
}

// Amount0 returns the value of the "amount0" field in the mutation.
func (m *UniswapV3CollectMutation) Amount0() (r *schema.BigInt, exists bool) {
	v := m.amount0
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount0 returns the old "amount0" field's value of the UniswapV3Collect entity.
// If the UniswapV3Collect object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniswapV3CollectMutation) OldAmount0(ctx context.Context) (v *schema.BigInt, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAmount0 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAmount0 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount0: %w", err)
	}
	return oldValue.Amount0, nil
}

// ResetAmount0 resets all changes to the "amount0" field.
func (m *UniswapV3CollectMutation) ResetAmount0() {
	m.amount0 = nil
}

// SetAmount1 sets the "amount1" field.
func (m *UniswapV3CollectMutation) SetAmount1(si *schema.BigInt) {
	m.amount1 = &si
}

// Amount1 returns the value of the "amount1" field in the mutation.
func (m *UniswapV3CollectMutation) Amount1() (r *schema.BigInt, exists bool) {
	v := m.amount1
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount1 returns the old "amount1" field's value of the UniswapV3Collect entity.
// If the UniswapV3Collect object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniswapV3CollectMutation) OldAmount1(ctx context.Context) (v *schema.BigInt, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAmount1 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAmount1 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount1: %w", err)
	}
	return oldValue.Amount1, nil
}

// ResetAmount1 resets all changes to the "amount1" field.
func (m *UniswapV3CollectMutation) ResetAmount1() {
	m.amount1 = nil
}

// SetEventID sets the "event" edge to the Event entity by id.
func (m *UniswapV3CollectMutation) SetEventID(id int) {
	m.event = &id
}

// ClearEvent clears the "event" edge to the Event entity.
func (m *UniswapV3CollectMutation) ClearEvent() {
	m.clearedevent = true
}

// EventCleared reports if the "event" edge to the Event entity was cleared.
func (m *UniswapV3CollectMutation) EventCleared() bool {
	return m.clearedevent
}

// EventID returns the "event" edge ID in the mutation.
func (m *UniswapV3CollectMutation) EventID() (id int, exists bool) {
	if m.event != nil {
		return *m.event, true
	}
	return
}

// EventIDs returns the "event" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EventID instead. It exists only for internal usage by the builders.
func (m *UniswapV3CollectMutation) EventIDs() (ids []int) {
	if id := m.event; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEvent resets all changes to the "event" edge.
func (m *UniswapV3CollectMutation) ResetEvent() {
	m.event = nil
	m.clearedevent = false
}

// Where appends a list predicates to the UniswapV3CollectMutation builder.
func (m *UniswapV3CollectMutation) Where(ps ...predicate.UniswapV3Collect) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UniswapV3CollectMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (UniswapV3Collect).
func (m *UniswapV3CollectMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UniswapV3CollectMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.token_id != nil {
		fields = append(fields, uniswapv3collect.FieldTokenID)
	}
	if m.recipient != nil {
		fields = append(fields, uniswapv3collect.FieldRecipient)
	}
	if m.amount0 != nil {
		fields = append(fields, uniswapv3collect.FieldAmount0)
	}
	if m.amount1 != nil {
		fields = append(fields, uniswapv3collect.FieldAmount1)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UniswapV3CollectMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case uniswapv3collect.FieldTokenID:
		return m.TokenID()
	case uniswapv3collect.FieldRecipient:
		return m.Recipient()
	case uniswapv3collect.FieldAmount0:
		return m.Amount0()
	case uniswapv3collect.FieldAmount1:
		return m.Amount1()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UniswapV3CollectMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case uniswapv3collect.FieldTokenID:
		return m.OldTokenID(ctx)
	case uniswapv3collect.FieldRecipient:
		return m.OldRecipient(ctx)
	case uniswapv3collect.FieldAmount0:
		return m.OldAmount0(ctx)
	case uniswapv3collect.FieldAmount1:
		return m.OldAmount1(ctx)
	}
	return nil, fmt.Errorf("unknown UniswapV3Collect field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UniswapV3CollectMutation) SetField(name string, value ent.Value) error {
	switch name {
	case uniswapv3collect.FieldTokenID:
		v, ok := value.(*schema.BigInt)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTokenID(v)
		return nil
	case uniswapv3collect.FieldRecipient:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRecipient(v)
		return nil
	case uniswapv3collect.FieldAmount0:
		v, ok := value.(*schema.BigInt)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount0(v)
		return nil
	case uniswapv3collect.FieldAmount1:
		v, ok := value.(*schema.BigInt)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount1(v)
		return nil
	}
	return fmt.Errorf("unknown UniswapV3Collect field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UniswapV3CollectMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UniswapV3CollectMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UniswapV3CollectMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown UniswapV3Collect numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UniswapV3CollectMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UniswapV3CollectMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UniswapV3CollectMutation) ClearField(name string) error {
	return fmt.Errorf("unknown UniswapV3Collect nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UniswapV3CollectMutation) ResetField(name string) error {
	switch name {
	case uniswapv3collect.FieldTokenID:
		m.ResetTokenID()
		return nil
	case uniswapv3collect.FieldRecipient:
		m.ResetRecipient()
		return nil
	case uniswapv3collect.FieldAmount0:
		m.ResetAmount0()
		return nil
	case uniswapv3collect.FieldAmount1:
		m.ResetAmount1()
		return nil
	}
	return fmt.Errorf("unknown UniswapV3Collect field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UniswapV3CollectMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.event != nil {
		edges = append(edges, uniswapv3collect.EdgeEvent)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UniswapV3CollectMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case uniswapv3collect.EdgeEvent:
		if id := m.event; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UniswapV3CollectMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UniswapV3CollectMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UniswapV3CollectMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedevent {
		edges = append(edges, uniswapv3collect.EdgeEvent)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UniswapV3CollectMutation) EdgeCleared(name string) bool {
	switch name {
	case uniswapv3collect.EdgeEvent:
		return m.clearedevent
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UniswapV3CollectMutation) ClearEdge(name string) error {
	switch name {
	case uniswapv3collect.EdgeEvent:
		m.ClearEvent()
		return nil
	}
	return fmt.Errorf("unknown UniswapV3Collect unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UniswapV3CollectMutation) ResetEdge(name string) error {
	switch name {
	case uniswapv3collect.EdgeEvent:
		m.ResetEvent()
		return nil
	}
	return fmt.Errorf("unknown UniswapV3Collect edge %s", name)
}

// UniswapV3DecreaseLiqudityMutation represents an operation that mutates the UniswapV3DecreaseLiqudity nodes in the graph.
type UniswapV3DecreaseLiqudityMutation struct {
	config
	op            Op
	typ           string
	id            *int
	token_id      **schema.BigInt
	liquidity     **schema.BigInt
	amount0       **schema.BigInt
	amount1       **schema.BigInt
	clearedFields map[string]struct{}
	event         *int
	clearedevent  bool
	done          bool
	oldValue      func(context.Context) (*UniswapV3DecreaseLiqudity, error)
	predicates    []predicate.UniswapV3DecreaseLiqudity
}

var _ ent.Mutation = (*UniswapV3DecreaseLiqudityMutation)(nil)

// uniswapv3decreaseliqudityOption allows management of the mutation configuration using functional options.
type uniswapv3decreaseliqudityOption func(*UniswapV3DecreaseLiqudityMutation)

// newUniswapV3DecreaseLiqudityMutation creates new mutation for the UniswapV3DecreaseLiqudity entity.
func newUniswapV3DecreaseLiqudityMutation(c config, op Op, opts ...uniswapv3decreaseliqudityOption) *UniswapV3DecreaseLiqudityMutation {
	m := &UniswapV3DecreaseLiqudityMutation{
		config:        c,
		op:            op,
		typ:           TypeUniswapV3DecreaseLiqudity,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUniswapV3DecreaseLiqudityID sets the ID field of the mutation.
func withUniswapV3DecreaseLiqudityID(id int) uniswapv3decreaseliqudityOption {
	return func(m *UniswapV3DecreaseLiqudityMutation) {
		var (
			err   error
			once  sync.Once
			value *UniswapV3DecreaseLiqudity
		)
		m.oldValue = func(ctx context.Context) (*UniswapV3DecreaseLiqudity, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UniswapV3DecreaseLiqudity.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUniswapV3DecreaseLiqudity sets the old UniswapV3DecreaseLiqudity of the mutation.
func withUniswapV3DecreaseLiqudity(node *UniswapV3DecreaseLiqudity) uniswapv3decreaseliqudityOption {
	return func(m *UniswapV3DecreaseLiqudityMutation) {
		m.oldValue = func(context.Context) (*UniswapV3DecreaseLiqudity, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UniswapV3DecreaseLiqudityMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UniswapV3DecreaseLiqudityMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UniswapV3DecreaseLiqudityMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetTokenID sets the "token_id" field.
func (m *UniswapV3DecreaseLiqudityMutation) SetTokenID(si *schema.BigInt) {
	m.token_id = &si
}

// TokenID returns the value of the "token_id" field in the mutation.
func (m *UniswapV3DecreaseLiqudityMutation) TokenID() (r *schema.BigInt, exists bool) {
	v := m.token_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTokenID returns the old "token_id" field's value of the UniswapV3DecreaseLiqudity entity.
// If the UniswapV3DecreaseLiqudity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniswapV3DecreaseLiqudityMutation) OldTokenID(ctx context.Context) (v *schema.BigInt, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTokenID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTokenID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTokenID: %w", err)
	}
	return oldValue.TokenID, nil
}

// ResetTokenID resets all changes to the "token_id" field.
func (m *UniswapV3DecreaseLiqudityMutation) ResetTokenID() {
	m.token_id = nil
}

// SetLiquidity sets the "liquidity" field.
func (m *UniswapV3DecreaseLiqudityMutation) SetLiquidity(si *schema.BigInt) {
	m.liquidity = &si
}

// Liquidity returns the value of the "liquidity" field in the mutation.
func (m *UniswapV3DecreaseLiqudityMutation) Liquidity() (r *schema.BigInt, exists bool) {
	v := m.liquidity
	if v == nil {
		return
	}
	return *v, true
}

// OldLiquidity returns the old "liquidity" field's value of the UniswapV3DecreaseLiqudity entity.
// If the UniswapV3DecreaseLiqudity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniswapV3DecreaseLiqudityMutation) OldLiquidity(ctx context.Context) (v *schema.BigInt, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLiquidity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLiquidity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLiquidity: %w", err)
	}
	return oldValue.Liquidity, nil
}

// ResetLiquidity resets all changes to the "liquidity" field.
func (m *UniswapV3DecreaseLiqudityMutation) ResetLiquidity() {
	m.liquidity = nil
}

// SetAmount0 sets the "amount0" field.
func (m *UniswapV3DecreaseLiqudityMutation) SetAmount0(si *schema.BigInt) {
	m.amount0 = &si
}

// Amount0 returns the value of the "amount0" field in the mutation.
func (m *UniswapV3DecreaseLiqudityMutation) Amount0() (r *schema.BigInt, exists bool) {
	v := m.amount0
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount0 returns the old "amount0" field's value of the UniswapV3DecreaseLiqudity entity.
// If the UniswapV3DecreaseLiqudity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniswapV3DecreaseLiqudityMutation) OldAmount0(ctx context.Context) (v *schema.BigInt, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAmount0 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAmount0 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount0: %w", err)
	}
	return oldValue.Amount0, nil
}

// ResetAmount0 resets all changes to the "amount0" field.
func (m *UniswapV3DecreaseLiqudityMutation) ResetAmount0() {
	m.amount0 = nil
}

// SetAmount1 sets the "amount1" field.
func (m *UniswapV3DecreaseLiqudityMutation) SetAmount1(si *schema.BigInt) {
	m.amount1 = &si
}

// Amount1 returns the value of the "amount1" field in the mutation.
func (m *UniswapV3DecreaseLiqudityMutation) Amount1() (r *schema.BigInt, exists bool) {
	v := m.amount1
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount1 returns the old "amount1" field's value of the UniswapV3DecreaseLiqudity entity.
// If the UniswapV3DecreaseLiqudity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniswapV3DecreaseLiqudityMutation) OldAmount1(ctx context.Context) (v *schema.BigInt, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAmount1 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAmount1 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount1: %w", err)
	}
	return oldValue.Amount1, nil
}

// ResetAmount1 resets all changes to the "amount1" field.
func (m *UniswapV3DecreaseLiqudityMutation) ResetAmount1() {
	m.amount1 = nil
}

// SetEventID sets the "event" edge to the Event entity by id.
func (m *UniswapV3DecreaseLiqudityMutation) SetEventID(id int) {
	m.event = &id
}

// ClearEvent clears the "event" edge to the Event entity.
func (m *UniswapV3DecreaseLiqudityMutation) ClearEvent() {
	m.clearedevent = true
}

// EventCleared reports if the "event" edge to the Event entity was cleared.
func (m *UniswapV3DecreaseLiqudityMutation) EventCleared() bool {
	return m.clearedevent
}

// EventID returns the "event" edge ID in the mutation.
func (m *UniswapV3DecreaseLiqudityMutation) EventID() (id int, exists bool) {
	if m.event != nil {
		return *m.event, true
	}
	return
}

// EventIDs returns the "event" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EventID instead. It exists only for internal usage by the builders.
func (m *UniswapV3DecreaseLiqudityMutation) EventIDs() (ids []int) {
	if id := m.event; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEvent resets all changes to the "event" edge.
func (m *UniswapV3DecreaseLiqudityMutation) ResetEvent() {
	m.event = nil
	m.clearedevent = false
}

// Where appends a list predicates to the UniswapV3DecreaseLiqudityMutation builder.
func (m *UniswapV3DecreaseLiqudityMutation) Where(ps ...predicate.UniswapV3DecreaseLiqudity) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UniswapV3DecreaseLiqudityMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (UniswapV3DecreaseLiqudity).
func (m *UniswapV3DecreaseLiqudityMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UniswapV3DecreaseLiqudityMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.token_id != nil {
		fields = append(fields, uniswapv3decreaseliqudity.FieldTokenID)
	}
	if m.liquidity != nil {
		fields = append(fields, uniswapv3decreaseliqudity.FieldLiquidity)
	}
	if m.amount0 != nil {
		fields = append(fields, uniswapv3decreaseliqudity.FieldAmount0)
	}
	if m.amount1 != nil {
		fields = append(fields, uniswapv3decreaseliqudity.FieldAmount1)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UniswapV3DecreaseLiqudityMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case uniswapv3decreaseliqudity.FieldTokenID:
		return m.TokenID()
	case uniswapv3decreaseliqudity.FieldLiquidity:
		return m.Liquidity()
	case uniswapv3decreaseliqudity.FieldAmount0:
		return m.Amount0()
	case uniswapv3decreaseliqudity.FieldAmount1:
		return m.Amount1()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UniswapV3DecreaseLiqudityMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case uniswapv3decreaseliqudity.FieldTokenID:
		return m.OldTokenID(ctx)
	case uniswapv3decreaseliqudity.FieldLiquidity:
		return m.OldLiquidity(ctx)
	case uniswapv3decreaseliqudity.FieldAmount0:
		return m.OldAmount0(ctx)
	case uniswapv3decreaseliqudity.FieldAmount1:
		return m.OldAmount1(ctx)
	}
	return nil, fmt.Errorf("unknown UniswapV3DecreaseLiqudity field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UniswapV3DecreaseLiqudityMutation) SetField(name string, value ent.Value) error {
	switch name {
	case uniswapv3decreaseliqudity.FieldTokenID:
		v, ok := value.(*schema.BigInt)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTokenID(v)
		return nil
	case uniswapv3decreaseliqudity.FieldLiquidity:
		v, ok := value.(*schema.BigInt)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLiquidity(v)
		return nil
	case uniswapv3decreaseliqudity.FieldAmount0:
		v, ok := value.(*schema.BigInt)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount0(v)
		return nil
	case uniswapv3decreaseliqudity.FieldAmount1:
		v, ok := value.(*schema.BigInt)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount1(v)
		return nil
	}
	return fmt.Errorf("unknown UniswapV3DecreaseLiqudity field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UniswapV3DecreaseLiqudityMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UniswapV3DecreaseLiqudityMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UniswapV3DecreaseLiqudityMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown UniswapV3DecreaseLiqudity numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UniswapV3DecreaseLiqudityMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UniswapV3DecreaseLiqudityMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UniswapV3DecreaseLiqudityMutation) ClearField(name string) error {
	return fmt.Errorf("unknown UniswapV3DecreaseLiqudity nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UniswapV3DecreaseLiqudityMutation) ResetField(name string) error {
	switch name {
	case uniswapv3decreaseliqudity.FieldTokenID:
		m.ResetTokenID()
		return nil
	case uniswapv3decreaseliqudity.FieldLiquidity:
		m.ResetLiquidity()
		return nil
	case uniswapv3decreaseliqudity.FieldAmount0:
		m.ResetAmount0()
		return nil
	case uniswapv3decreaseliqudity.FieldAmount1:
		m.ResetAmount1()
		return nil
	}
	return fmt.Errorf("unknown UniswapV3DecreaseLiqudity field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UniswapV3DecreaseLiqudityMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.event != nil {
		edges = append(edges, uniswapv3decreaseliqudity.EdgeEvent)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UniswapV3DecreaseLiqudityMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case uniswapv3decreaseliqudity.EdgeEvent:
		if id := m.event; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UniswapV3DecreaseLiqudityMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UniswapV3DecreaseLiqudityMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UniswapV3DecreaseLiqudityMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedevent {
		edges = append(edges, uniswapv3decreaseliqudity.EdgeEvent)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UniswapV3DecreaseLiqudityMutation) EdgeCleared(name string) bool {
	switch name {
	case uniswapv3decreaseliqudity.EdgeEvent:
		return m.clearedevent
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UniswapV3DecreaseLiqudityMutation) ClearEdge(name string) error {
	switch name {
	case uniswapv3decreaseliqudity.EdgeEvent:
		m.ClearEvent()
		return nil
	}
	return fmt.Errorf("unknown UniswapV3DecreaseLiqudity unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UniswapV3DecreaseLiqudityMutation) ResetEdge(name string) error {
	switch name {
	case uniswapv3decreaseliqudity.EdgeEvent:
		m.ResetEvent()
		return nil
	}
	return fmt.Errorf("unknown UniswapV3DecreaseLiqudity edge %s", name)
}

// UniswapV3IncreaseLiqudityMutation represents an operation that mutates the UniswapV3IncreaseLiqudity nodes in the graph.
type UniswapV3IncreaseLiqudityMutation struct {
	config
	op            Op
	typ           string
	id            *int
	token_id      **schema.BigInt
	liquidity     **schema.BigInt
	amount0       **schema.BigInt
	amount1       **schema.BigInt
	clearedFields map[string]struct{}
	event         *int
	clearedevent  bool
	done          bool
	oldValue      func(context.Context) (*UniswapV3IncreaseLiqudity, error)
	predicates    []predicate.UniswapV3IncreaseLiqudity
}

var _ ent.Mutation = (*UniswapV3IncreaseLiqudityMutation)(nil)

// uniswapv3increaseliqudityOption allows management of the mutation configuration using functional options.
type uniswapv3increaseliqudityOption func(*UniswapV3IncreaseLiqudityMutation)

// newUniswapV3IncreaseLiqudityMutation creates new mutation for the UniswapV3IncreaseLiqudity entity.
func newUniswapV3IncreaseLiqudityMutation(c config, op Op, opts ...uniswapv3increaseliqudityOption) *UniswapV3IncreaseLiqudityMutation {
	m := &UniswapV3IncreaseLiqudityMutation{
		config:        c,
		op:            op,
		typ:           TypeUniswapV3IncreaseLiqudity,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUniswapV3IncreaseLiqudityID sets the ID field of the mutation.
func withUniswapV3IncreaseLiqudityID(id int) uniswapv3increaseliqudityOption {
	return func(m *UniswapV3IncreaseLiqudityMutation) {
		var (
			err   error
			once  sync.Once
			value *UniswapV3IncreaseLiqudity
		)
		m.oldValue = func(ctx context.Context) (*UniswapV3IncreaseLiqudity, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UniswapV3IncreaseLiqudity.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUniswapV3IncreaseLiqudity sets the old UniswapV3IncreaseLiqudity of the mutation.
func withUniswapV3IncreaseLiqudity(node *UniswapV3IncreaseLiqudity) uniswapv3increaseliqudityOption {
	return func(m *UniswapV3IncreaseLiqudityMutation) {
		m.oldValue = func(context.Context) (*UniswapV3IncreaseLiqudity, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UniswapV3IncreaseLiqudityMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UniswapV3IncreaseLiqudityMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UniswapV3IncreaseLiqudityMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetTokenID sets the "token_id" field.
func (m *UniswapV3IncreaseLiqudityMutation) SetTokenID(si *schema.BigInt) {
	m.token_id = &si
}

// TokenID returns the value of the "token_id" field in the mutation.
func (m *UniswapV3IncreaseLiqudityMutation) TokenID() (r *schema.BigInt, exists bool) {
	v := m.token_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTokenID returns the old "token_id" field's value of the UniswapV3IncreaseLiqudity entity.
// If the UniswapV3IncreaseLiqudity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniswapV3IncreaseLiqudityMutation) OldTokenID(ctx context.Context) (v *schema.BigInt, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTokenID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTokenID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTokenID: %w", err)
	}
	return oldValue.TokenID, nil
}

// ResetTokenID resets all changes to the "token_id" field.
func (m *UniswapV3IncreaseLiqudityMutation) ResetTokenID() {
	m.token_id = nil
}

// SetLiquidity sets the "liquidity" field.
func (m *UniswapV3IncreaseLiqudityMutation) SetLiquidity(si *schema.BigInt) {
	m.liquidity = &si
}

// Liquidity returns the value of the "liquidity" field in the mutation.
func (m *UniswapV3IncreaseLiqudityMutation) Liquidity() (r *schema.BigInt, exists bool) {
	v := m.liquidity
	if v == nil {
		return
	}
	return *v, true
}

// OldLiquidity returns the old "liquidity" field's value of the UniswapV3IncreaseLiqudity entity.
// If the UniswapV3IncreaseLiqudity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniswapV3IncreaseLiqudityMutation) OldLiquidity(ctx context.Context) (v *schema.BigInt, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLiquidity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLiquidity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLiquidity: %w", err)
	}
	return oldValue.Liquidity, nil
}

// ResetLiquidity resets all changes to the "liquidity" field.
func (m *UniswapV3IncreaseLiqudityMutation) ResetLiquidity() {
	m.liquidity = nil
}

// SetAmount0 sets the "amount0" field.
func (m *UniswapV3IncreaseLiqudityMutation) SetAmount0(si *schema.BigInt) {
	m.amount0 = &si
}

// Amount0 returns the value of the "amount0" field in the mutation.
func (m *UniswapV3IncreaseLiqudityMutation) Amount0() (r *schema.BigInt, exists bool) {
	v := m.amount0
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount0 returns the old "amount0" field's value of the UniswapV3IncreaseLiqudity entity.
// If the UniswapV3IncreaseLiqudity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniswapV3IncreaseLiqudityMutation) OldAmount0(ctx context.Context) (v *schema.BigInt, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAmount0 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAmount0 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount0: %w", err)
	}
	return oldValue.Amount0, nil
}

// ResetAmount0 resets all changes to the "amount0" field.
func (m *UniswapV3IncreaseLiqudityMutation) ResetAmount0() {
	m.amount0 = nil
}

// SetAmount1 sets the "amount1" field.
func (m *UniswapV3IncreaseLiqudityMutation) SetAmount1(si *schema.BigInt) {
	m.amount1 = &si
}

// Amount1 returns the value of the "amount1" field in the mutation.
func (m *UniswapV3IncreaseLiqudityMutation) Amount1() (r *schema.BigInt, exists bool) {
	v := m.amount1
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount1 returns the old "amount1" field's value of the UniswapV3IncreaseLiqudity entity.
// If the UniswapV3IncreaseLiqudity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniswapV3IncreaseLiqudityMutation) OldAmount1(ctx context.Context) (v *schema.BigInt, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAmount1 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAmount1 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount1: %w", err)
	}
	return oldValue.Amount1, nil
}

// ResetAmount1 resets all changes to the "amount1" field.
func (m *UniswapV3IncreaseLiqudityMutation) ResetAmount1() {
	m.amount1 = nil
}

// SetEventID sets the "event" edge to the Event entity by id.
func (m *UniswapV3IncreaseLiqudityMutation) SetEventID(id int) {
	m.event = &id
}

// ClearEvent clears the "event" edge to the Event entity.
func (m *UniswapV3IncreaseLiqudityMutation) ClearEvent() {
	m.clearedevent = true
}

// EventCleared reports if the "event" edge to the Event entity was cleared.
func (m *UniswapV3IncreaseLiqudityMutation) EventCleared() bool {
	return m.clearedevent
}

// EventID returns the "event" edge ID in the mutation.
func (m *UniswapV3IncreaseLiqudityMutation) EventID() (id int, exists bool) {
	if m.event != nil {
		return *m.event, true
	}
	return
}

// EventIDs returns the "event" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EventID instead. It exists only for internal usage by the builders.
func (m *UniswapV3IncreaseLiqudityMutation) EventIDs() (ids []int) {
	if id := m.event; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEvent resets all changes to the "event" edge.
func (m *UniswapV3IncreaseLiqudityMutation) ResetEvent() {
	m.event = nil
	m.clearedevent = false
}

// Where appends a list predicates to the UniswapV3IncreaseLiqudityMutation builder.
func (m *UniswapV3IncreaseLiqudityMutation) Where(ps ...predicate.UniswapV3IncreaseLiqudity) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UniswapV3IncreaseLiqudityMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (UniswapV3IncreaseLiqudity).
func (m *UniswapV3IncreaseLiqudityMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UniswapV3IncreaseLiqudityMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.token_id != nil {
		fields = append(fields, uniswapv3increaseliqudity.FieldTokenID)
	}
	if m.liquidity != nil {
		fields = append(fields, uniswapv3increaseliqudity.FieldLiquidity)
	}
	if m.amount0 != nil {
		fields = append(fields, uniswapv3increaseliqudity.FieldAmount0)
	}
	if m.amount1 != nil {
		fields = append(fields, uniswapv3increaseliqudity.FieldAmount1)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UniswapV3IncreaseLiqudityMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case uniswapv3increaseliqudity.FieldTokenID:
		return m.TokenID()
	case uniswapv3increaseliqudity.FieldLiquidity:
		return m.Liquidity()
	case uniswapv3increaseliqudity.FieldAmount0:
		return m.Amount0()
	case uniswapv3increaseliqudity.FieldAmount1:
		return m.Amount1()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UniswapV3IncreaseLiqudityMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case uniswapv3increaseliqudity.FieldTokenID:
		return m.OldTokenID(ctx)
	case uniswapv3increaseliqudity.FieldLiquidity:
		return m.OldLiquidity(ctx)
	case uniswapv3increaseliqudity.FieldAmount0:
		return m.OldAmount0(ctx)
	case uniswapv3increaseliqudity.FieldAmount1:
		return m.OldAmount1(ctx)
	}
	return nil, fmt.Errorf("unknown UniswapV3IncreaseLiqudity field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UniswapV3IncreaseLiqudityMutation) SetField(name string, value ent.Value) error {
	switch name {
	case uniswapv3increaseliqudity.FieldTokenID:
		v, ok := value.(*schema.BigInt)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTokenID(v)
		return nil
	case uniswapv3increaseliqudity.FieldLiquidity:
		v, ok := value.(*schema.BigInt)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLiquidity(v)
		return nil
	case uniswapv3increaseliqudity.FieldAmount0:
		v, ok := value.(*schema.BigInt)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount0(v)
		return nil
	case uniswapv3increaseliqudity.FieldAmount1:
		v, ok := value.(*schema.BigInt)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount1(v)
		return nil
	}
	return fmt.Errorf("unknown UniswapV3IncreaseLiqudity field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UniswapV3IncreaseLiqudityMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UniswapV3IncreaseLiqudityMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UniswapV3IncreaseLiqudityMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown UniswapV3IncreaseLiqudity numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UniswapV3IncreaseLiqudityMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UniswapV3IncreaseLiqudityMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UniswapV3IncreaseLiqudityMutation) ClearField(name string) error {
	return fmt.Errorf("unknown UniswapV3IncreaseLiqudity nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UniswapV3IncreaseLiqudityMutation) ResetField(name string) error {
	switch name {
	case uniswapv3increaseliqudity.FieldTokenID:
		m.ResetTokenID()
		return nil
	case uniswapv3increaseliqudity.FieldLiquidity:
		m.ResetLiquidity()
		return nil
	case uniswapv3increaseliqudity.FieldAmount0:
		m.ResetAmount0()
		return nil
	case uniswapv3increaseliqudity.FieldAmount1:
		m.ResetAmount1()
		return nil
	}
	return fmt.Errorf("unknown UniswapV3IncreaseLiqudity field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UniswapV3IncreaseLiqudityMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.event != nil {
		edges = append(edges, uniswapv3increaseliqudity.EdgeEvent)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UniswapV3IncreaseLiqudityMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case uniswapv3increaseliqudity.EdgeEvent:
		if id := m.event; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UniswapV3IncreaseLiqudityMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UniswapV3IncreaseLiqudityMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UniswapV3IncreaseLiqudityMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedevent {
		edges = append(edges, uniswapv3increaseliqudity.EdgeEvent)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UniswapV3IncreaseLiqudityMutation) EdgeCleared(name string) bool {
	switch name {
	case uniswapv3increaseliqudity.EdgeEvent:
		return m.clearedevent
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UniswapV3IncreaseLiqudityMutation) ClearEdge(name string) error {
	switch name {
	case uniswapv3increaseliqudity.EdgeEvent:
		m.ClearEvent()
		return nil
	}
	return fmt.Errorf("unknown UniswapV3IncreaseLiqudity unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UniswapV3IncreaseLiqudityMutation) ResetEdge(name string) error {
	switch name {
	case uniswapv3increaseliqudity.EdgeEvent:
		m.ResetEvent()
		return nil
	}
	return fmt.Errorf("unknown UniswapV3IncreaseLiqudity edge %s", name)
}

// UniswapV3TransferMutation represents an operation that mutates the UniswapV3Transfer nodes in the graph.
type UniswapV3TransferMutation struct {
	config
	op            Op
	typ           string
	id            *int
	token_id      **schema.BigInt
	from          *string
	to            *string
	clearedFields map[string]struct{}
	event         *int
	clearedevent  bool
	done          bool
	oldValue      func(context.Context) (*UniswapV3Transfer, error)
	predicates    []predicate.UniswapV3Transfer
}

var _ ent.Mutation = (*UniswapV3TransferMutation)(nil)

// uniswapv3transferOption allows management of the mutation configuration using functional options.
type uniswapv3transferOption func(*UniswapV3TransferMutation)

// newUniswapV3TransferMutation creates new mutation for the UniswapV3Transfer entity.
func newUniswapV3TransferMutation(c config, op Op, opts ...uniswapv3transferOption) *UniswapV3TransferMutation {
	m := &UniswapV3TransferMutation{
		config:        c,
		op:            op,
		typ:           TypeUniswapV3Transfer,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUniswapV3TransferID sets the ID field of the mutation.
func withUniswapV3TransferID(id int) uniswapv3transferOption {
	return func(m *UniswapV3TransferMutation) {
		var (
			err   error
			once  sync.Once
			value *UniswapV3Transfer
		)
		m.oldValue = func(ctx context.Context) (*UniswapV3Transfer, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UniswapV3Transfer.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUniswapV3Transfer sets the old UniswapV3Transfer of the mutation.
func withUniswapV3Transfer(node *UniswapV3Transfer) uniswapv3transferOption {
	return func(m *UniswapV3TransferMutation) {
		m.oldValue = func(context.Context) (*UniswapV3Transfer, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UniswapV3TransferMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UniswapV3TransferMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UniswapV3TransferMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetTokenID sets the "token_id" field.
func (m *UniswapV3TransferMutation) SetTokenID(si *schema.BigInt) {
	m.token_id = &si
}

// TokenID returns the value of the "token_id" field in the mutation.
func (m *UniswapV3TransferMutation) TokenID() (r *schema.BigInt, exists bool) {
	v := m.token_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTokenID returns the old "token_id" field's value of the UniswapV3Transfer entity.
// If the UniswapV3Transfer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniswapV3TransferMutation) OldTokenID(ctx context.Context) (v *schema.BigInt, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTokenID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTokenID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTokenID: %w", err)
	}
	return oldValue.TokenID, nil
}

// ResetTokenID resets all changes to the "token_id" field.
func (m *UniswapV3TransferMutation) ResetTokenID() {
	m.token_id = nil
}

// SetFrom sets the "from" field.
func (m *UniswapV3TransferMutation) SetFrom(s string) {
	m.from = &s
}

// From returns the value of the "from" field in the mutation.
func (m *UniswapV3TransferMutation) From() (r string, exists bool) {
	v := m.from
	if v == nil {
		return
	}
	return *v, true
}

// OldFrom returns the old "from" field's value of the UniswapV3Transfer entity.
// If the UniswapV3Transfer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniswapV3TransferMutation) OldFrom(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldFrom is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldFrom requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFrom: %w", err)
	}
	return oldValue.From, nil
}

// ResetFrom resets all changes to the "from" field.
func (m *UniswapV3TransferMutation) ResetFrom() {
	m.from = nil
}

// SetTo sets the "to" field.
func (m *UniswapV3TransferMutation) SetTo(s string) {
	m.to = &s
}

// To returns the value of the "to" field in the mutation.
func (m *UniswapV3TransferMutation) To() (r string, exists bool) {
	v := m.to
	if v == nil {
		return
	}
	return *v, true
}

// OldTo returns the old "to" field's value of the UniswapV3Transfer entity.
// If the UniswapV3Transfer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniswapV3TransferMutation) OldTo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTo: %w", err)
	}
	return oldValue.To, nil
}

// ResetTo resets all changes to the "to" field.
func (m *UniswapV3TransferMutation) ResetTo() {
	m.to = nil
}

// SetEventID sets the "event" edge to the Event entity by id.
func (m *UniswapV3TransferMutation) SetEventID(id int) {
	m.event = &id
}

// ClearEvent clears the "event" edge to the Event entity.
func (m *UniswapV3TransferMutation) ClearEvent() {
	m.clearedevent = true
}

// EventCleared reports if the "event" edge to the Event entity was cleared.
func (m *UniswapV3TransferMutation) EventCleared() bool {
	return m.clearedevent
}

// EventID returns the "event" edge ID in the mutation.
func (m *UniswapV3TransferMutation) EventID() (id int, exists bool) {
	if m.event != nil {
		return *m.event, true
	}
	return
}

// EventIDs returns the "event" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EventID instead. It exists only for internal usage by the builders.
func (m *UniswapV3TransferMutation) EventIDs() (ids []int) {
	if id := m.event; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEvent resets all changes to the "event" edge.
func (m *UniswapV3TransferMutation) ResetEvent() {
	m.event = nil
	m.clearedevent = false
}

// Where appends a list predicates to the UniswapV3TransferMutation builder.
func (m *UniswapV3TransferMutation) Where(ps ...predicate.UniswapV3Transfer) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UniswapV3TransferMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (UniswapV3Transfer).
func (m *UniswapV3TransferMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UniswapV3TransferMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.token_id != nil {
		fields = append(fields, uniswapv3transfer.FieldTokenID)
	}
	if m.from != nil {
		fields = append(fields, uniswapv3transfer.FieldFrom)
	}
	if m.to != nil {
		fields = append(fields, uniswapv3transfer.FieldTo)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UniswapV3TransferMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case uniswapv3transfer.FieldTokenID:
		return m.TokenID()
	case uniswapv3transfer.FieldFrom:
		return m.From()
	case uniswapv3transfer.FieldTo:
		return m.To()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UniswapV3TransferMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case uniswapv3transfer.FieldTokenID:
		return m.OldTokenID(ctx)
	case uniswapv3transfer.FieldFrom:
		return m.OldFrom(ctx)
	case uniswapv3transfer.FieldTo:
		return m.OldTo(ctx)
	}
	return nil, fmt.Errorf("unknown UniswapV3Transfer field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UniswapV3TransferMutation) SetField(name string, value ent.Value) error {
	switch name {
	case uniswapv3transfer.FieldTokenID:
		v, ok := value.(*schema.BigInt)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTokenID(v)
		return nil
	case uniswapv3transfer.FieldFrom:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFrom(v)
		return nil
	case uniswapv3transfer.FieldTo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTo(v)
		return nil
	}
	return fmt.Errorf("unknown UniswapV3Transfer field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UniswapV3TransferMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UniswapV3TransferMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UniswapV3TransferMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown UniswapV3Transfer numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UniswapV3TransferMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UniswapV3TransferMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UniswapV3TransferMutation) ClearField(name string) error {
	return fmt.Errorf("unknown UniswapV3Transfer nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UniswapV3TransferMutation) ResetField(name string) error {
	switch name {
	case uniswapv3transfer.FieldTokenID:
		m.ResetTokenID()
		return nil
	case uniswapv3transfer.FieldFrom:
		m.ResetFrom()
		return nil
	case uniswapv3transfer.FieldTo:
		m.ResetTo()
		return nil
	}
	return fmt.Errorf("unknown UniswapV3Transfer field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UniswapV3TransferMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.event != nil {
		edges = append(edges, uniswapv3transfer.EdgeEvent)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UniswapV3TransferMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case uniswapv3transfer.EdgeEvent:
		if id := m.event; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UniswapV3TransferMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UniswapV3TransferMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UniswapV3TransferMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedevent {
		edges = append(edges, uniswapv3transfer.EdgeEvent)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UniswapV3TransferMutation) EdgeCleared(name string) bool {
	switch name {
	case uniswapv3transfer.EdgeEvent:
		return m.clearedevent
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UniswapV3TransferMutation) ClearEdge(name string) error {
	switch name {
	case uniswapv3transfer.EdgeEvent:
		m.ClearEvent()
		return nil
	}
	return fmt.Errorf("unknown UniswapV3Transfer unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UniswapV3TransferMutation) ResetEdge(name string) error {
	switch name {
	case uniswapv3transfer.EdgeEvent:
		m.ResetEvent()
		return nil
	}
	return fmt.Errorf("unknown UniswapV3Transfer edge %s", name)
}
