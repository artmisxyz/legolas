// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// EventsColumns holds the columns for the "events" table.
	EventsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "signature", Type: field.TypeString},
		{Name: "address", Type: field.TypeString},
		{Name: "block_number", Type: field.TypeUint64},
		{Name: "tx_hash", Type: field.TypeString},
		{Name: "tx_index", Type: field.TypeUint},
		{Name: "block_hash", Type: field.TypeString},
		{Name: "index", Type: field.TypeUint},
		{Name: "hash", Type: field.TypeString, Unique: true},
	}
	// EventsTable holds the schema information for the "events" table.
	EventsTable = &schema.Table{
		Name:       "events",
		Columns:    EventsColumns,
		PrimaryKey: []*schema.Column{EventsColumns[0]},
	}
	// PositionsColumns holds the columns for the "positions" table.
	PositionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "token", Type: field.TypeString, SchemaType: map[string]string{"postgres": "numeric(18, 0)"}},
		{Name: "owner", Type: field.TypeBytes},
		{Name: "pool", Type: field.TypeBytes},
		{Name: "token0", Type: field.TypeBytes},
		{Name: "token1", Type: field.TypeBytes},
		{Name: "tick_lower", Type: field.TypeString, SchemaType: map[string]string{"postgres": "numeric(18, 0)", "sqlite3": "numeric(18, 0)"}},
		{Name: "tick_upper", Type: field.TypeString, SchemaType: map[string]string{"postgres": "numeric(18, 0)", "sqlite3": "numeric(18, 0)"}},
		{Name: "liquidity", Type: field.TypeString, SchemaType: map[string]string{"postgres": "numeric(18, 0)", "sqlite3": "numeric(18, 0)"}},
		{Name: "deposited_token0", Type: field.TypeString, SchemaType: map[string]string{"postgres": "numeric(18, 0)", "sqlite3": "numeric(18, 0)"}},
		{Name: "deposited_token1", Type: field.TypeString, SchemaType: map[string]string{"postgres": "numeric(18, 0)", "sqlite3": "numeric(18, 0)"}},
		{Name: "withdrawn_token0", Type: field.TypeString, SchemaType: map[string]string{"postgres": "numeric(18, 0)", "sqlite3": "numeric(18, 0)"}},
		{Name: "withdrawn_token1", Type: field.TypeString, SchemaType: map[string]string{"postgres": "numeric(18, 0)", "sqlite3": "numeric(18, 0)"}},
		{Name: "collected_token0", Type: field.TypeString, SchemaType: map[string]string{"postgres": "numeric(18, 0)", "sqlite3": "numeric(18, 0)"}},
		{Name: "collected_token1", Type: field.TypeString, SchemaType: map[string]string{"postgres": "numeric(18, 0)", "sqlite3": "numeric(18, 0)"}},
		{Name: "collected_fees_token0", Type: field.TypeString, SchemaType: map[string]string{"postgres": "numeric(18, 0)", "sqlite3": "numeric(18, 0)"}},
		{Name: "collected_fees_token1", Type: field.TypeString, SchemaType: map[string]string{"postgres": "numeric(18, 0)", "sqlite3": "numeric(18, 0)"}},
		{Name: "fee_growth_inside0_last_x128", Type: field.TypeString, SchemaType: map[string]string{"postgres": "numeric(18, 0)", "sqlite3": "numeric(18, 0)"}},
		{Name: "fee_growth_inside1_last_x128", Type: field.TypeString, SchemaType: map[string]string{"postgres": "numeric(18, 0)", "sqlite3": "numeric(18, 0)"}},
	}
	// PositionsTable holds the schema information for the "positions" table.
	PositionsTable = &schema.Table{
		Name:       "positions",
		Columns:    PositionsColumns,
		PrimaryKey: []*schema.Column{PositionsColumns[0]},
	}
	// UniswapV3collectsColumns holds the columns for the "uniswap_v3collects" table.
	UniswapV3collectsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "token_id", Type: field.TypeString, SchemaType: map[string]string{"postgres": "numeric(18, 0)", "sqlite3": "numeric(18, 0)"}},
		{Name: "recipient", Type: field.TypeString},
		{Name: "amount0", Type: field.TypeString, SchemaType: map[string]string{"postgres": "numeric(18, 0)", "sqlite3": "numeric(18, 0)"}},
		{Name: "amount1", Type: field.TypeString, SchemaType: map[string]string{"postgres": "numeric(18, 0)", "sqlite3": "numeric(18, 0)"}},
		{Name: "event_id", Type: field.TypeInt, Unique: true, Nullable: true},
	}
	// UniswapV3collectsTable holds the schema information for the "uniswap_v3collects" table.
	UniswapV3collectsTable = &schema.Table{
		Name:       "uniswap_v3collects",
		Columns:    UniswapV3collectsColumns,
		PrimaryKey: []*schema.Column{UniswapV3collectsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "uniswap_v3collects_events_collect",
				Columns:    []*schema.Column{UniswapV3collectsColumns[5]},
				RefColumns: []*schema.Column{EventsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UniswapV3decreaseLiquditiesColumns holds the columns for the "uniswap_v3decrease_liqudities" table.
	UniswapV3decreaseLiquditiesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "token_id", Type: field.TypeString, SchemaType: map[string]string{"postgres": "numeric(18, 0)", "sqlite3": "numeric(18, 0)"}},
		{Name: "liquidity", Type: field.TypeString, SchemaType: map[string]string{"postgres": "numeric(18, 0)", "sqlite3": "numeric(18, 0)"}},
		{Name: "amount0", Type: field.TypeString, SchemaType: map[string]string{"postgres": "numeric(18, 0)", "sqlite3": "numeric(18, 0)"}},
		{Name: "amount1", Type: field.TypeString, SchemaType: map[string]string{"postgres": "numeric(18, 0)", "sqlite3": "numeric(18, 0)"}},
		{Name: "event_id", Type: field.TypeInt, Unique: true, Nullable: true},
	}
	// UniswapV3decreaseLiquditiesTable holds the schema information for the "uniswap_v3decrease_liqudities" table.
	UniswapV3decreaseLiquditiesTable = &schema.Table{
		Name:       "uniswap_v3decrease_liqudities",
		Columns:    UniswapV3decreaseLiquditiesColumns,
		PrimaryKey: []*schema.Column{UniswapV3decreaseLiquditiesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "uniswap_v3decrease_liqudities_events_decrease_liquidity",
				Columns:    []*schema.Column{UniswapV3decreaseLiquditiesColumns[5]},
				RefColumns: []*schema.Column{EventsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UniswapV3increaseLiquditiesColumns holds the columns for the "uniswap_v3increase_liqudities" table.
	UniswapV3increaseLiquditiesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "token_id", Type: field.TypeString, SchemaType: map[string]string{"postgres": "numeric(18, 0)", "sqlite3": "numeric(18, 0)"}},
		{Name: "liquidity", Type: field.TypeString, SchemaType: map[string]string{"postgres": "numeric(18, 0)", "sqlite3": "numeric(18, 0)"}},
		{Name: "amount0", Type: field.TypeString, SchemaType: map[string]string{"postgres": "numeric(18, 0)", "sqlite3": "numeric(18, 0)"}},
		{Name: "amount1", Type: field.TypeString, SchemaType: map[string]string{"postgres": "numeric(18, 0)", "sqlite3": "numeric(18, 0)"}},
		{Name: "event_id", Type: field.TypeInt, Unique: true, Nullable: true},
	}
	// UniswapV3increaseLiquditiesTable holds the schema information for the "uniswap_v3increase_liqudities" table.
	UniswapV3increaseLiquditiesTable = &schema.Table{
		Name:       "uniswap_v3increase_liqudities",
		Columns:    UniswapV3increaseLiquditiesColumns,
		PrimaryKey: []*schema.Column{UniswapV3increaseLiquditiesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "uniswap_v3increase_liqudities_events_increase_liquidity",
				Columns:    []*schema.Column{UniswapV3increaseLiquditiesColumns[5]},
				RefColumns: []*schema.Column{EventsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UniswapV3poolCreatedsColumns holds the columns for the "uniswap_v3pool_createds" table.
	UniswapV3poolCreatedsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "token0", Type: field.TypeString},
		{Name: "token1", Type: field.TypeString},
		{Name: "fee", Type: field.TypeString, SchemaType: map[string]string{"postgres": "numeric(18, 0)", "sqlite3": "numeric(18, 0)"}},
		{Name: "tick_spacing", Type: field.TypeString, SchemaType: map[string]string{"postgres": "numeric(18, 0)", "sqlite3": "numeric(18, 0)"}},
		{Name: "pool", Type: field.TypeString, Unique: true},
		{Name: "event_id", Type: field.TypeInt, Unique: true, Nullable: true},
	}
	// UniswapV3poolCreatedsTable holds the schema information for the "uniswap_v3pool_createds" table.
	UniswapV3poolCreatedsTable = &schema.Table{
		Name:       "uniswap_v3pool_createds",
		Columns:    UniswapV3poolCreatedsColumns,
		PrimaryKey: []*schema.Column{UniswapV3poolCreatedsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "uniswap_v3pool_createds_events_pool_created",
				Columns:    []*schema.Column{UniswapV3poolCreatedsColumns[6]},
				RefColumns: []*schema.Column{EventsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UniswapV3transfersColumns holds the columns for the "uniswap_v3transfers" table.
	UniswapV3transfersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "token_id", Type: field.TypeString, SchemaType: map[string]string{"postgres": "numeric(18, 0)", "sqlite3": "numeric(18, 0)"}},
		{Name: "from", Type: field.TypeString},
		{Name: "to", Type: field.TypeString},
		{Name: "event_id", Type: field.TypeInt, Unique: true, Nullable: true},
	}
	// UniswapV3transfersTable holds the schema information for the "uniswap_v3transfers" table.
	UniswapV3transfersTable = &schema.Table{
		Name:       "uniswap_v3transfers",
		Columns:    UniswapV3transfersColumns,
		PrimaryKey: []*schema.Column{UniswapV3transfersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "uniswap_v3transfers_events_transfer",
				Columns:    []*schema.Column{UniswapV3transfersColumns[4]},
				RefColumns: []*schema.Column{EventsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		EventsTable,
		PositionsTable,
		UniswapV3collectsTable,
		UniswapV3decreaseLiquditiesTable,
		UniswapV3increaseLiquditiesTable,
		UniswapV3poolCreatedsTable,
		UniswapV3transfersTable,
	}
)

func init() {
	UniswapV3collectsTable.ForeignKeys[0].RefTable = EventsTable
	UniswapV3decreaseLiquditiesTable.ForeignKeys[0].RefTable = EventsTable
	UniswapV3increaseLiquditiesTable.ForeignKeys[0].RefTable = EventsTable
	UniswapV3poolCreatedsTable.ForeignKeys[0].RefTable = EventsTable
	UniswapV3transfersTable.ForeignKeys[0].RefTable = EventsTable
}
