// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/artmisxyz/legolas/ent/event"
	"github.com/artmisxyz/legolas/ent/predicate"
	"github.com/artmisxyz/legolas/ent/uniswapv3poolinitialize"
)

// UniswapV3PoolInitializeUpdate is the builder for updating UniswapV3PoolInitialize entities.
type UniswapV3PoolInitializeUpdate struct {
	config
	hooks    []Hook
	mutation *UniswapV3PoolInitializeMutation
}

// Where appends a list predicates to the UniswapV3PoolInitializeUpdate builder.
func (uviu *UniswapV3PoolInitializeUpdate) Where(ps ...predicate.UniswapV3PoolInitialize) *UniswapV3PoolInitializeUpdate {
	uviu.mutation.Where(ps...)
	return uviu
}

// SetSqrtPriceX96 sets the "sqrt_price_x96" field.
func (uviu *UniswapV3PoolInitializeUpdate) SetSqrtPriceX96(s string) *UniswapV3PoolInitializeUpdate {
	uviu.mutation.SetSqrtPriceX96(s)
	return uviu
}

// SetTick sets the "tick" field.
func (uviu *UniswapV3PoolInitializeUpdate) SetTick(s string) *UniswapV3PoolInitializeUpdate {
	uviu.mutation.SetTick(s)
	return uviu
}

// SetEventID sets the "event" edge to the Event entity by ID.
func (uviu *UniswapV3PoolInitializeUpdate) SetEventID(id int) *UniswapV3PoolInitializeUpdate {
	uviu.mutation.SetEventID(id)
	return uviu
}

// SetEvent sets the "event" edge to the Event entity.
func (uviu *UniswapV3PoolInitializeUpdate) SetEvent(e *Event) *UniswapV3PoolInitializeUpdate {
	return uviu.SetEventID(e.ID)
}

// Mutation returns the UniswapV3PoolInitializeMutation object of the builder.
func (uviu *UniswapV3PoolInitializeUpdate) Mutation() *UniswapV3PoolInitializeMutation {
	return uviu.mutation
}

// ClearEvent clears the "event" edge to the Event entity.
func (uviu *UniswapV3PoolInitializeUpdate) ClearEvent() *UniswapV3PoolInitializeUpdate {
	uviu.mutation.ClearEvent()
	return uviu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uviu *UniswapV3PoolInitializeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(uviu.hooks) == 0 {
		if err = uviu.check(); err != nil {
			return 0, err
		}
		affected, err = uviu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UniswapV3PoolInitializeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uviu.check(); err != nil {
				return 0, err
			}
			uviu.mutation = mutation
			affected, err = uviu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(uviu.hooks) - 1; i >= 0; i-- {
			if uviu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uviu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uviu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (uviu *UniswapV3PoolInitializeUpdate) SaveX(ctx context.Context) int {
	affected, err := uviu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uviu *UniswapV3PoolInitializeUpdate) Exec(ctx context.Context) error {
	_, err := uviu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uviu *UniswapV3PoolInitializeUpdate) ExecX(ctx context.Context) {
	if err := uviu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uviu *UniswapV3PoolInitializeUpdate) check() error {
	if _, ok := uviu.mutation.EventID(); uviu.mutation.EventCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"event\"")
	}
	return nil
}

func (uviu *UniswapV3PoolInitializeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   uniswapv3poolinitialize.Table,
			Columns: uniswapv3poolinitialize.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: uniswapv3poolinitialize.FieldID,
			},
		},
	}
	if ps := uviu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uviu.mutation.SqrtPriceX96(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: uniswapv3poolinitialize.FieldSqrtPriceX96,
		})
	}
	if value, ok := uviu.mutation.Tick(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: uniswapv3poolinitialize.FieldTick,
		})
	}
	if uviu.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   uniswapv3poolinitialize.EventTable,
			Columns: []string{uniswapv3poolinitialize.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: event.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uviu.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   uniswapv3poolinitialize.EventTable,
			Columns: []string{uniswapv3poolinitialize.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uviu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{uniswapv3poolinitialize.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// UniswapV3PoolInitializeUpdateOne is the builder for updating a single UniswapV3PoolInitialize entity.
type UniswapV3PoolInitializeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UniswapV3PoolInitializeMutation
}

// SetSqrtPriceX96 sets the "sqrt_price_x96" field.
func (uviuo *UniswapV3PoolInitializeUpdateOne) SetSqrtPriceX96(s string) *UniswapV3PoolInitializeUpdateOne {
	uviuo.mutation.SetSqrtPriceX96(s)
	return uviuo
}

// SetTick sets the "tick" field.
func (uviuo *UniswapV3PoolInitializeUpdateOne) SetTick(s string) *UniswapV3PoolInitializeUpdateOne {
	uviuo.mutation.SetTick(s)
	return uviuo
}

// SetEventID sets the "event" edge to the Event entity by ID.
func (uviuo *UniswapV3PoolInitializeUpdateOne) SetEventID(id int) *UniswapV3PoolInitializeUpdateOne {
	uviuo.mutation.SetEventID(id)
	return uviuo
}

// SetEvent sets the "event" edge to the Event entity.
func (uviuo *UniswapV3PoolInitializeUpdateOne) SetEvent(e *Event) *UniswapV3PoolInitializeUpdateOne {
	return uviuo.SetEventID(e.ID)
}

// Mutation returns the UniswapV3PoolInitializeMutation object of the builder.
func (uviuo *UniswapV3PoolInitializeUpdateOne) Mutation() *UniswapV3PoolInitializeMutation {
	return uviuo.mutation
}

// ClearEvent clears the "event" edge to the Event entity.
func (uviuo *UniswapV3PoolInitializeUpdateOne) ClearEvent() *UniswapV3PoolInitializeUpdateOne {
	uviuo.mutation.ClearEvent()
	return uviuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uviuo *UniswapV3PoolInitializeUpdateOne) Select(field string, fields ...string) *UniswapV3PoolInitializeUpdateOne {
	uviuo.fields = append([]string{field}, fields...)
	return uviuo
}

// Save executes the query and returns the updated UniswapV3PoolInitialize entity.
func (uviuo *UniswapV3PoolInitializeUpdateOne) Save(ctx context.Context) (*UniswapV3PoolInitialize, error) {
	var (
		err  error
		node *UniswapV3PoolInitialize
	)
	if len(uviuo.hooks) == 0 {
		if err = uviuo.check(); err != nil {
			return nil, err
		}
		node, err = uviuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UniswapV3PoolInitializeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uviuo.check(); err != nil {
				return nil, err
			}
			uviuo.mutation = mutation
			node, err = uviuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uviuo.hooks) - 1; i >= 0; i-- {
			if uviuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uviuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uviuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uviuo *UniswapV3PoolInitializeUpdateOne) SaveX(ctx context.Context) *UniswapV3PoolInitialize {
	node, err := uviuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uviuo *UniswapV3PoolInitializeUpdateOne) Exec(ctx context.Context) error {
	_, err := uviuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uviuo *UniswapV3PoolInitializeUpdateOne) ExecX(ctx context.Context) {
	if err := uviuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uviuo *UniswapV3PoolInitializeUpdateOne) check() error {
	if _, ok := uviuo.mutation.EventID(); uviuo.mutation.EventCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"event\"")
	}
	return nil
}

func (uviuo *UniswapV3PoolInitializeUpdateOne) sqlSave(ctx context.Context) (_node *UniswapV3PoolInitialize, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   uniswapv3poolinitialize.Table,
			Columns: uniswapv3poolinitialize.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: uniswapv3poolinitialize.FieldID,
			},
		},
	}
	id, ok := uviuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing UniswapV3PoolInitialize.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := uviuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, uniswapv3poolinitialize.FieldID)
		for _, f := range fields {
			if !uniswapv3poolinitialize.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != uniswapv3poolinitialize.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uviuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uviuo.mutation.SqrtPriceX96(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: uniswapv3poolinitialize.FieldSqrtPriceX96,
		})
	}
	if value, ok := uviuo.mutation.Tick(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: uniswapv3poolinitialize.FieldTick,
		})
	}
	if uviuo.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   uniswapv3poolinitialize.EventTable,
			Columns: []string{uniswapv3poolinitialize.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: event.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uviuo.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   uniswapv3poolinitialize.EventTable,
			Columns: []string{uniswapv3poolinitialize.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UniswapV3PoolInitialize{config: uviuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uviuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{uniswapv3poolinitialize.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
