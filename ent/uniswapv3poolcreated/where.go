// Code generated by entc, DO NOT EDIT.

package uniswapv3poolcreated

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/artmisxyz/legolas/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Token0 applies equality check predicate on the "token0" field. It's identical to Token0EQ.
func Token0(v string) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldToken0), v))
	})
}

// Token1 applies equality check predicate on the "token1" field. It's identical to Token1EQ.
func Token1(v string) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldToken1), v))
	})
}

// Fee applies equality check predicate on the "fee" field. It's identical to FeeEQ.
func Fee(v string) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFee), v))
	})
}

// TickSpacing applies equality check predicate on the "tick_spacing" field. It's identical to TickSpacingEQ.
func TickSpacing(v string) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTickSpacing), v))
	})
}

// Pool applies equality check predicate on the "pool" field. It's identical to PoolEQ.
func Pool(v string) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPool), v))
	})
}

// Token0EQ applies the EQ predicate on the "token0" field.
func Token0EQ(v string) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldToken0), v))
	})
}

// Token0NEQ applies the NEQ predicate on the "token0" field.
func Token0NEQ(v string) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldToken0), v))
	})
}

// Token0In applies the In predicate on the "token0" field.
func Token0In(vs ...string) predicate.UniswapV3PoolCreated {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldToken0), v...))
	})
}

// Token0NotIn applies the NotIn predicate on the "token0" field.
func Token0NotIn(vs ...string) predicate.UniswapV3PoolCreated {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldToken0), v...))
	})
}

// Token0GT applies the GT predicate on the "token0" field.
func Token0GT(v string) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldToken0), v))
	})
}

// Token0GTE applies the GTE predicate on the "token0" field.
func Token0GTE(v string) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldToken0), v))
	})
}

// Token0LT applies the LT predicate on the "token0" field.
func Token0LT(v string) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldToken0), v))
	})
}

// Token0LTE applies the LTE predicate on the "token0" field.
func Token0LTE(v string) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldToken0), v))
	})
}

// Token0Contains applies the Contains predicate on the "token0" field.
func Token0Contains(v string) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldToken0), v))
	})
}

// Token0HasPrefix applies the HasPrefix predicate on the "token0" field.
func Token0HasPrefix(v string) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldToken0), v))
	})
}

// Token0HasSuffix applies the HasSuffix predicate on the "token0" field.
func Token0HasSuffix(v string) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldToken0), v))
	})
}

// Token0EqualFold applies the EqualFold predicate on the "token0" field.
func Token0EqualFold(v string) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldToken0), v))
	})
}

// Token0ContainsFold applies the ContainsFold predicate on the "token0" field.
func Token0ContainsFold(v string) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldToken0), v))
	})
}

// Token1EQ applies the EQ predicate on the "token1" field.
func Token1EQ(v string) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldToken1), v))
	})
}

// Token1NEQ applies the NEQ predicate on the "token1" field.
func Token1NEQ(v string) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldToken1), v))
	})
}

// Token1In applies the In predicate on the "token1" field.
func Token1In(vs ...string) predicate.UniswapV3PoolCreated {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldToken1), v...))
	})
}

// Token1NotIn applies the NotIn predicate on the "token1" field.
func Token1NotIn(vs ...string) predicate.UniswapV3PoolCreated {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldToken1), v...))
	})
}

// Token1GT applies the GT predicate on the "token1" field.
func Token1GT(v string) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldToken1), v))
	})
}

// Token1GTE applies the GTE predicate on the "token1" field.
func Token1GTE(v string) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldToken1), v))
	})
}

// Token1LT applies the LT predicate on the "token1" field.
func Token1LT(v string) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldToken1), v))
	})
}

// Token1LTE applies the LTE predicate on the "token1" field.
func Token1LTE(v string) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldToken1), v))
	})
}

// Token1Contains applies the Contains predicate on the "token1" field.
func Token1Contains(v string) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldToken1), v))
	})
}

// Token1HasPrefix applies the HasPrefix predicate on the "token1" field.
func Token1HasPrefix(v string) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldToken1), v))
	})
}

// Token1HasSuffix applies the HasSuffix predicate on the "token1" field.
func Token1HasSuffix(v string) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldToken1), v))
	})
}

// Token1EqualFold applies the EqualFold predicate on the "token1" field.
func Token1EqualFold(v string) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldToken1), v))
	})
}

// Token1ContainsFold applies the ContainsFold predicate on the "token1" field.
func Token1ContainsFold(v string) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldToken1), v))
	})
}

// FeeEQ applies the EQ predicate on the "fee" field.
func FeeEQ(v string) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFee), v))
	})
}

// FeeNEQ applies the NEQ predicate on the "fee" field.
func FeeNEQ(v string) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFee), v))
	})
}

// FeeIn applies the In predicate on the "fee" field.
func FeeIn(vs ...string) predicate.UniswapV3PoolCreated {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFee), v...))
	})
}

// FeeNotIn applies the NotIn predicate on the "fee" field.
func FeeNotIn(vs ...string) predicate.UniswapV3PoolCreated {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFee), v...))
	})
}

// FeeGT applies the GT predicate on the "fee" field.
func FeeGT(v string) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFee), v))
	})
}

// FeeGTE applies the GTE predicate on the "fee" field.
func FeeGTE(v string) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFee), v))
	})
}

// FeeLT applies the LT predicate on the "fee" field.
func FeeLT(v string) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFee), v))
	})
}

// FeeLTE applies the LTE predicate on the "fee" field.
func FeeLTE(v string) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFee), v))
	})
}

// FeeContains applies the Contains predicate on the "fee" field.
func FeeContains(v string) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFee), v))
	})
}

// FeeHasPrefix applies the HasPrefix predicate on the "fee" field.
func FeeHasPrefix(v string) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFee), v))
	})
}

// FeeHasSuffix applies the HasSuffix predicate on the "fee" field.
func FeeHasSuffix(v string) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFee), v))
	})
}

// FeeEqualFold applies the EqualFold predicate on the "fee" field.
func FeeEqualFold(v string) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFee), v))
	})
}

// FeeContainsFold applies the ContainsFold predicate on the "fee" field.
func FeeContainsFold(v string) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFee), v))
	})
}

// TickSpacingEQ applies the EQ predicate on the "tick_spacing" field.
func TickSpacingEQ(v string) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTickSpacing), v))
	})
}

// TickSpacingNEQ applies the NEQ predicate on the "tick_spacing" field.
func TickSpacingNEQ(v string) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTickSpacing), v))
	})
}

// TickSpacingIn applies the In predicate on the "tick_spacing" field.
func TickSpacingIn(vs ...string) predicate.UniswapV3PoolCreated {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTickSpacing), v...))
	})
}

// TickSpacingNotIn applies the NotIn predicate on the "tick_spacing" field.
func TickSpacingNotIn(vs ...string) predicate.UniswapV3PoolCreated {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTickSpacing), v...))
	})
}

// TickSpacingGT applies the GT predicate on the "tick_spacing" field.
func TickSpacingGT(v string) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTickSpacing), v))
	})
}

// TickSpacingGTE applies the GTE predicate on the "tick_spacing" field.
func TickSpacingGTE(v string) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTickSpacing), v))
	})
}

// TickSpacingLT applies the LT predicate on the "tick_spacing" field.
func TickSpacingLT(v string) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTickSpacing), v))
	})
}

// TickSpacingLTE applies the LTE predicate on the "tick_spacing" field.
func TickSpacingLTE(v string) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTickSpacing), v))
	})
}

// TickSpacingContains applies the Contains predicate on the "tick_spacing" field.
func TickSpacingContains(v string) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTickSpacing), v))
	})
}

// TickSpacingHasPrefix applies the HasPrefix predicate on the "tick_spacing" field.
func TickSpacingHasPrefix(v string) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTickSpacing), v))
	})
}

// TickSpacingHasSuffix applies the HasSuffix predicate on the "tick_spacing" field.
func TickSpacingHasSuffix(v string) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTickSpacing), v))
	})
}

// TickSpacingEqualFold applies the EqualFold predicate on the "tick_spacing" field.
func TickSpacingEqualFold(v string) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTickSpacing), v))
	})
}

// TickSpacingContainsFold applies the ContainsFold predicate on the "tick_spacing" field.
func TickSpacingContainsFold(v string) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTickSpacing), v))
	})
}

// PoolEQ applies the EQ predicate on the "pool" field.
func PoolEQ(v string) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPool), v))
	})
}

// PoolNEQ applies the NEQ predicate on the "pool" field.
func PoolNEQ(v string) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPool), v))
	})
}

// PoolIn applies the In predicate on the "pool" field.
func PoolIn(vs ...string) predicate.UniswapV3PoolCreated {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPool), v...))
	})
}

// PoolNotIn applies the NotIn predicate on the "pool" field.
func PoolNotIn(vs ...string) predicate.UniswapV3PoolCreated {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPool), v...))
	})
}

// PoolGT applies the GT predicate on the "pool" field.
func PoolGT(v string) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPool), v))
	})
}

// PoolGTE applies the GTE predicate on the "pool" field.
func PoolGTE(v string) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPool), v))
	})
}

// PoolLT applies the LT predicate on the "pool" field.
func PoolLT(v string) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPool), v))
	})
}

// PoolLTE applies the LTE predicate on the "pool" field.
func PoolLTE(v string) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPool), v))
	})
}

// PoolContains applies the Contains predicate on the "pool" field.
func PoolContains(v string) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPool), v))
	})
}

// PoolHasPrefix applies the HasPrefix predicate on the "pool" field.
func PoolHasPrefix(v string) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPool), v))
	})
}

// PoolHasSuffix applies the HasSuffix predicate on the "pool" field.
func PoolHasSuffix(v string) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPool), v))
	})
}

// PoolEqualFold applies the EqualFold predicate on the "pool" field.
func PoolEqualFold(v string) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPool), v))
	})
}

// PoolContainsFold applies the ContainsFold predicate on the "pool" field.
func PoolContainsFold(v string) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPool), v))
	})
}

// HasEvent applies the HasEdge predicate on the "event" edge.
func HasEvent() predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EventTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, EventTable, EventColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEventWith applies the HasEdge predicate on the "event" edge with a given conditions (other predicates).
func HasEventWith(preds ...predicate.Event) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EventInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, EventTable, EventColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UniswapV3PoolCreated) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UniswapV3PoolCreated) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UniswapV3PoolCreated) predicate.UniswapV3PoolCreated {
	return predicate.UniswapV3PoolCreated(func(s *sql.Selector) {
		p(s.Not())
	})
}
