// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/artmisxyz/blockinspector/ent/event"
	"github.com/artmisxyz/blockinspector/ent/schema"
	"github.com/artmisxyz/blockinspector/ent/uniswapv3increaseliqudity"
)

// UniswapV3IncreaseLiqudity is the model entity for the UniswapV3IncreaseLiqudity schema.
type UniswapV3IncreaseLiqudity struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TokenID holds the value of the "token_id" field.
	TokenID *schema.BigInt `json:"token_id,omitempty"`
	// Liquidity holds the value of the "liquidity" field.
	Liquidity *schema.BigInt `json:"liquidity,omitempty"`
	// Amount0 holds the value of the "amount0" field.
	Amount0 *schema.BigInt `json:"amount0,omitempty"`
	// Amount1 holds the value of the "amount1" field.
	Amount1 *schema.BigInt `json:"amount1,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UniswapV3IncreaseLiqudityQuery when eager-loading is set.
	Edges    UniswapV3IncreaseLiqudityEdges `json:"edges"`
	event_id *int
}

// UniswapV3IncreaseLiqudityEdges holds the relations/edges for other nodes in the graph.
type UniswapV3IncreaseLiqudityEdges struct {
	// Event holds the value of the event edge.
	Event *Event `json:"event,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EventOrErr returns the Event value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UniswapV3IncreaseLiqudityEdges) EventOrErr() (*Event, error) {
	if e.loadedTypes[0] {
		if e.Event == nil {
			// The edge event was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: event.Label}
		}
		return e.Event, nil
	}
	return nil, &NotLoadedError{edge: "event"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UniswapV3IncreaseLiqudity) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case uniswapv3increaseliqudity.FieldTokenID, uniswapv3increaseliqudity.FieldLiquidity, uniswapv3increaseliqudity.FieldAmount0, uniswapv3increaseliqudity.FieldAmount1:
			values[i] = new(schema.BigInt)
		case uniswapv3increaseliqudity.FieldID:
			values[i] = new(sql.NullInt64)
		case uniswapv3increaseliqudity.ForeignKeys[0]: // event_id
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UniswapV3IncreaseLiqudity", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UniswapV3IncreaseLiqudity fields.
func (uvl *UniswapV3IncreaseLiqudity) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case uniswapv3increaseliqudity.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			uvl.ID = int(value.Int64)
		case uniswapv3increaseliqudity.FieldTokenID:
			if value, ok := values[i].(*schema.BigInt); !ok {
				return fmt.Errorf("unexpected type %T for field token_id", values[i])
			} else if value != nil {
				uvl.TokenID = value
			}
		case uniswapv3increaseliqudity.FieldLiquidity:
			if value, ok := values[i].(*schema.BigInt); !ok {
				return fmt.Errorf("unexpected type %T for field liquidity", values[i])
			} else if value != nil {
				uvl.Liquidity = value
			}
		case uniswapv3increaseliqudity.FieldAmount0:
			if value, ok := values[i].(*schema.BigInt); !ok {
				return fmt.Errorf("unexpected type %T for field amount0", values[i])
			} else if value != nil {
				uvl.Amount0 = value
			}
		case uniswapv3increaseliqudity.FieldAmount1:
			if value, ok := values[i].(*schema.BigInt); !ok {
				return fmt.Errorf("unexpected type %T for field amount1", values[i])
			} else if value != nil {
				uvl.Amount1 = value
			}
		case uniswapv3increaseliqudity.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field event_id", value)
			} else if value.Valid {
				uvl.event_id = new(int)
				*uvl.event_id = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryEvent queries the "event" edge of the UniswapV3IncreaseLiqudity entity.
func (uvl *UniswapV3IncreaseLiqudity) QueryEvent() *EventQuery {
	return (&UniswapV3IncreaseLiqudityClient{config: uvl.config}).QueryEvent(uvl)
}

// Update returns a builder for updating this UniswapV3IncreaseLiqudity.
// Note that you need to call UniswapV3IncreaseLiqudity.Unwrap() before calling this method if this UniswapV3IncreaseLiqudity
// was returned from a transaction, and the transaction was committed or rolled back.
func (uvl *UniswapV3IncreaseLiqudity) Update() *UniswapV3IncreaseLiqudityUpdateOne {
	return (&UniswapV3IncreaseLiqudityClient{config: uvl.config}).UpdateOne(uvl)
}

// Unwrap unwraps the UniswapV3IncreaseLiqudity entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (uvl *UniswapV3IncreaseLiqudity) Unwrap() *UniswapV3IncreaseLiqudity {
	tx, ok := uvl.config.driver.(*txDriver)
	if !ok {
		panic("ent: UniswapV3IncreaseLiqudity is not a transactional entity")
	}
	uvl.config.driver = tx.drv
	return uvl
}

// String implements the fmt.Stringer.
func (uvl *UniswapV3IncreaseLiqudity) String() string {
	var builder strings.Builder
	builder.WriteString("UniswapV3IncreaseLiqudity(")
	builder.WriteString(fmt.Sprintf("id=%v", uvl.ID))
	builder.WriteString(", token_id=")
	builder.WriteString(fmt.Sprintf("%v", uvl.TokenID))
	builder.WriteString(", liquidity=")
	builder.WriteString(fmt.Sprintf("%v", uvl.Liquidity))
	builder.WriteString(", amount0=")
	builder.WriteString(fmt.Sprintf("%v", uvl.Amount0))
	builder.WriteString(", amount1=")
	builder.WriteString(fmt.Sprintf("%v", uvl.Amount1))
	builder.WriteByte(')')
	return builder.String()
}

// UniswapV3IncreaseLiqudities is a parsable slice of UniswapV3IncreaseLiqudity.
type UniswapV3IncreaseLiqudities []*UniswapV3IncreaseLiqudity

func (uvl UniswapV3IncreaseLiqudities) config(cfg config) {
	for _i := range uvl {
		uvl[_i].config = cfg
	}
}
