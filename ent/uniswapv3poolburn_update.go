// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/artmisxyz/legolas/ent/event"
	"github.com/artmisxyz/legolas/ent/predicate"
	"github.com/artmisxyz/legolas/ent/schema"
	"github.com/artmisxyz/legolas/ent/uniswapv3poolburn"
)

// UniswapV3PoolBurnUpdate is the builder for updating UniswapV3PoolBurn entities.
type UniswapV3PoolBurnUpdate struct {
	config
	hooks    []Hook
	mutation *UniswapV3PoolBurnMutation
}

// Where appends a list predicates to the UniswapV3PoolBurnUpdate builder.
func (uvbu *UniswapV3PoolBurnUpdate) Where(ps ...predicate.UniswapV3PoolBurn) *UniswapV3PoolBurnUpdate {
	uvbu.mutation.Where(ps...)
	return uvbu
}

// SetOwner sets the "owner" field.
func (uvbu *UniswapV3PoolBurnUpdate) SetOwner(s string) *UniswapV3PoolBurnUpdate {
	uvbu.mutation.SetOwner(s)
	return uvbu
}

// SetTickLower sets the "tick_lower" field.
func (uvbu *UniswapV3PoolBurnUpdate) SetTickLower(si *schema.BigInt) *UniswapV3PoolBurnUpdate {
	uvbu.mutation.SetTickLower(si)
	return uvbu
}

// SetTickUpper sets the "tick_upper" field.
func (uvbu *UniswapV3PoolBurnUpdate) SetTickUpper(si *schema.BigInt) *UniswapV3PoolBurnUpdate {
	uvbu.mutation.SetTickUpper(si)
	return uvbu
}

// SetAmount sets the "amount" field.
func (uvbu *UniswapV3PoolBurnUpdate) SetAmount(si *schema.BigInt) *UniswapV3PoolBurnUpdate {
	uvbu.mutation.SetAmount(si)
	return uvbu
}

// SetAmount0 sets the "amount0" field.
func (uvbu *UniswapV3PoolBurnUpdate) SetAmount0(si *schema.BigInt) *UniswapV3PoolBurnUpdate {
	uvbu.mutation.SetAmount0(si)
	return uvbu
}

// SetAmount1 sets the "amount1" field.
func (uvbu *UniswapV3PoolBurnUpdate) SetAmount1(si *schema.BigInt) *UniswapV3PoolBurnUpdate {
	uvbu.mutation.SetAmount1(si)
	return uvbu
}

// SetEventID sets the "event" edge to the Event entity by ID.
func (uvbu *UniswapV3PoolBurnUpdate) SetEventID(id int) *UniswapV3PoolBurnUpdate {
	uvbu.mutation.SetEventID(id)
	return uvbu
}

// SetEvent sets the "event" edge to the Event entity.
func (uvbu *UniswapV3PoolBurnUpdate) SetEvent(e *Event) *UniswapV3PoolBurnUpdate {
	return uvbu.SetEventID(e.ID)
}

// Mutation returns the UniswapV3PoolBurnMutation object of the builder.
func (uvbu *UniswapV3PoolBurnUpdate) Mutation() *UniswapV3PoolBurnMutation {
	return uvbu.mutation
}

// ClearEvent clears the "event" edge to the Event entity.
func (uvbu *UniswapV3PoolBurnUpdate) ClearEvent() *UniswapV3PoolBurnUpdate {
	uvbu.mutation.ClearEvent()
	return uvbu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uvbu *UniswapV3PoolBurnUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(uvbu.hooks) == 0 {
		if err = uvbu.check(); err != nil {
			return 0, err
		}
		affected, err = uvbu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UniswapV3PoolBurnMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uvbu.check(); err != nil {
				return 0, err
			}
			uvbu.mutation = mutation
			affected, err = uvbu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(uvbu.hooks) - 1; i >= 0; i-- {
			if uvbu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uvbu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uvbu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (uvbu *UniswapV3PoolBurnUpdate) SaveX(ctx context.Context) int {
	affected, err := uvbu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uvbu *UniswapV3PoolBurnUpdate) Exec(ctx context.Context) error {
	_, err := uvbu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uvbu *UniswapV3PoolBurnUpdate) ExecX(ctx context.Context) {
	if err := uvbu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uvbu *UniswapV3PoolBurnUpdate) check() error {
	if v, ok := uvbu.mutation.Owner(); ok {
		if err := uniswapv3poolburn.OwnerValidator(v); err != nil {
			return &ValidationError{Name: "owner", err: fmt.Errorf("ent: validator failed for field \"owner\": %w", err)}
		}
	}
	if _, ok := uvbu.mutation.EventID(); uvbu.mutation.EventCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"event\"")
	}
	return nil
}

func (uvbu *UniswapV3PoolBurnUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   uniswapv3poolburn.Table,
			Columns: uniswapv3poolburn.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: uniswapv3poolburn.FieldID,
			},
		},
	}
	if ps := uvbu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uvbu.mutation.Owner(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: uniswapv3poolburn.FieldOwner,
		})
	}
	if value, ok := uvbu.mutation.TickLower(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: uniswapv3poolburn.FieldTickLower,
		})
	}
	if value, ok := uvbu.mutation.TickUpper(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: uniswapv3poolburn.FieldTickUpper,
		})
	}
	if value, ok := uvbu.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: uniswapv3poolburn.FieldAmount,
		})
	}
	if value, ok := uvbu.mutation.Amount0(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: uniswapv3poolburn.FieldAmount0,
		})
	}
	if value, ok := uvbu.mutation.Amount1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: uniswapv3poolburn.FieldAmount1,
		})
	}
	if uvbu.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   uniswapv3poolburn.EventTable,
			Columns: []string{uniswapv3poolburn.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: event.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uvbu.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   uniswapv3poolburn.EventTable,
			Columns: []string{uniswapv3poolburn.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uvbu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{uniswapv3poolburn.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// UniswapV3PoolBurnUpdateOne is the builder for updating a single UniswapV3PoolBurn entity.
type UniswapV3PoolBurnUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UniswapV3PoolBurnMutation
}

// SetOwner sets the "owner" field.
func (uvbuo *UniswapV3PoolBurnUpdateOne) SetOwner(s string) *UniswapV3PoolBurnUpdateOne {
	uvbuo.mutation.SetOwner(s)
	return uvbuo
}

// SetTickLower sets the "tick_lower" field.
func (uvbuo *UniswapV3PoolBurnUpdateOne) SetTickLower(si *schema.BigInt) *UniswapV3PoolBurnUpdateOne {
	uvbuo.mutation.SetTickLower(si)
	return uvbuo
}

// SetTickUpper sets the "tick_upper" field.
func (uvbuo *UniswapV3PoolBurnUpdateOne) SetTickUpper(si *schema.BigInt) *UniswapV3PoolBurnUpdateOne {
	uvbuo.mutation.SetTickUpper(si)
	return uvbuo
}

// SetAmount sets the "amount" field.
func (uvbuo *UniswapV3PoolBurnUpdateOne) SetAmount(si *schema.BigInt) *UniswapV3PoolBurnUpdateOne {
	uvbuo.mutation.SetAmount(si)
	return uvbuo
}

// SetAmount0 sets the "amount0" field.
func (uvbuo *UniswapV3PoolBurnUpdateOne) SetAmount0(si *schema.BigInt) *UniswapV3PoolBurnUpdateOne {
	uvbuo.mutation.SetAmount0(si)
	return uvbuo
}

// SetAmount1 sets the "amount1" field.
func (uvbuo *UniswapV3PoolBurnUpdateOne) SetAmount1(si *schema.BigInt) *UniswapV3PoolBurnUpdateOne {
	uvbuo.mutation.SetAmount1(si)
	return uvbuo
}

// SetEventID sets the "event" edge to the Event entity by ID.
func (uvbuo *UniswapV3PoolBurnUpdateOne) SetEventID(id int) *UniswapV3PoolBurnUpdateOne {
	uvbuo.mutation.SetEventID(id)
	return uvbuo
}

// SetEvent sets the "event" edge to the Event entity.
func (uvbuo *UniswapV3PoolBurnUpdateOne) SetEvent(e *Event) *UniswapV3PoolBurnUpdateOne {
	return uvbuo.SetEventID(e.ID)
}

// Mutation returns the UniswapV3PoolBurnMutation object of the builder.
func (uvbuo *UniswapV3PoolBurnUpdateOne) Mutation() *UniswapV3PoolBurnMutation {
	return uvbuo.mutation
}

// ClearEvent clears the "event" edge to the Event entity.
func (uvbuo *UniswapV3PoolBurnUpdateOne) ClearEvent() *UniswapV3PoolBurnUpdateOne {
	uvbuo.mutation.ClearEvent()
	return uvbuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uvbuo *UniswapV3PoolBurnUpdateOne) Select(field string, fields ...string) *UniswapV3PoolBurnUpdateOne {
	uvbuo.fields = append([]string{field}, fields...)
	return uvbuo
}

// Save executes the query and returns the updated UniswapV3PoolBurn entity.
func (uvbuo *UniswapV3PoolBurnUpdateOne) Save(ctx context.Context) (*UniswapV3PoolBurn, error) {
	var (
		err  error
		node *UniswapV3PoolBurn
	)
	if len(uvbuo.hooks) == 0 {
		if err = uvbuo.check(); err != nil {
			return nil, err
		}
		node, err = uvbuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UniswapV3PoolBurnMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uvbuo.check(); err != nil {
				return nil, err
			}
			uvbuo.mutation = mutation
			node, err = uvbuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uvbuo.hooks) - 1; i >= 0; i-- {
			if uvbuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uvbuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uvbuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uvbuo *UniswapV3PoolBurnUpdateOne) SaveX(ctx context.Context) *UniswapV3PoolBurn {
	node, err := uvbuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uvbuo *UniswapV3PoolBurnUpdateOne) Exec(ctx context.Context) error {
	_, err := uvbuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uvbuo *UniswapV3PoolBurnUpdateOne) ExecX(ctx context.Context) {
	if err := uvbuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uvbuo *UniswapV3PoolBurnUpdateOne) check() error {
	if v, ok := uvbuo.mutation.Owner(); ok {
		if err := uniswapv3poolburn.OwnerValidator(v); err != nil {
			return &ValidationError{Name: "owner", err: fmt.Errorf("ent: validator failed for field \"owner\": %w", err)}
		}
	}
	if _, ok := uvbuo.mutation.EventID(); uvbuo.mutation.EventCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"event\"")
	}
	return nil
}

func (uvbuo *UniswapV3PoolBurnUpdateOne) sqlSave(ctx context.Context) (_node *UniswapV3PoolBurn, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   uniswapv3poolburn.Table,
			Columns: uniswapv3poolburn.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: uniswapv3poolburn.FieldID,
			},
		},
	}
	id, ok := uvbuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing UniswapV3PoolBurn.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := uvbuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, uniswapv3poolburn.FieldID)
		for _, f := range fields {
			if !uniswapv3poolburn.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != uniswapv3poolburn.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uvbuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uvbuo.mutation.Owner(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: uniswapv3poolburn.FieldOwner,
		})
	}
	if value, ok := uvbuo.mutation.TickLower(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: uniswapv3poolburn.FieldTickLower,
		})
	}
	if value, ok := uvbuo.mutation.TickUpper(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: uniswapv3poolburn.FieldTickUpper,
		})
	}
	if value, ok := uvbuo.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: uniswapv3poolburn.FieldAmount,
		})
	}
	if value, ok := uvbuo.mutation.Amount0(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: uniswapv3poolburn.FieldAmount0,
		})
	}
	if value, ok := uvbuo.mutation.Amount1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: uniswapv3poolburn.FieldAmount1,
		})
	}
	if uvbuo.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   uniswapv3poolburn.EventTable,
			Columns: []string{uniswapv3poolburn.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: event.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uvbuo.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   uniswapv3poolburn.EventTable,
			Columns: []string{uniswapv3poolburn.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UniswapV3PoolBurn{config: uvbuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uvbuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{uniswapv3poolburn.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
